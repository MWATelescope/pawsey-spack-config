###### DIFF amber
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5c5
< # CONTRIBUTE - cray patches
---
> 
29c29
<     #maintainers("hseara")
---
>     maintainers("hseara")
41,42c41,42
<        # "20": ("21", "f55fa930598d5a8e9749e8a22d1f25cab7fcf911d98570e35365dd7f262aaafd"),
<         '20': ('20', 'b1e1f8f277c54e88abc9f590e788bbb2f7a49bcff5e8d8a6eacfaf332a4890f9'),
---
>         "20": ("21", "f55fa930598d5a8e9749e8a22d1f25cab7fcf911d98570e35365dd7f262aaafd"),
>         # '20': ('20', 'b1e1f8f277c54e88abc9f590e788bbb2f7a49bcff5e8d8a6eacfaf332a4890f9'),
128c128
<     depends_on("zlib")
---
>     depends_on("zlib-api")
146d145
<     conflicts("+x11", when="platform=cray", msg="x11 amber applications not available for cray")
###### DIFF amdgromacs
###### DIFF ansys-fluids
###### DIFF ansys-fluidstructures
###### DIFF ansys-structures
###### DIFF aoflagger
1,2c1,4
< from spack.patch import apply_patch
< import os
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
> # Spack Project Developers. See the top-level COPYRIGHT file for details.
> #
> # SPDX-License-Identifier: (Apache-2.0 OR MIT)
4c6,7
< PATCHFILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), "as.patch")
---
> from spack.package import *
> from spack.pkg.builtin.boost import Boost
11c14,15
<     maintainers("dipietrantonio")
---
>     homepage = "https://sourceforge.net/projects/aoflagger/"
>     url = "https://downloads.sourceforge.net/project/aoflagger/aoflagger-2.10.0/aoflagger-2.10.0.tar.bz2"
13,14c17
<     version('3.4.0', git='https://gitlab.com/aroffringa/aoflagger.git', tag='v3.4.0', submodules=True)
<     version('3.2.0', git='https://gitlab.com/aroffringa/aoflagger.git', tag='v3.2.0', submodules=True)
---
>     license("GPL-3.0-or-later")
16,24c19
<     depends_on('casacore@3.2.1:')
<     depends_on('fftw@3.3.8:')
<     depends_on('boost@1.80.0: +test +system +date_time')
<     depends_on('libxml2')
<     depends_on('cfitsio')
<     depends_on('libpng')
<     depends_on('hdf5@1.10: +cxx ~mpi api=v110')
<     depends_on('lua@5.2:')
<     depends_on('cmake', type='build')
---
>     version("2.10.0", sha256="3ec1188d37101acf2029575ebc09c50b19c158c88a12b55ac5d25a96bd8fc18d")
26c21,33
<     patch('as.patch', when='@3.2.0')
---
>     depends_on("cxx", type="build")  # generated
> 
>     depends_on("casacore+python~fftpack@1.10:")
>     depends_on("fftw~mpi@3.0:")
>     depends_on("boost+python@:1.66.99")
> 
>     # TODO: replace this with an explicit list of components of Boost,
>     # for instance depends_on('boost +filesystem')
>     # See https://github.com/spack/spack/pull/22303 for reference
>     depends_on(Boost.with_default_variants)
>     depends_on("libxml2")
>     depends_on("lapack")
>     depends_on("cfitsio")
###### DIFF autoconf
1c1
< # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,19d4
< # =======================================================================
< #                         PAWSEY ADDITIONS
< # =======================================================================
< # Marco
< # Differences for the 'autoconf' package
< # 68c68
< # <             filter_file('^#! @PERL@.*',
< # ---
< # >             filter_file('^#! @PERL@ -w',
< # 87,88c87,88
< # <         filter_file('^#! /usr/bin/ev perl',
< # <                     '#! {0}'.format(self.spec['perl'].command.path),
< # ---
< # >         filter_file('^#! /usr/bin/env perl',
< # >                     '#! {0} -w'.format(self.spec['perl'].command.path),
22a8,9
> from spack.package import *
> 
27,28c14,18
<     homepage = 'https://www.gnu.org/software/autoconf/'
<     gnu_mirror_path = 'autoconf/autoconf-2.69.tar.gz'
---
>     homepage = "https://www.gnu.org/software/autoconf/"
>     gnu_mirror_path = "autoconf/autoconf-2.69.tar.gz"
> 
>     license("GPL-3.0-or-later WITH Autoconf-exception-3.0", when="@2.62:", checked_by="tgamblin")
>     license("GPL-2.0-or-later WITH Autoconf-exception-2.0", when="@:2.59", checked_by="tgamblin")
30,35c20,25
<     version('2.71', sha256='431075ad0bf529ef13cb41e9042c542381103e80015686222b8a9d4abef42a1c')
<     version('2.70', sha256='f05f410fda74323ada4bdc4610db37f8dbd556602ba65bc843edb4d4d4a1b2b7')
<     version('2.69', sha256='954bd69b391edc12d6a4a51a2dd1476543da5c6bbf05a95b59dc0dd6fd4c2969',
<             preferred=True)
<     version('2.62', sha256='83aa747e6443def0ebd1882509c53f5a2133f502ddefa21b3de141c433914bdd')
<     version('2.59', sha256='9cd05c73c5fcb1f5ccae53dd6cac36bb8cb9c7b3e97ffae5a7c05c72594c88d8')
---
>     version("2.72", sha256="afb181a76e1ee72832f6581c0eddf8df032b83e2e0239ef79ebedc4467d92d6e")
>     version("2.71", sha256="431075ad0bf529ef13cb41e9042c542381103e80015686222b8a9d4abef42a1c")
>     version("2.70", sha256="f05f410fda74323ada4bdc4610db37f8dbd556602ba65bc843edb4d4d4a1b2b7")
>     version("2.69", sha256="954bd69b391edc12d6a4a51a2dd1476543da5c6bbf05a95b59dc0dd6fd4c2969")
>     version("2.62", sha256="83aa747e6443def0ebd1882509c53f5a2133f502ddefa21b3de141c433914bdd")
>     version("2.59", sha256="9cd05c73c5fcb1f5ccae53dd6cac36bb8cb9c7b3e97ffae5a7c05c72594c88d8")
38,40c28,32
<     patch('https://git.savannah.gnu.org/cgit/autoconf.git/patch/?id=05972f49ee632cd98057a3caf82ebfb9574846da',
<           sha256='eaa3f69d927a853313a0b06e2117c51adab6377a2278549b05abc5df93643e16',
<           when='@2.70')
---
>     patch(
>         "https://git.savannah.gnu.org/cgit/autoconf.git/patch/?id=05972f49ee632cd98057a3caf82ebfb9574846da",
>         sha256="eaa3f69d927a853313a0b06e2117c51adab6377a2278549b05abc5df93643e16",
>         when="@2.70",
>     )
43,45c35,39
<     patch('http://mirrors.mit.edu/gentoo-portage/sys-devel/autoconf/files/autoconf-2.69-fix-libtool-test.patch',
<           sha256='7793209b33013dc0f81208718c68440c5aae80e7a1c4b8d336e382525af791a7',
<           when='@2.69')
---
>     patch(
>         "https://mirrors.mit.edu/gentoo-portage/dev-build/autoconf/files/autoconf-2.69-fix-libtool-test.patch",
>         sha256="7793209b33013dc0f81208718c68440c5aae80e7a1c4b8d336e382525af791a7",
>         when="@2.69",
>     )
47,49c41,45
<     patch('http://mirrors.mit.edu/gentoo-portage/sys-devel/autoconf/files/autoconf-2.69-perl-5.26.patch',
<           sha256='35c449281546376449766f92d49fc121ca50e330e60fefcfc9be2af3253082c2',
<           when='@2.62:2.69 ^perl@5.17:')
---
>     patch(
>         "https://mirrors.mit.edu/gentoo-portage/dev-build/autoconf/files/autoconf-2.69-perl-5.26.patch",
>         sha256="35c449281546376449766f92d49fc121ca50e330e60fefcfc9be2af3253082c2",
>         when="@2.62:2.69 ^perl@5.17:",
>     )
51,53c47,51
<     patch('http://mirrors.mit.edu/gentoo-portage/sys-devel/autoconf/files/autoconf-2.69-perl-5.26-2.patch',
<           sha256='a49dd5bac3b62daa0ff688ab4d508d71dbd2f4f8d7e2a02321926346161bf3ee',
<           when='@2.62:2.69 ^perl@5.17:')
---
>     patch(
>         "https://mirrors.mit.edu/gentoo-portage/dev-build/autoconf/files/autoconf-2.69-perl-5.26-2.patch",
>         sha256="a49dd5bac3b62daa0ff688ab4d508d71dbd2f4f8d7e2a02321926346161bf3ee",
>         when="@2.62:2.69 ^perl@5.17:",
>     )
57,58c55,57
<     depends_on('m4@1.4.6:', type=('build', 'run'))
<     depends_on('perl', type=('build', 'run'))
---
>     depends_on("m4@1.4.8:", type=("build", "run"), when="@2.72:")
>     depends_on("m4@1.4.6:", type=("build", "run"), when="@:2.71")
>     depends_on("perl", type=("build", "run"))
60c59
<     build_directory = 'spack-build'
---
>     build_directory = "spack-build"
62c61
<     tags = ['build-tools']
---
>     tags = ["build-tools"]
65,66c64,70
<         '^autoconf$', '^autoheader$', '^autom4te$', '^autoreconf$',
<         '^autoscan$', '^autoupdate$', '^ifnames$'
---
>         "^autoconf$",
>         "^autoheader$",
>         "^autom4te$",
>         "^autoreconf$",
>         "^autoscan$",
>         "^autoupdate$",
>         "^ifnames$",
71,72c75,76
<         output = Executable(exe)('--version', output=str, error=str)
<         match = re.search(r'\(GNU Autoconf\)\s+(\S+)', output)
---
>         output = Executable(exe)("--version", output=str, error=str)
>         match = re.search(r"\(GNU Autoconf\)\s+(\S+)", output)
78c82
<         patched_file = 'bin/autom4te.in'
---
>         patched_file = "bin/autom4te.in"
83,86c87,92
<             filter_file('^#! @PERL@.*',
<                         '#! /usr/bin/env perl',
<                         patched_file)
<         if self.version == Version('2.62'):
---
>             if self.spec.satisfies("@2.70:"):
>                 shebang_string = "^#! @PERL@"
>             else:
>                 shebang_string = "^#! @PERL@ -w"
>             filter_file(shebang_string, "#! /usr/bin/env perl", patched_file)
>         if self.version == Version("2.62"):
88,89c94,95
<             touch('man/autoheader.1')
<             touch('man/autoscan.1')
---
>             touch("man/autoheader.1")
>             touch("man/autoscan.1")
95c101
<     @run_after('install')
---
>     @run_after("install")
100a107,111
>         if self.spec.satisfies("@2.70:"):
>             shebang_string = "#! {0}"
>         else:
>             shebang_string = "#! {0} -w"
> 
102,105c113,118
<         filter_file('^#! /usr/bin/ev perl',
<                     '#! {0}'.format(self.spec['perl'].command.path),
<                     self.prefix.bin.autom4te,
<                     backup=False)
---
>         filter_file(
>             "^#! /usr/bin/env perl",
>             shebang_string.format(self.spec["perl"].command.path),
>             self.prefix.bin.autom4te,
>             backup=False,
>         )
113,119c126,134
<         executables = ['autoconf',
<                        'autoheader',
<                        'autom4te',
<                        'autoreconf',
<                        'autoscan',
<                        'autoupdate',
<                        'ifnames']
---
>         executables = [
>             "autoconf",
>             "autoheader",
>             "autom4te",
>             "autoreconf",
>             "autoscan",
>             "autoupdate",
>             "ifnames",
>         ]
###### DIFF birli
###### DIFF blaspp
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,6c5
< # PAWSEY Additions
< # added 2023.11.05 version
---
> 
22c21,29
<     version("2023.11.05", sha256="62dfc03ec07c0826e0466dc2c204b460caa929d53ad4f050cb132d92670be7ce")
---
>     license("BSD-3-Clause")
> 
>     version("master", branch="master")
>     version(
>         "2024.05.31", sha256="24f325d2e1c2cc4275324bd88406555688379480877d19553656a0328287927a"
>     )
>     version(
>         "2023.11.05", sha256="62dfc03ec07c0826e0466dc2c204b460caa929d53ad4f050cb132d92670be7ce"
>     )
47a55,56
>     depends_on("cxx", type="build")  # generated
> 
77a87,88
>     patch("0001-fix-blaspp-build-error-with-rocm-6.0.0.patch", when="@2023.06.00: ^hip@6.0 +rocm")
> 
83c94
<             if "+cuda" in spec:
---
>             if spec.satisfies("+cuda"):
85c96
<             if "+rocm" in spec:
---
>             if spec.satisfies("+rocm"):
87c98
<             if "+sycl" in spec:
---
>             if spec.satisfies("+sycl"):
###### DIFF boost
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5d4
< # Pawsey additions to handle cce compiler: if self.spec.satisfies("@1.79.0 %oneapi") or self.spec.satisfies("%cce"):
24c23
<     url = "http://downloads.sourceforge.net/project/boost/boost/1.55.0/boost_1_55_0.tar.bz2"
---
>     url = "https://downloads.sourceforge.net/project/boost/boost/1.55.0/boost_1_55_0.tar.bz2"
29a29,30
>     license("BSL-1.0")
> 
30a32,33
>     version("1.85.0", sha256="7009fe1faa1697476bdc7027703a2badb84e849b7b0baad5086b087b971f8617")
>     version("1.84.0", sha256="cc4b893acf645c9d4b698e9a0f08ca8846aa5d6c68275c14c3e7949c24109454")
78a82,84
>     depends_on("c", type="build")
>     depends_on("cxx", type="build")
> 
173c179
<         default="98",
---
>         default="11",
188a195,198
> 
>     # 1.84.0 dropped support for 98/03
>     conflicts("cxxstd=98", when="@1.84.0:")
> 
240a251,252
>     # https://github.com/boostorg/python/issues/431
>     depends_on("py-numpy@:1", when="@:1.85+numpy", type=("build", "run"))
283a296,302
>     # Boost 1.85.0 stacktrace added a hard compilation error that has to
>     # explicitly be suppressed on some platforms:
>     # https://github.com/boostorg/stacktrace/pull/150. This conflict could be
>     # turned into a variant that allows users to opt-in when they know it is
>     # safe to do so on affected platforms.
>     conflicts("+clanglibcpp", when="@1.85: +stacktrace")
> 
310a330,332
>     # Patch to workaround gcc-8.3 compiler issue https://github.com/boostorg/mpl/issues/44
>     patch("boost_gcc83_cpp17_fix.patch", when="@1.69:%gcc@8.3")
> 
328,330d349
<     # Fix the bootstrap/bjam build for Cray
<     patch("bootstrap-path.patch", when="@1.39.0: platform=cray")
< 
432c451
<             url = "https://boostorg.jfrog.io/artifactory/main/release/{0}/source/boost_{1}.tar.bz2"
---
>             url = "https://archives.boost.io/release/{0}/source/boost_{1}.tar.bz2"
434c453
<             url = "http://downloads.sourceforge.net/project/boost/boost/{0}/boost_{1}.tar.bz2"
---
>             url = "https://downloads.sourceforge.net/project/boost/boost/{0}/boost_{1}.tar.bz2"
440c459
<             if self.spec.satisfies("@1.79.0 %oneapi") or self.spec.satisfies("%cce"):
---
>             if self.spec.satisfies("@1.79.0 %oneapi"):
491c510
<         if "+python" in spec:
---
>         if spec.satisfies("+python"):
494c513
<         if "+icu" in spec:
---
>         if spec.satisfies("+icu"):
506c525
<             if "+mpi" in spec:
---
>             if spec.satisfies("+mpi"):
514,517d532
< 
<                 if "platform=cray" in spec:
<                     mpi_line += " : <define>MPICH_SKIP_MPICXX"
< 
520c535
<             if "+python" in spec:
---
>             if spec.satisfies("+python"):
524c539
<         if "+debug" in spec:
---
>         if spec.satisfies("+debug"):
529c544
<         if "+icu" in spec:
---
>         if spec.satisfies("+icu"):
534c549
<         if "+iostreams" in spec:
---
>         if spec.satisfies("+iostreams"):
556c571
<             if "platform=darwin" in self.spec:
---
>             if self.spec.satisfies("platform=darwin"):
560c575
<         if "+shared" in spec:
---
>         if spec.satisfies("+shared"):
564c579
<         if "+multithreaded" in spec:
---
>         if spec.satisfies("+multithreaded"):
566c581
<         if "+singlethreaded" in spec:
---
>         if spec.satisfies("+singlethreaded"):
577c592
<         if "+taggedlayout" in spec:
---
>         if spec.satisfies("+taggedlayout"):
579c594
<         elif "+versionedlayout" in spec:
---
>         elif spec.satisfies("+versionedlayout"):
611c626
<         if "+pic" in self.spec:
---
>         if self.spec.satisfies("+pic"):
620c635
<             if "+clanglibcpp" in spec:
---
>             if spec.satisfies("+clanglibcpp"):
629a645,651
>         # See conflict above and
>         # https://github.com/boostorg/stacktrace/pull/150. This suppresses a
>         # compilation error that must be explicitly suppressed. Because of the
>         # conflict we can suppress the error without input from a user.
>         if spec.satisfies("@1.85: +stacktrace"):
>             cxxflags.append("-DBOOST_STACKTRACE_LIBCXX_RUNTIME_MAY_CAUSE_MEMORY_LEAK")
> 
677c699
<         if "+graph" in spec and "+mpi" in spec:
---
>         if spec.satisfies("+graph") and spec.satisfies("+mpi"):
734c756
<         if "@develop" in spec:
---
>         if spec.satisfies("@develop"):
747c769
<         if "+multithreaded" in spec and "~taggedlayout" in spec:
---
>         if spec.satisfies("+multithreaded") and spec.satisfies("~taggedlayout"):
778d799
< 
###### DIFF calceph
###### DIFF casacore
1c1
< # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,7c5
< # Contribute
< # - Fix fftw dependency to set the fftw-api
< # - Dependency on gsl when @3.5.0:
---
> 
17c15,19
<     url      = "https://github.com/casacore/casacore/archive/v2.4.1.tar.gz"
---
>     url = "https://github.com/casacore/casacore/archive/refs/tags/v3.5.0.tar.gz"
> 
>     maintainers("mpokorny")
> 
>     license("LGPL-2.0-only")
19c21,47
<     maintainers = ['mpokorny']
---
>     version("3.5.0", sha256="63f1c8eff932b0fcbd38c598a5811e6e5397b72835b637d6f426105a183b3f91")
>     version("3.4.0", sha256="31f02ad2e26f29bab4a47a2a69e049d7bc511084a0b8263360e6157356f92ae1")
>     version("3.3.0", sha256="3a714644b908ef6e81489b792cc9b80f6d8267a275e15d38a42a6a5137d39d3d")
>     version("3.2.0", sha256="ae5d3786cb6dfdd7ebc5eecc0c724ff02bbf6929720bc23be43a027978e79a5f")
>     version("3.1.2", sha256="ac94f4246412eb45d503f1019cabe2bb04e3861e1f3254b832d9b1164ea5f281")
>     version("3.1.1", sha256="85d2b17d856592fb206b17e0a344a29330650a4269c80b87f8abb3eaf3dadad4")
>     version("3.1.0", sha256="a6adf2d77ad0d6f32995b1e297fd88d31ded9c3e0bb8f28966d7b35a969f7897")
>     version("3.0.0", sha256="6f0e68fd77b5c96299f7583a03a53a90980ec347bff9dfb4c0abb0e2933e6bcb")
>     version("2.4.1", sha256="58eccc875053b2c6fe44fe53b6463030ef169597ec29926936f18d27b5087d63")
> 
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
>     depends_on("fortran", type="build")  # generated
> 
>     depends_on("cmake@3.7.1:", type="build")
> 
>     variant("adios2", default=False, description="Build ADIOS2 support")
>     variant("dysco", default=True, when="@3.5.0:", description="Build Dysco storage manager")
>     variant("fftpack", default=False, description="Build FFTPack")
>     variant("hdf5", default=False, description="Build HDF5 support")
>     variant("mpi", default=False, description="Use MPI for parallel I/O")
>     variant("openmp", default=False, description="Build OpenMP support")
>     variant("python", default=False, description="Build python support")
>     variant("readline", default=True, description="Build readline support")
>     variant("shared", default=True, description="Build shared libraries")
>     variant("tablelocking", default=True, description="Enable table locking")
>     variant("threads", default=True, description="Use mutex thread synchronization")
21,43d48
<     version('3.5.0', sha256='63f1c8eff932b0fcbd38c598a5811e6e5397b72835b637d6f426105a183b3f91')
<     version('3.4.0', sha256='31f02ad2e26f29bab4a47a2a69e049d7bc511084a0b8263360e6157356f92ae1')
<     version('3.3.0', sha256='3a714644b908ef6e81489b792cc9b80f6d8267a275e15d38a42a6a5137d39d3d')
<     version('3.2.1', sha256='f87ce81d2b42ec5401cff8317baeeb9a3b408b716bb791ef252ad97af6e235ad')
<     version('3.2.0', sha256='ae5d3786cb6dfdd7ebc5eecc0c724ff02bbf6929720bc23be43a027978e79a5f')
<     version('3.1.2', sha256='ac94f4246412eb45d503f1019cabe2bb04e3861e1f3254b832d9b1164ea5f281')
<     version('3.1.1', sha256='85d2b17d856592fb206b17e0a344a29330650a4269c80b87f8abb3eaf3dadad4')
<     version('3.1.0', sha256='a6adf2d77ad0d6f32995b1e297fd88d31ded9c3e0bb8f28966d7b35a969f7897')
<     version('3.0.0', sha256='6f0e68fd77b5c96299f7583a03a53a90980ec347bff9dfb4c0abb0e2933e6bcb')
<     version('2.4.1', sha256='58eccc875053b2c6fe44fe53b6463030ef169597ec29926936f18d27b5087d63')
< 
<     depends_on('cmake@3.7.1:', type='build')
< 
<     variant('openmp', default=False, description='Build OpenMP support')
<     variant('shared', default=True, description='Build shared libraries')
<     variant('readline', default=True, description='Build readline support')
<     # see note below about the reason for disabling the "sofa" variant
<     # variant('sofa', default=False, description='Build SOFA support')
<     variant('adios2', default=False, description='Build ADIOS2 support')
<     variant('fftpack', default=False, description='Build FFTPack')
<     variant('hdf5', default=False, description='Build HDF5 support')
<     variant('python', default=False, description='Build python support')
<     variant('tablelocking', default=False, description='Enable table locking.')
49,68c54,76
<     depends_on('readline', when='@:3.2.0')
<     depends_on('readline', when='+readline')
<     depends_on('flex', type='build')
<     depends_on('bison', type='build')
<     depends_on('blas')
<     depends_on('lapack')
<     depends_on('cfitsio')
<     depends_on('wcslib@4.20:+cfitsio')
<     depends_on('fftw-api@3 precision=float,double', when='@3.4.0:')
<     depends_on('fftw-api@3 precision=float,double', when='~fftpack')
<     # SOFA dependency suffers the same problem in CMakeLists.txt as readline;
<     # force a dependency when building unit tests
<     depends_on('sofa-c', type='test')
<     depends_on('hdf5', when='+hdf5')
<     depends_on('adios2+mpi', when='+adios2')
<     depends_on('mpi', when='+adios2')
<     depends_on('python@2.6:', when='+python')
<     depends_on('boost+python', when='+python')
<     depends_on('py-numpy', when='+python')
<     depends_on('gsl', when='@3.5.0:')
---
>     depends_on("readline", when="@:3.2.0")
>     depends_on("readline", when="+readline")
>     depends_on("flex", type="build")
>     depends_on("bison", type="build")
>     depends_on("blas")
>     depends_on("lapack")
>     depends_on("cfitsio")
>     depends_on("wcslib@4.20:+cfitsio")
>     depends_on("fftw@3.0.0: precision=float,double", when="@3.4.0:")
>     depends_on("fftw@3.0.0: precision=float,double", when="~fftpack")
>     depends_on("sofa-c", type="test")
>     depends_on("hdf5", when="+hdf5")
>     depends_on("adios2+mpi", when="+adios2")
>     depends_on("mpi", when="+mpi")
>     depends_on("python@2.6:", when="+python")
>     depends_on("boost +python", when="+python")
>     depends_on("boost +system +filesystem", when="+dysco")
>     depends_on("py-numpy", when="+python")
>     depends_on("gsl", when="+dysco")
> 
>     conflicts("~mpi", when="+adios2")
>     conflicts("+tablelocking", when="+mpi")
>     conflicts("~threads", when="+openmp")
71c79
<         args = ['-DCMAKE_Fortran_FLAGS=-fallow-argument-mismatch']
---
>         args = []
74,80c82,91
<         args.append(self.define_from_variant('ENABLE_SHARED', 'shared'))
<         args.append(self.define_from_variant('USE_OPENMP', 'openmp'))
<         args.append(self.define_from_variant('USE_READLINE', 'readline'))
<         args.append(self.define_from_variant('USE_HDF5', 'hdf5'))
<         args.append(self.define_from_variant('USE_ADIOS2', 'adios2'))
<         args.append(self.define_from_variant('USE_MPI', 'adios2'))
<         args.append(self.define_from_variant('ENABLE_TABLELOCKING', 'tablelocking'))
---
>         args.append(self.define_from_variant("BUILD_DYSCO", "dysco"))
>         args.append(self.define_from_variant("ENABLE_TABLELOCKING", "tablelocking"))
>         args.append(self.define_from_variant("ENABLE_SHARED", "shared"))
>         args.append(self.define_from_variant("USE_THREADS", "threads"))
>         args.append(self.define_from_variant("USE_OPENMP", "openmp"))
>         args.append(self.define_from_variant("USE_READLINE", "readline"))
>         args.append(self.define_from_variant("USE_HDF5", "hdf5"))
>         args.append(self.define_from_variant("USE_ADIOS2", "adios2"))
>         args.append(self.define_from_variant("USE_MPI", "mpi"))
>         args.append("-DPORTABLE=ON")  # let Spack determine arch build flags
87,90c98,100
<         if spec.satisfies('@3.4.0:'):
<             if spec.satisfies('+fftpack'):
<                 args.append('-DBUILD_FFTPACK_DEPRECATED=YES')
<             args.append(self.define('USE_FFTW3', True))
---
>         if spec.satisfies("@3.4.0:"):
>             if spec.satisfies("+fftpack"):
>                 args.append("-DBUILD_FFTPACK_DEPRECATED=YES")
92c102
<             args.append(self.define('USE_FFTW3', spec.satisfies('~fftpack')))
---
>             args.append(self.define("USE_FFTW3", spec.satisfies("~fftpack")))
95,98c105,108
<         if spec.satisfies('~python'):
<             args.extend(['-DBUILD_PYTHON=NO', '-DBUILD_PYTHON3=NO'])
<         elif spec.satisfies('^python@3.0.0:'):
<             args.extend(['-DBUILD_PYTHON=NO', '-DBUILD_PYTHON3=YES'])
---
>         if spec.satisfies("~python"):
>             args.extend(["-DBUILD_PYTHON=NO", "-DBUILD_PYTHON3=NO"])
>         elif spec.satisfies("^python@3.0.0:"):
>             args.extend(["-DBUILD_PYTHON=NO", "-DBUILD_PYTHON3=YES"])
100c110
<             args.extend(['-DBUILD_PYTHON=YES', '-DBUILD_PYTHON3=NO'])
---
>             args.extend(["-DBUILD_PYTHON=YES", "-DBUILD_PYTHON3=NO"])
102c112
<         args.append('-DBUILD_TESTING=OFF')
---
>         args.append("-DBUILD_TESTING=OFF")
107c117
<         os.remove('cmake/FindHDF5.cmake')
---
>         os.remove("cmake/FindHDF5.cmake")
###### DIFF cpmd
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,6d4
< # Check if manual_download is set properly
< import os
14,16c12
<     designed for ab-initio molecular dynamics.
<     Move to new directory, download CPMD main archive and patch.to.XXXXs
<     manually, and run Spack"""
---
>     designed for ab-initio molecular dynamics."""
19,27c15,25
<     basedir = os.getcwd()
<     url = "file://{0}/cpmd-v4.3.tar.gz".format(basedir)
<     manual_download = False
< 
<     version("4.3", sha256="4f31ddf045f1ae5d6f25559d85ddbdab4d7a6200362849df833632976d095df4")
< 
<     variant('omp', description='Enables the use of OMP instructions',
<             default=False)
<     variant('mpi', description='Build with MPI support', default=False)
---
>     url = "https://github.com/CPMD-code/CPMD/archive/refs/tags/4.3.tar.gz"
> 
>     license("MIT")
> 
>     version("4.3", sha256="e0290f9da0d255f90a612e60662b14a97ca53003f89073c6af84fa7bc8739f65")
> 
>     depends_on("c", type="build")  # generated
>     depends_on("fortran", type="build")  # generated
> 
>     variant("omp", description="Enables the use of OMP instructions", default=False)
>     variant("mpi", description="Build with MPI support", default=False)
34,39d31
< 
<     patch('file://{0}/patch.to.4612'.format(basedir), sha256='3b7d91e04c40418ad958069234ec7253fbf6c4be361a1d5cfd804774eeb44915', level=0, when='@4.3')
<     patch('file://{0}/patch.to.4615'.format(basedir), sha256='5ec5790fb6ca64632bcc1b0f5b8f3423c54455766a0979ff4136624bbe8d49eb', level=0, when='@4.3')
<     patch('file://{0}/patch.to.4616'.format(basedir), sha256='ac0bc215c4259f55da4dc59803fe636f797e241f8a01974e05730c9778ad44c4', level=0, when='@4.3')
<     patch('file://{0}/patch.to.4621'.format(basedir), sha256='2d2bc7e37246032fc354f51da7dbdb5a219dd228867399931b0e94da1265d5ca', level=0, when='@4.3')
<     patch('file://{0}/patch.to.4624'.format(basedir), sha256='0a19687528264bf91c9f50ffdc0b920a8511eecf5259b667c8c29350f9dabc53', level=0, when='@4.3')
###### DIFF dftd4
1c1
< # Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5c5
< # Just grabbed the latest version from spack/develop
---
> 
13c13
<     url = "https://github.com/dftd4/dftd4/releases/download/v3.3.0/dftd4-3.3.0-source.tar.xz"
---
>     url = "https://github.com/dftd4/dftd4/releases/download/v3.5.0/dftd4-3.5.0-source.tar.xz"
16c16,18
<     maintainers = ["awvwgk"]
---
>     maintainers("awvwgk")
> 
>     license("LGPL-3.0-only")
19,23c21,29
<     version("3.4.0", "24fcb225cdd5c292ac26f7d3204ee3c4024174adb5272eeda9ae7bc57113ec8d")
<     version("3.3.0", "408720b8545532d5240dd743c05d57b140af983192dad6d965b0d79393d0a9ef")
<     version("3.2.0", "cef505e091469aa9b8f008ee1756545bb87b02760bb2c7ca54854e20ba8c590a")
<     version("3.1.0", "b652aa7cbf8d087c91bcf80f2d5801459ecf89c5d4176ebb39e963ee740ed54b")
<     version("3.0.0", "a7539d68d48d851bf37b79e37ea907c9da5eee908d0aa58a0a7dc15f04f8bc35")
---
>     version("3.5.0", sha256="d2bab992b5ef999fd13fec8eb1da9e9e8d94b8727a2e624d176086197a00a46f")
>     version("3.4.0", sha256="24fcb225cdd5c292ac26f7d3204ee3c4024174adb5272eeda9ae7bc57113ec8d")
>     version("3.3.0", sha256="408720b8545532d5240dd743c05d57b140af983192dad6d965b0d79393d0a9ef")
>     version("3.2.0", sha256="cef505e091469aa9b8f008ee1756545bb87b02760bb2c7ca54854e20ba8c590a")
>     version("3.1.0", sha256="b652aa7cbf8d087c91bcf80f2d5801459ecf89c5d4176ebb39e963ee740ed54b")
>     version("3.0.0", sha256="a7539d68d48d851bf37b79e37ea907c9da5eee908d0aa58a0a7dc15f04f8bc35")
> 
>     depends_on("c", type="build")  # generated
>     depends_on("fortran", type="build")  # generated
29d34
<     depends_on("cmake", type="build")
35a41,42
> 
>     extends("python", when="+python")
###### DIFF everybeam
###### DIFF exabayes
1c1
< # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,40c5,9
< # Differences for the 'exabayes' package
< # 11,12c11,12
< # <     homepage = "https://cme.h-its.org/exelixis/web/software/exabayes/index.html"
< # <     url      = "https://cme.h-its.org/exelixis/resource/download/software/exabayes-1.5.1.tar.gz"
< # ---
< # >     homepage = "https://sco.h-its.org/exelixis/web/software/exabayes/"
< # >     url      = "https://sco.h-its.org/exelixis/resource/download/software/exabayes-1.5.tar.gz"
< # 14a15
< # >     version('1.5', sha256='e401f1b4645e67e8879d296807131d0ab79bba81a1cd5afea14d7c3838b095a2')
< # 25,33c26,29
< # < 
< # <     # gcc 11.x has -std=gnu++17 by default, does not work to build exabayes, at least up to 1.5.1
< # <     def flag_handler(self, name, flags):
< # <         if self.spec.satisfies('%gcc@11:') and name == 'cxxflags':
< # <             flags.append('-std=gnu++14')
< # <         return (flags, None, None)
< # < 
< # <     # configure updated to better determine if MPI compiler available
< # <     patch('configure_mpi.patch', level=0, when='@1.5.1: +mpi', )
< # ---
< # >     conflicts('^intel-mpi', when='+mpi')
< # >     conflicts('^intel-parallel-studio+mpi', when='+mpi')
< # >     conflicts('^mvapich2', when='+mpi')
< # >     conflicts('^spectrum-mpi', when='+mpi')
< # 42,51d37
< # < 
< # <     # don't do anything autoreconf as configure 
< # <     # in exabayes is properly setup and
< # <     # the autotools are not 
< # <     def autoreconf(self, spec, prefix):
< # <        return
< # < 
< # < 
< # < 
< # < 
< # Contribute recipe and patch
---
> 
> 
> from spack.package import *
> 
> 
43c12
<        particularly suitable for large-scale analyses on computer clusters."""
---
>     particularly suitable for large-scale analyses on computer clusters."""
45,46c14,15
<     homepage = "https://cme.h-its.org/exelixis/web/software/exabayes/index.html"
<     url      = "https://cme.h-its.org/exelixis/resource/download/software/exabayes-1.5.1.tar.gz"
---
>     homepage = "https://sco.h-its.org/exelixis/web/software/exabayes/"
>     url = "https://sco.h-its.org/exelixis/resource/download/software/exabayes-1.5.tar.gz"
48c17
<     version('1.5.1', sha256='f75ce8d5cee4d241cadacd0f5f5612d783b9e9babff2a99c7e0c3819a94bbca9')
---
>     license("GPL-3.0-only")
50c19,20
<     variant('mpi', default=True, description='Enable MPI parallel support')
---
>     version("1.5.1", sha256="f75ce8d5cee4d241cadacd0f5f5612d783b9e9babff2a99c7e0c3819a94bbca9")
>     version("1.5", sha256="e401f1b4645e67e8879d296807131d0ab79bba81a1cd5afea14d7c3838b095a2")
52c22,27
<     depends_on('mpi', when='+mpi')
---
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
> 
>     variant("mpi", default=True, description="Enable MPI parallel support")
> 
>     depends_on("mpi", when="+mpi")
57,67c32,37
<     conflicts('%gcc@:4.5.4, 7.1.0:', when='@:1.5.0')
<     conflicts('%clang@:3.1')
< 
<     # gcc 11.x has -std=gnu++17 by default, does not work to build exabayes, at least up to 1.5.1
<     def flag_handler(self, name, flags):
<         if self.spec.satisfies('%gcc@11:') and name == 'cxxflags':
<             flags.append('-std=gnu++14')
<         return (flags, None, None)
< 
<     # configure updated to better determine if MPI compiler available
<     patch('configure_mpi.patch', level=0, when='@1.5.1: +mpi', )
---
>     conflicts("%gcc@:4.5.4, 7.1.0:", when="@:1.5.0")
>     conflicts("%clang@:3.1")
>     conflicts("^intel-mpi", when="+mpi")
>     conflicts("^intel-parallel-studio+mpi", when="+mpi")
>     conflicts("^mvapich2", when="+mpi")
>     conflicts("^spectrum-mpi", when="+mpi")
71,72c41,42
<         if '+mpi' in self.spec:
<             args.append('--enable-mpi')
---
>         if "+mpi" in self.spec:
>             args.append("--enable-mpi")
74c44
<             args.append('--disable-mpi')
---
>             args.append("--disable-mpi")
77,85c47,51
<     # don't do anything autoreconf as configure 
<     # in exabayes is properly setup and
<     # the autotools are not 
<     def autoreconf(self, spec, prefix):
<        return
< 
< 
< 
< 
---
>     def flag_handler(self, name, flags):
>         if name.lower() == "cxxflags":
>             # manual cites need for c++11
>             flags.append(self.compiler.cxx11_flag)
>         return (flags, None, None)
###### DIFF feh
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,11d4
< #pawsey additions
< #    def flag_handler(self, name, flags):
< #        if name == "cflags":
< #            if self.spec.satisfies("%cce"):
< #                iflags.append("-Wno-error=implicit-function-declaration")
< #        return (flags, None, None)
< 
27a21,22
>     license("MIT-feh")
> 
32a28,29
>     depends_on("c", type="build")  # generated
> 
44,50d40
< 
<     def flag_handler(self, name, flags):
<         if name == "cflags":
<             if self.spec.satisfies("%cce"):
<                 flags.append("-Wno-error=implicit-function-declaration")
<         return (flags, None, None)
< 
###### DIFF giant-squid
###### DIFF gromacs
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,10c5
< # =======================================================================
< #                         PAWSEY ADDITIONS
< # =======================================================================
< # This is a version of the recipe coming from the later 0.21.0-dev Spack
< # version. It will allow us to have the latest versions.
< #variant lapack added
---
> 
34c29,32
<     # maintainers("danielahlin", "eirrgang", "junghans")
---
>     maintainers("mabraham", "eirrgang", "junghans")
> 
>     license("GPL-2.0-or-later", when="@:4.5")
>     license("LGPL-2.1-or-later", when="@4.6:")
37a36,40
>     version("2024.2", sha256="802a7e335f2e895770f57b159e4ec368ebb0ff2ce6daccf706c6e8025c36852b")
>     version("2024.1", sha256="937d8f12a36fffbf2af7add71adbb5aa5c5537892d46c9a76afbecab1aa0aac7")
>     version("2024", sha256="04d226d52066a8bc3a42e00d6213de737b4ec292e26703065924ff01956801e2")
>     version("2023.5", sha256="9cc491d3601a5fe0ec0de727e4432c34877f596fe8a463d4cf0f0f53fb34d08b")
>     version("2023.4", sha256="e5d6c4d9e7ccacfaccb0888619bd21b5ea8911f82b410e68d6db5d40f695f231")
41a45
>     version("2022.6", sha256="75d277138475679dd3e334e384a71516570cde767310476687f2a5b72333ea41")
87a92,95
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
>     depends_on("fortran", type="build")  # generated
> 
97c105,116
<     variant("cufftmp", default=False, when="+cuda+mpi", description="Enable Multi GPU FFT support")
---
>     variant(
>         "cufftmp",
>         default=False,
>         when="@2022: +cuda+mpi",
>         description="Enable multi-GPU FFT support with cuFFTMp",
>     )
>     variant(
>         "heffte",
>         default=False,
>         when="@2021: +sycl+mpi",
>         description="Enable multi-GPU FFT support with HeFFTe",
>     )
99c118,124
<     variant("sycl", default=False, description="Enable SYCL support")
---
>     variant("sycl", default=False, when="@2021:", description="Enable SYCL support")
>     variant(
>         "intel-data-center-gpu-max",
>         default=False,
>         when="@2022: +sycl",
>         description="Enable support for Intel Data Center GPU Max",
>     )
115a141,152
>         "nblib",
>         default=True,
>         when="@2021:",
>         description="Build and install the NB-LIB C++ API for GROMACS",
>     )
>     variant(
>         "gmxapi",
>         default=True,
>         when="@2019:",
>         description="Build and install the gmxlib python API for GROMACS",
>     )
>     variant(
133c170
<         when="target=neoverse_v1",
---
>         when="target=neoverse_v1:,neoverse_v2:",
149,150d185
<     variant("lapack", default=False, description="Enables an external LAPACK library")
<     variant("blas", default=False, description="Enables an external BLAS library")
158,167d192
<     conflicts(
<         "~lapack",
<         when="+cp2k",
<         msg="GROMACS and CP2K should use the same lapack, please disable bundled lapack",
<     )
<     conflicts(
<         "~blas",
<         when="+cp2k",
<         msg="GROMACS and CP2K should use the same blas, please disable bundled blas",
<     )
171c196
<         "intel-oneapi-mkl@:2021.2",
---
>         "^intel-oneapi-mkl@:2021.2",
178,202c203,229
<     # Plumed 2.8.2 needs Gromacs 2022.5 2021.7, 2020.7, 2019.6
<     # Plumed 2.8.1 needs Gromacs 2022.3 2021.6, 2020.7, 2019.6
<     # Plumed 2.8.0 needs Gromacs        2021.4, 2020.6, 2019.6
<     # Plumed 2.7.6 needs Gromacs        2021.5, 2020.6, 2019.6
<     # Plumed 2.7.5 needs Gromacs        2021.5, 2020.6, 2019.6
<     # Plumed 2.7.4 needs Gromacs        2021.4, 2020.6, 2019.6
<     # Plumed 2.7.3 needs Gromacs        2021.4, 2020.6, 2019.6
<     # Plumed 2.7.2 needs Gromacs        2021,   2020.6, 2019.6
<     # Plumed 2.7.1 needs Gromacs        2021,   2020.5, 2019.6
<     # Plumed 2.7.0 needs Gromacs                2020.4, 2019.6
<     # Plumed 2.6.6 needs Gromacs                2020.4, 2019.6, 2018.8
<     # Plumed 2.6.5 needs Gromacs                2020.4, 2019.6, 2018.8
<     # Plumed 2.6.4 needs Gromacs                2020.4, 2019.6, 2018.8
<     # Plumed 2.6.3 needs Gromacs                2020.4, 2019.6, 2018.8
<     # Plumed 2.6.2 needs Gromacs                2020.4, 2019.6, 2018.8
<     # Plumed 2.6.1 needs Gromacs                2020.2, 2019.6, 2018.8
<     # Plumed 2.6.0 needs Gromacs                        2019.4, 2018.8
<     # Plumed 2.5.7 needs Gromacs                        2019.4, 2018.8, 2016.6
<     # Plumed 2.5.6 needs Gromacs                        2019.4, 2018.8, 2016.6
<     # Plumed 2.5.5 needs Gromacs                        2019.4, 2018.8, 2016.6
<     # Plumed 2.5.4 needs Gromacs                        2019.4, 2018.8, 2016.6
<     # Plumed 2.5.3 needs Gromacs                        2019.4, 2018.8, 2016.6
<     # Plumed 2.5.2 needs Gromacs                        2019.2, 2018.6, 2016.6
<     # Plumed 2.5.1 needs Gromacs                                2018.6, 2016.6
<     # Plumed 2.5.0 needs Gromacs                                2018.4, 2016.5
---
>     # Plumed 2.9.0 needs Gromacs 2023,  2022.5, 2021.7, 2020.7
>     # Plumed 2.8.3 needs Gromacs        2022.5, 2021.7, 2020.7, 2019.6
>     # Plumed 2.8.2 needs Gromacs        2022.5, 2021.7, 2020.7, 2019.6
>     # Plumed 2.8.1 needs Gromacs        2022.3, 2021.6, 2020.7, 2019.6
>     # Plumed 2.8.0 needs Gromacs                2021.4, 2020.6, 2019.6
>     # Plumed 2.7.6 needs Gromacs                2021.5, 2020.6, 2019.6
>     # Plumed 2.7.5 needs Gromacs                2021.5, 2020.6, 2019.6
>     # Plumed 2.7.4 needs Gromacs                2021.4, 2020.6, 2019.6
>     # Plumed 2.7.3 needs Gromacs                2021.4, 2020.6, 2019.6
>     # Plumed 2.7.2 needs Gromacs                2021,   2020.6, 2019.6
>     # Plumed 2.7.1 needs Gromacs                2021,   2020.5, 2019.6
>     # Plumed 2.7.0 needs Gromacs                        2020.4, 2019.6
>     # Plumed 2.6.6 needs Gromacs                        2020.4, 2019.6, 2018.8
>     # Plumed 2.6.5 needs Gromacs                        2020.4, 2019.6, 2018.8
>     # Plumed 2.6.4 needs Gromacs                        2020.4, 2019.6, 2018.8
>     # Plumed 2.6.3 needs Gromacs                        2020.4, 2019.6, 2018.8
>     # Plumed 2.6.2 needs Gromacs                        2020.4, 2019.6, 2018.8
>     # Plumed 2.6.1 needs Gromacs                        2020.2, 2019.6, 2018.8
>     # Plumed 2.6.0 needs Gromacs                                2019.4, 2018.8
>     # Plumed 2.5.7 needs Gromacs                                2019.4, 2018.8, 2016.6
>     # Plumed 2.5.6 needs Gromacs                                2019.4, 2018.8, 2016.6
>     # Plumed 2.5.5 needs Gromacs                                2019.4, 2018.8, 2016.6
>     # Plumed 2.5.4 needs Gromacs                                2019.4, 2018.8, 2016.6
>     # Plumed 2.5.3 needs Gromacs                                2019.4, 2018.8, 2016.6
>     # Plumed 2.5.2 needs Gromacs                                2019.2, 2018.6, 2016.6
>     # Plumed 2.5.1 needs Gromacs                                        2018.6, 2016.6
>     # Plumed 2.5.0 needs Gromacs                                        2018.4, 2016.5
205c232
<     # https://github.com/plumed/plumed2/tree/v2.7.1/patches
---
>     # https://github.com/plumed/plumed2/tree/v2.9.0/patches
206a234,238
> 
>     # Versions without minor release number, such as `2023` and `2021`,
>     # require exact specifcation using `@=`, starting from Spack v0.20.0,
>     # see https://github.com/spack/spack/releases/tag/v0.20.0
> 
208,209c240,241
<         "2023": "2.9.0",
<         "2022.5": "2.8.2",
---
>         "=2023": "2.9.0",
>         "2022.5": "2.8.2:2.9.0",
211c243
<         "2021.7": "2.8.2",
---
>         "2021.7": "2.8.2:2.9.0",
215,216c247,248
<         "2021": "2.7.1:2.7.2",
<         "2020.7": "2.8.1:2.8.2",
---
>         "=2021": "2.7.1:2.7.2",
>         "2020.7": "2.8.1:2.9.0",
221c253
<         "2019.6": "2.6.1:2.8.2",
---
>         "2019.6": "2.6.1:2.8.3",
257a290,291
>     depends_on("pkgconfig", type="build")
> 
260,261c294,295
<     depends_on("lapack", when="+lapack")
<     depends_on("blas", when="+blas")
---
>     depends_on("lapack")
>     depends_on("blas")
269d302
<     depends_on("dbcsr", when="+cp2k")
271a305
>     depends_on("heffte", when="+heffte")
273,279c307,318
<     # requires(
<     #     "%intel",
<     #     "%oneapi",
<     #     policy="one_of",
<     #     when="+intel_provided_gcc",
<     #     msg="Only attempt to find gcc libs for Intel compiler if Intel compiler is used.",
<     # )
---
>     requires(
>         "%intel",
>         "%oneapi",
>         policy="one_of",
>         when="+intel_provided_gcc",
>         msg="Only attempt to find gcc libs for Intel compiler if Intel compiler is used.",
>     )
> 
>     # If the Intel suite is used for Lapack, it must be used for fftw and vice-versa
>     for _intel_pkg in INTEL_MATH_LIBRARIES:
>         requires(f"^[virtuals=fftw-api] {_intel_pkg}", when=f"^[virtuals=lapack]   {_intel_pkg}")
>         requires(f"^[virtuals=lapack]   {_intel_pkg}", when=f"^[virtuals=fftw-api] {_intel_pkg}")
282a322,327
>     # 2021.2 will always try to build tests (see https://gromacs.bioexcel.eu/t/compilation-failure-for-gromacs-2021-1-and-2021-2-with-cmake-3-20-2/2129)
>     patch(
>         "https://gitlab.com/gromacs/gromacs/-/commit/10262892e11a87fda0f59e633c89ed5ab1100509.diff",
>         sha256="2c30d00404b76421c13866cc42afa5e63276f7926c862838751b158df8727b1b",
>         when="@2021.1:2021.2",
>     )
504,518c549,555
<         if "+lapack" in self.spec:
<             options.append("-DGMX_EXTERNAL_LAPACK:BOOL=ON")
<             if self.spec["lapack"].libs:
<                 options.append(
<                     "-DGMX_LAPACK_USER={0}".format(self.spec["lapack"].libs.joined(";"))
<                 )
<         else:
<             options.append("-DGMX_EXTERNAL_LAPACK:BOOL=OFF")
< 
<         if "+blas" in self.spec:
<             options.append("-DGMX_EXTERNAL_BLAS:BOOL=ON")
<             if self.spec["blas"].libs:
<                 options.append("-DGMX_BLAS_USER={0}".format(self.spec["blas"].libs.joined(";")))
<         else:
<             options.append("-DGMX_EXTERNAL_BLAS:BOOL=OFF")
---
>         options.append("-DGMX_EXTERNAL_LAPACK:BOOL=ON")
>         if self.spec["lapack"].libs:
>             options.append("-DGMX_LAPACK_USER={0}".format(self.spec["lapack"].libs.joined(";")))
> 
>         options.append("-DGMX_EXTERNAL_BLAS:BOOL=ON")
>         if self.spec["blas"].libs:
>             options.append("-DGMX_BLAS_USER={0}".format(self.spec["blas"].libs.joined(";")))
530a568,580
>         if "+heffte" in self.spec:
>             options.append("-DGMX_USE_HEFFTE=on")
>             options.append(f'-DHeffte_ROOT={self.spec["heffte"].prefix}')
> 
>         if "+intel-data-center-gpu-max" in self.spec:
>             options.append("-DGMX_GPU_NB_CLUSTER_SIZE=8")
>             options.append("-DGMX_GPU_NB_NUM_CLUSTER_PER_CELL_X=1")
> 
>         if "~nblib" in self.spec:
>             options.append("-DGMX_INSTALL_NBLIB_API=OFF")
>         if "~gmxapi" in self.spec:
>             options.append("-DGMXAPI=OFF")
> 
533c583,586
<         if target >= "zen2":
---
>         if target >= "zen4":
>             # AMD Family 17h (EPYC Genoa)
>             options.append("-DGMX_SIMD=AVX_512")
>         elif target >= "zen2":
611c664
<         if "^mkl" in self.spec:
---
>         if self.spec["lapack"].name in INTEL_MATH_LIBRARIES:
615c668
<             if not self.spec["mkl"].satisfies("@2023:"):
---
>             if self.spec.satisfies("@:2022"):
###### DIFF hdf
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5c5
< #PAWSEY Additions to handle cce compiler in flag_handler
---
> 
27a28,31
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
>     depends_on("fortran", type="build")  # generated
> 
135c139
<             if "+external-xdr" in self.spec and self.spec["rpc"].name != "libc":
---
>             if "+external-xdr" in self.spec and self.spec["rpc"].name == "libtirpc":
149c153,157
<             if self.spec.satisfies("@:4.2.15 %apple-clang") or self.spec.satisfies("%clang@16:") or self.spec.satisfies("%cce"):
---
>             if (
>                 self.spec.satisfies("@:4.2.15 %apple-clang")
>                 or self.spec.satisfies("%clang@16:")
>                 or self.spec.satisfies("%oneapi")
>             ):
152c160
<             if self.spec.satisfies("%clang@16:") or self.spec.satisfies("%cce"):
---
>             if self.spec.satisfies("%clang@16:") or self.spec.satisfies("%apple-clang@15:"):
177c185
<         elif self.spec["rpc"].name != "libc":
---
>         elif self.spec["rpc"].name == "libtirpc":
213c221
<         self.cache_extra_test_sources(self.extra_install_tests)
---
>         cache_extra_test_sources(self, self.extra_install_tests)
###### DIFF healpix-cxx
1c1
< # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,22c5
< # Differences for the 'healpix-cxx' package
< # 6c6
< # < from spack.package import *
< # ---
< # > from spack import *
< # 20d19
< # <     patch('cfitsio_version_check.patch', when="@3.50:")
< # 21a21,29
< # >     def patch(self):
< # >         spec = self.spec
< # >         configure_fix = FileFilter('configure')
< # >         # Link libsharp static libs
< # >         configure_fix.filter(
< # >             r'^SHARP_LIBS=.*$',
< # >             'SHARP_LIBS="-L{0} -lsharp -lc_utils -lfftpack -lm"'
< # >             .format(spec['libsharp'].prefix.lib)
< # >         )
< # Contribute patch
---
> 
31c14,16
<     url      = "https://ayera.dl.sourceforge.net/project/healpix/Healpix_3.50/healpix_cxx-3.50.0.tar.gz"
---
>     url = "https://ayera.dl.sourceforge.net/project/healpix/Healpix_3.50/healpix_cxx-3.50.0.tar.gz"
> 
>     license("GPL-2.0-or-later")
33c18
<     version('3.50.0', sha256='6538ee160423e8a0c0f92cf2b2001e1a2afd9567d026a86ff6e2287c1580cb4c')
---
>     version("3.50.0", sha256="6538ee160423e8a0c0f92cf2b2001e1a2afd9567d026a86ff6e2287c1580cb4c")
35,37c20,21
<     depends_on('cfitsio')
<     depends_on('libsharp', type='build')
<     patch('cfitsio_version_check.patch', when="@3.50:")
---
>     depends_on("cfitsio")
>     depends_on("libsharp", type="build")
38a23,32
>     def patch(self):
>         spec = self.spec
>         configure_fix = FileFilter("configure")
>         # Link libsharp static libs
>         configure_fix.filter(
>             r"^SHARP_LIBS=.*$",
>             'SHARP_LIBS="-L{0} -lsharp -lc_utils -lfftpack -lm"'.format(
>                 spec["libsharp"].prefix.lib
>             ),
>         )
###### DIFF hyperbeam
###### DIFF idg
1c1
< # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5c5
< # Contribute back the recipe
---
> 
9c9
< class Idg(CMakePackage, CudaPackage):
---
> class Idg(CMakePackage):
11,12c11,12
<     Image Domain Gridding (IDG) is a fast method for convolutional resampling (gridding/degridding) 
<     of radio astronomical data (visibilities). Direction-dependent effects (DDEs) 
---
>     Image Domain Gridding (IDG) is a fast method for convolutional resampling (gridding/degridding)
>     of radio astronomical data (visibilities). Direction-dependent effects (DDEs)
17c17,29
<     git      = "https://gitlab.com/astron-idg/idg.git"
---
>     git = "https://git.astron.nl/RD/idg.git"
>     url = "https://git.astron.nl/RD/idg/-/archive/1.2.0/idg-1.2.0.tar.gz"
> 
>     maintainers("pelahi")
> 
>     license("GPL-3.0-or-later")
> 
>     version("1.2.0", commit="ccf8951283c12547326800adae99440c70177449")
>     version("1.0.0", commit="3322756fb8b6e3bb1fe5293f3e07e40623ff8486")
>     version("0.8.1", commit="a09f3c85094c592f9304fff4c31e920c7592c3c3")
> 
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
19,34c31,33
<     version("1.2.0", tag="1.2.0")
<     version("1.1.0", tag="1.1.0")
<     version("1.0.0", tag="1.0.0")
<     version("0.7", tag="0.7")
< 
<     depends_on('boost')
<     depends_on('fftw-api@3')
<     depends_on('blas')
< 
< 
<     def cmake_args(self):
<         args = []
<         if '+cuda' in self.spec:
<             args.append("-DBUILD_LIB_CUDA=ON")
<             args.append(f"-DCUDA_ROOT_DIR={self.spec['cuda'].prefix}")
<         return args
---
>     depends_on("boost")
>     depends_on("fftw-api@3")
>     depends_on("blas")
###### DIFF kokkos
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5d4
< #Pawsey additions to handle ROCM paths
8c7
< from llnl.util import lang, tty
---
> import llnl.util.lang as lang
13d11
< 
26c24,26
<     maintainers("janciesko", "crtrott")
---
>     maintainers("cedricchevalier19", "nmm0", "lucbv")
> 
>     license("Apache-2.0 WITH LLVM-exception")
29a30,33
>     version("4.3.01", sha256="5998b7c732664d6b5e219ccc445cd3077f0e3968b4be480c29cd194b4f45ec70")
>     version("4.3.00", sha256="53cf30d3b44dade51d48efefdaee7a6cf109a091b702a443a2eda63992e5fe0d")
>     version("4.2.01", sha256="cbabbabba021d00923fb357d2e1b905dda3838bd03c885a6752062fe03c67964")
>     version("4.2.00", sha256="ac08765848a0a6ac584a0a46cd12803f66dd2a2c2db99bb17c06ffc589bf5be8")
48a53,54
>     depends_on("cxx", type="build")  # Kokkos requires a C++ compiler
> 
49a56
>     conflicts("cmake@3.28", when="@:4.2.01 +cuda")
65d71
<     conflicts("@:3.5 +sycl", when="%dpcpp@2022:")
159a166,167
>         "gfx940": "amd_gfx940",
>         "gfx942": "amd_gfx942",
193a202,203
>     depends_on("intel-oneapi-dpl", when="+sycl")
>     depends_on("rocthrust", when="@4.3: +rocm")
238a249,255
>     patch("sycl_bhalft_test.patch", when="@4.2.00 +sycl")
>     # adds amd_gfx940 support to Kokkos 4.2.00 (upstreamed in https://github.com/kokkos/kokkos/pull/6671)
>     patch(
>         "https://github.com/rbberger/kokkos/commit/293319c5844f4d8eea51eb9cd1457115a5016d3f.patch?full_index=1",
>         sha256="145619e87dbf26b66ea23e76906576e2a854a3b09f2a2dd70363e61419fa6a6e",
>         when="@4.2.00",
>     )
338a356
>             options.append(self.define("Kokkos_ENABLE_ROCTHRUST", True))
346a365,375
>         # Kokkos 4.2.00+ changed the default to Kokkos_ENABLE_IMPL_CUDA_MALLOC_ASYNC=on
>         # which breaks GPU-aware with Cray-MPICH
>         # See https://github.com/kokkos/kokkos/pull/6402
>         # TODO: disable this once Cray-MPICH is fixed
>         if (
>             self.spec.satisfies("@4.2.00:")
>             and "mpi" in self.spec
>             and self.spec["mpi"].name == "cray-mpich"
>         ):
>             options.append(self.define("Kokkos_ENABLE_IMPL_CUDA_MALLOC_ASYNC", False))
> 
352,365d380
<     # TODO: Replace this method and its 'get' use for cmake path with
<     #   join_path(self.spec['cmake'].prefix.bin, 'cmake') once stand-alone
<     #   tests can access build dependencies through self.spec['cmake'].
<     def cmake_bin(self, set=True):
<         """(Hack) Set/get cmake dependency path."""
<         filepath = join_path(self.install_test_root, "cmake_bin_path.txt")
<         if set:
<             with open(filepath, "w") as out_file:
<                 cmake_bin = join_path(self.spec["cmake"].prefix.bin, "cmake")
<                 out_file.write("{0}\n".format(cmake_bin))
<         elif os.path.isfile(filepath):
<             with open(filepath, "r") as in_file:
<                 return in_file.read().strip()
< 
378c393
<                 join_path(self.install_test_root, cmake_out_path)
---
>                 join_path(install_test_root(self), cmake_out_path)
383,394c398
<         self.cache_extra_test_sources(cmake_out_path)
<         self.cmake_bin(set=True)
< 
<     def build_tests(self, cmake_path):
<         """Build test."""
<         cmake_bin = self.cmake_bin(set=False)
< 
<         if not cmake_bin:
<             tty.msg("Skipping kokkos test: cmake_bin_path.txt not found")
<             return
< 
<         cmake_args = [cmake_path, "-DEXECUTABLE_OUTPUT_PATH=" + cmake_path]
---
>         cache_extra_test_sources(self, cmake_out_path)
396,411c400,401
<         if not self.run_test(cmake_bin, options=cmake_args, purpose="Generate the Makefile"):
<             tty.warn("Skipping kokkos test: failed to generate Makefile")
<             return
< 
<         if not self.run_test("make", purpose="Build test software"):
<             tty.warn("Skipping kokkos test: failed to build test")
< 
<     def run_tests(self, cmake_path):
<         """Run test."""
<         if not self.run_test(
<             "make", options=[cmake_path, "test"], purpose="Checking ability to execute."
<         ):
<             tty.warn("Failed to run kokkos test")
< 
<     def test(self):
<         # Skip if unsupported version
---
>     def test_run(self):
>         """Test if kokkos builds and runs"""
417,418c407,410
<             tty.warn("Skipping smoke tests: {0} is missing".format(cmake_path))
<             return
---
>             raise SkipTest(f"{cmake_path} is missing")
> 
>         cmake = self.spec["cmake"].command
>         cmake(cmake_path, "-DEXECUTABLE_OUTPUT_PATH=" + cmake_path)
420,421c412,414
<         self.build_tests(cmake_path)
<         self.run_tests(cmake_path)
---
>         make = which("make")
>         make()
>         make(cmake_path, "test")
432c425
<             "hsa-rocr-dev": rocm_prefix.hsa,                
---
>             "hsa-rocr-dev": rocm_prefix.hsa,
459c452
<             )            
---
>             )
468c461
<             self.set_variables(env)            
---
>             self.set_variables(env)
###### DIFF lammps
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,10d4
< 
< # PAWSEY MODIFICATIONS
< # added 20230802.3 version
< # Had to comment all versions except the last one vecause of weird conflicts due to maybe the older version of spack we are using
< # Had to add a ROCM LLVM LIB path to the LD_LIBRARY_PATH as it is not added by the compiler in the RPATH somehow.
< 
12,13c6
< 
< import archspec
---
> import os
18c11
< class Lammps(CMakePackage, CudaPackage, ROCmPackage):
---
> class Lammps(CMakePackage, CudaPackage, ROCmPackage, PythonExtension):
29c22,24
<     # maintainers("rbberger")
---
>     maintainers("rbberger")
> 
>     license("GPL-2.0-only")
36a32,42
>     version("20240627", sha256="2174a99d266279823a8c57629ee1c21ec357816aefd85f964d9f859fe9222aa5")
>     version("20240417", sha256="158b288725c251fd8b30dbcf61749e0d6a042807da92af865a7d3c413efdd8ea")
>     version(
>         "20240207.1", sha256="3ba62c2a1ed463fceedf313a1c3ea2997994aa102379a8d35b525ea424f56776"
>     )
>     version(
>         "20240207",
>         sha256="d518f32de4eb2681f2543be63926411e72072dd7d67c1670c090b5baabed98ac",
>         deprecated=True,
>     )
>     version("20231121", sha256="704d8a990874a425bcdfe0245faf13d712231ba23f014a3ebc27bc14398856f1")
39c45
<         sha256="2713cd876b2e590725ab4c2b6506313cae9538e6f34c251ebc3215376fb60f98",
---
>         sha256="6666e28cb90d3ff01cbbda6c81bdb85cf436bbb41604a87f2ab2fa559caa8510",
42a49,58
>         "20230802.2",
>         sha256="3bcecabc9cad08d0a4e4d989b52d29c58505f7ead8ebacf43c9db8d9fd3d564a",
>         deprecated=True,
>     )
>     version(
>         "20230802.1",
>         sha256="0e5568485e5ee080412dba44a1b7a93f864f1b5c75121f11d528854269953ed0",
>         deprecated=True,
>     )
>     version(
44a61,369
>         deprecated=True,
>     )
>     version(
>         "20230615",
>         sha256="8470ed7b26ccd3728f4b44a7f1c520f1af23a648af685fd30b42b840fdfae2ff",
>         deprecated=True,
>     )
>     version(
>         "20230328",
>         sha256="14f5a5c37e4b46466e90d8b35476800e66acee74999f7358f4c12dfe662bfd99",
>         deprecated=True,
>     )
>     version(
>         "20230208",
>         sha256="60221242145da4479e5b207d9a0eed90af4168d7a297b4dc8c0e7f2b3215602e",
>         deprecated=True,
>     )
>     version(
>         "20221222",
>         sha256="75372ee7ef982767fc4ed4dc95e20ddca8247419adeb0c1276c40e43d1eab955",
>         deprecated=True,
>     )
>     version(
>         "20221103",
>         sha256="d28517b84b157d4e46a1a64ed787b4662d8f2f5ade3f5a04bb0caed068f32f7e",
>         deprecated=True,
>     )
>     version(
>         "20220915",
>         sha256="392b8d35fc7919b0efaf8b389259a9b795a817e58e75e380467c63d03a0dab75",
>         deprecated=True,
>     )
>     version(
>         "20220803",
>         sha256="f37cb0b35c1682ffceae5826aadce47278aa7003099a1655fcea43acd7d37926",
>         deprecated=True,
>     )
>     version(
>         "20220623.4", sha256="42541b4dbd0d339d16ddb377e76d192bc3d1d5712fdf9e2cdc838fc980d0a0cf"
>     )
>     version(
>         "20220623.3",
>         sha256="8a276a01b50d37eecfe6eb36f420f354cde51936d20aca7944dea60d3c098c89",
>         deprecated=True,
>     )
>     version(
>         "20220623.2",
>         sha256="8a560213e83919623525c4a7c4b5f0eda35cdf3b0c0e6548fd891379e04ca9e6",
>         deprecated=True,
>     )
>     version(
>         "20220623.1",
>         sha256="58e3b2b984f8935bb0db5631e143be2826c45ffd48844f7c394f36624a3e17a2",
>         deprecated=True,
>     )
>     version(
>         "20220623",
>         sha256="d27ede095c9f00cd13a26f967a723d07cf8f4df65c700ed73573577bc173d5ce",
>         deprecated=True,
>     )
>     version(
>         "20220602",
>         sha256="3e8f54453e53b3b387a68317277f832b8cf64a981e64b21e98bb37ea36ac4a60",
>         deprecated=True,
>     )
>     version(
>         "20220504",
>         sha256="fe05bae8090fd0177b3c1b987cd32a9cb7cd05d790828ba954c764eb52e10b52",
>         deprecated=True,
>     )
>     version(
>         "20220324",
>         sha256="d791cc93eedfc345fdf87bfa5b6f7e17e461f86ba197f9e9c3d477ce8657a7ef",
>         deprecated=True,
>     )
>     version(
>         "20220217",
>         sha256="e5bd2bf325835fa98d1b95f0667c83076580916027df5b8109d5470d1b97da98",
>         deprecated=True,
>     )
>     version(
>         "20220107",
>         sha256="fbf6c6814968ae0d772d7b6783079ff4f249a8faeceb39992c344969e9f1edbb",
>         deprecated=True,
>     )
>     version(
>         "20211214",
>         sha256="9f7b1ee2394678c1a6baa2c158a62345680a952eee251783e3c246b3f12db4c9",
>         deprecated=True,
>     )
>     version(
>         "20211027",
>         sha256="c06f682fcf9d5921ca90c857a104e90fba0fe65decaac9732745e4da49281938",
>         deprecated=True,
>     )
>     version(
>         "20210929.3", sha256="e4c274f0dc5fdedc43f2b365156653d1105197a116ff2bafe893523cdb22532e"
>     )
>     version(
>         "20210929.2",
>         sha256="9318ca816cde16a9a4174bf22a1966f5f2155cb32c0ad5a6757633276411fb36",
>         deprecated=True,
>     )
>     version(
>         "20210929.1",
>         sha256="5000b422c9c245b92df63507de5aa2ea4af345ea1f00180167aaa084b711c27c",
>         deprecated=True,
>     )
>     version(
>         "20210929",
>         sha256="2dff656cb21fd9a6d46c818741c99d400cfb1b12102604844663b655fb2f893d",
>         deprecated=True,
>     )
>     version(
>         "20210920",
>         sha256="e3eba96933c1dd3177143c7ac837cae69faceba196948fbad2970425db414d8c",
>         deprecated=True,
>     )
>     version(
>         "20210831",
>         sha256="532c42576a79d72682deaf43225ca773ed9f9e35deb484a82f91905b6cba23ec",
>         deprecated=True,
>     )
>     version(
>         "20210730",
>         sha256="c5e998c8282a835d2bcba4fceffe3cecdf9aed9bdf79fa9c945af573e632f6e7",
>         deprecated=True,
>     )
>     version(
>         "20210728",
>         sha256="6b844d2c3f7170a59d36fbf761483aa0c63d95eda254d00fe4d10542403abe36",
>         deprecated=True,
>     )
>     version(
>         "20210702",
>         sha256="4fdd8ca2dbde8809c0048716650b73ae1f840e22ebe24b25f6f7a499377fea57",
>         deprecated=True,
>     )
>     version(
>         "20210527",
>         sha256="f9f29970941f406d5c250de52a4cd07e5a4e44ae3b5ffed46edd019d998b8c33",
>         deprecated=True,
>     )
>     version(
>         "20210514",
>         sha256="74d9c4386f2181b15a024314c42b7a0b0aaefd3b4b947aeca00fe07e5b2f3317",
>         deprecated=True,
>     )
>     version(
>         "20210408",
>         sha256="1645147b7777de4f616b8232edf0b597868084f969c777fa0a757949c3f71f56",
>         deprecated=True,
>     )
>     version(
>         "20210310",
>         sha256="25708378dbeccf794bc5045aceb84380bf4a3ca03fc8e5d150a26ca88d371474",
>         deprecated=True,
>     )
>     version(
>         "20210210",
>         sha256="2c5ba2c7935ad559ca94ee826e8727e65b49ef4582eb856534fffba70e44101a",
>         deprecated=True,
>     )
>     version("20201029", sha256="759705e16c1fedd6aa6e07d028cc0c78d73c76b76736668420946a74050c3726")
>     version(
>         "20200721",
>         sha256="845bfeddb7b667799a1a5dbc166b397d714c3d2720316604a979d3465b4190a9",
>         deprecated=True,
>     )
>     version(
>         "20200630",
>         sha256="413cbfabcc1541a339c7a4ab5693fbeb768f46bb1250640ba94686c6e90922fc",
>         deprecated=True,
>     )
>     version(
>         "20200505",
>         sha256="c49d77fd602d28ebd8cf10f7359b9fc4d14668c72039028ed7792453d416de73",
>         deprecated=True,
>     )
>     version("20200303", sha256="a1a2e3e763ef5baecea258732518d75775639db26e60af1634ab385ed89224d1")
>     version(
>         "20200227",
>         sha256="1aabcf38bc72285797c710b648e906151a912c36b634a9c88ac383aacf85516e",
>         deprecated=True,
>     )
>     version(
>         "20200218",
>         sha256="73bcf146660804ced954f6a0a8dce937482677778d46018ca5a688127bf97211",
>         deprecated=True,
>     )
>     version(
>         "20200204",
>         sha256="3bf3de546ede34ffcd89f1fca5fd66aa78c662e7c8a76e30ce593e44a00d23ce",
>         deprecated=True,
>     )
>     version(
>         "20200124",
>         sha256="443829560d760690e1ae21ad54922f56f34f640a81e817f5cc65d2a4af3a6a5d",
>         deprecated=True,
>     )
>     version(
>         "20200109",
>         sha256="f2fd24f6c10837801f490913d73f672ec7c6becda08465d7e834a2bfbe3d7cd6",
>         deprecated=True,
>     )
>     version(
>         "20191120",
>         sha256="fd146bf517a6c2fb8a69ecb3749dc352eef94414739cd7855c668c690af85d27",
>         deprecated=True,
>     )
>     version(
>         "20191030",
>         sha256="5279567f731386ffdb87800b448903a63de2591064e13b4d5216acae25b7e541",
>         deprecated=True,
>     )
>     version(
>         "20190919",
>         sha256="0f693203afe86bc70c084c55f29330bdeea3e3ad6791f81c727f7a34a7f6caf3",
>         deprecated=True,
>     )
>     version(
>         "20190807",
>         sha256="895d71914057e070fdf0ae5ccf9d6552b932355056690bdb8e86d96549218cc0",
>         deprecated=True,
>     )
>     version(
>         "20190605",
>         sha256="c7b35090aef7b114d2b47a7298c1e8237dd811da87995c997bf7639cca743152",
>         deprecated=True,
>     )
>     version(
>         "20181212",
>         sha256="ccc5d2c21c4b62ce4afe7b3a0fe2f37b83e5a5e43819b7c2e2e255cce2ce0f24",
>         deprecated=True,
>     )
>     version(
>         "20181207",
>         sha256="d92104d008a7f1d0b6071011decc5c6dc8b936a3418b20bd34b055371302557f",
>         deprecated=True,
>     )
>     version(
>         "20181127",
>         sha256="c076b633eda5506f895de4c73103df8b995d9fec01be82c67c7608efcc345179",
>         deprecated=True,
>     )
>     version(
>         "20181115",
>         sha256="3bc9c166e465cac625c4a8e4060e597003f4619dadd57d3bc8d25bcd930f286e",
>         deprecated=True,
>     )
>     version(
>         "20181109",
>         sha256="dd30fe492fa147fb6f39bfcc79d8c786b9689f7fbe86d56de58cace53b6198c9",
>         deprecated=True,
>     )
>     version(
>         "20181024",
>         sha256="a171dff5aff7aaa2c9606ab2abc9260f2b685a5c7f6d650e7f2b59cf4aa149d6",
>         deprecated=True,
>     )
>     version(
>         "20181010",
>         sha256="bda762ee2d2dcefe0b4e36fb689c6b9f7ede49324444ccde6c59cba727b4b02d",
>         deprecated=True,
>     )
>     version(
>         "20180918",
>         sha256="02f143d518d8647b77137adc527faa9725c7afbc538d670253169e2a9b3fa0e6",
>         deprecated=True,
>     )
>     version(
>         "20180905",
>         sha256="ee0df649e33a9bf4fe62e062452978731548a56b7487e8e1ce9403676217958d",
>         deprecated=True,
>     )
>     version(
>         "20180831",
>         sha256="6c604b3ebd0cef1a5b18730d2c2eb1e659b2db65c5b1ae6240b8a0b150e4dff3",
>         deprecated=True,
>     )
>     version(
>         "20180822",
>         sha256="9f8942ca3f8e81377ae88ccfd075da4e27d0dd677526085e1a807777c8324074",
>         deprecated=True,
>     )
>     version(
>         "20180629",
>         sha256="1acf7d9b37b99f17563cd4c8bb00ec57bb2e29eb77c0603fd6871898de74763b",
>         deprecated=True,
>     )
>     version(
>         "20180316",
>         sha256="a81f88c93e417ecb87cd5f5464c9a2570384a48ff13764051c5e846c3d1258c1",
>         deprecated=True,
>     )
>     version(
>         "20180222",
>         sha256="374254d5131b7118b9ab0f0e27d20c3d13d96b03ed2b5224057f0c1065828694",
>         deprecated=True,
>     )
>     version(
>         "20170922",
>         sha256="f0bf6eb530d528f4d261d0a261e5616cbb6e990156808b721e73234e463849d3",
>         deprecated=True,
>     )
>     version(
>         "20170901",
>         sha256="5d88d4e92f4e0bb57c8ab30e0d20de556830af820223778b9967bec2184efd46",
>         deprecated=True,
46,354c371,380
<     #version(
<     #    "20230615",
<     #    sha256="8470ed7b26ccd3728f4b44a7f1c520f1af23a648af685fd30b42b840fdfae2ff",
<     #    
<     #)
<     #version(
<     #    "20230328",
<     #    sha256="14f5a5c37e4b46466e90d8b35476800e66acee74999f7358f4c12dfe662bfd99",
<     #    
<     #)
<     #version(
<     #    "20230208",
<     #    sha256="60221242145da4479e5b207d9a0eed90af4168d7a297b4dc8c0e7f2b3215602e",
<     #    
<     #)
<     #version(
<     #    "20221222",
<     #    sha256="75372ee7ef982767fc4ed4dc95e20ddca8247419adeb0c1276c40e43d1eab955",
<     #    
<     #)
<     #version(
<     #    "20221103",
<     #    sha256="d28517b84b157d4e46a1a64ed787b4662d8f2f5ade3f5a04bb0caed068f32f7e",
<     #    
<     #)
<     #version(
<     #    "20220915",
<     #    sha256="392b8d35fc7919b0efaf8b389259a9b795a817e58e75e380467c63d03a0dab75",
<     #    
<     #)
<     #version(
<     #    "20220803",
<     #    sha256="f37cb0b35c1682ffceae5826aadce47278aa7003099a1655fcea43acd7d37926",
<     #    
<     #)
<     ##version(
<     ##    "20220623.4", sha256="42541b4dbd0d339d16ddb377e76d192bc3d1d5712fdf9e2cdc838fc980d0a0cf",
<     ##    
<     ##)
<     #version(
<     #    "20220623.3",
<     #    sha256="8a276a01b50d37eecfe6eb36f420f354cde51936d20aca7944dea60d3c098c89",
<     #    
<     #)
<     #version(
<     #    "20220623.2",
<     #    sha256="8a560213e83919623525c4a7c4b5f0eda35cdf3b0c0e6548fd891379e04ca9e6",
<     #    
<     #)
<     #version(
<     #    "20220623.1",
<     #    sha256="58e3b2b984f8935bb0db5631e143be2826c45ffd48844f7c394f36624a3e17a2",
<     #    
<     #)
<     #version(
<     #    "20220623",
<     #    sha256="d27ede095c9f00cd13a26f967a723d07cf8f4df65c700ed73573577bc173d5ce",
<     #    
<     #)
<     #version(
<     #    "20220602",
<     #    sha256="3e8f54453e53b3b387a68317277f832b8cf64a981e64b21e98bb37ea36ac4a60",
<     #    
<     #)
<     #version(
<     #    "20220504",
<     #    sha256="fe05bae8090fd0177b3c1b987cd32a9cb7cd05d790828ba954c764eb52e10b52",
<     #    
<     #)
<     #version(
<     #    "20220324",
<     #    sha256="d791cc93eedfc345fdf87bfa5b6f7e17e461f86ba197f9e9c3d477ce8657a7ef",
<     #    
<     #)
<     #version(
<     #    "20220217",
<     #    sha256="e5bd2bf325835fa98d1b95f0667c83076580916027df5b8109d5470d1b97da98",
<     #    
<     #)
<     #version(
<     #    "20220107",
<     #    sha256="fbf6c6814968ae0d772d7b6783079ff4f249a8faeceb39992c344969e9f1edbb",
<     #    
<     #)
<     #version(
<     #    "20211214",
<     #    sha256="9f7b1ee2394678c1a6baa2c158a62345680a952eee251783e3c246b3f12db4c9",
<     #    
<     #)
<     #version(
<     #    "20211027",
<     #    sha256="c06f682fcf9d5921ca90c857a104e90fba0fe65decaac9732745e4da49281938",
<     #    
<     #)
<     #version(
<     #    "20210929.3", sha256="e4c274f0dc5fdedc43f2b365156653d1105197a116ff2bafe893523cdb22532e"
<     #)
<     #version(
<     #    "20210929.2",
<     #    sha256="9318ca816cde16a9a4174bf22a1966f5f2155cb32c0ad5a6757633276411fb36",
<     #    
<     #)
<     #version(
<     #    "20210929.1",
<     #    sha256="5000b422c9c245b92df63507de5aa2ea4af345ea1f00180167aaa084b711c27c",
<     #    
<     #)
<     #version(
<     #    "20210929",
<     #    sha256="2dff656cb21fd9a6d46c818741c99d400cfb1b12102604844663b655fb2f893d",
<     #    
<     #)
<     #version(
<     #    "20210920",
<     #    sha256="e3eba96933c1dd3177143c7ac837cae69faceba196948fbad2970425db414d8c",
<     #    
<     #)
<     #version(
<     #    "20210831",
<     #    sha256="532c42576a79d72682deaf43225ca773ed9f9e35deb484a82f91905b6cba23ec",
<     #    
<     #)
<     #version(
<     #    "20210730",
<     #    sha256="c5e998c8282a835d2bcba4fceffe3cecdf9aed9bdf79fa9c945af573e632f6e7",
<     #    
<     #)
<     #version(
<     #    "20210728",
<     #    sha256="6b844d2c3f7170a59d36fbf761483aa0c63d95eda254d00fe4d10542403abe36",
<     #    
<     #)
<     #version(
<     #    "20210702",
<     #    sha256="4fdd8ca2dbde8809c0048716650b73ae1f840e22ebe24b25f6f7a499377fea57",
<     #    
<     #)
<     #version(
<     #    "20210527",
<     #    sha256="f9f29970941f406d5c250de52a4cd07e5a4e44ae3b5ffed46edd019d998b8c33",
<     #    
<     #)
<     #version(
<     #    "20210514",
<     #    sha256="74d9c4386f2181b15a024314c42b7a0b0aaefd3b4b947aeca00fe07e5b2f3317",
<     #    
<     #)
<     #version(
<     #    "20210408",
<     #    sha256="1645147b7777de4f616b8232edf0b597868084f969c777fa0a757949c3f71f56",
<     #    
<     #)
<     #version(
<     #    "20210310",
<     #    sha256="25708378dbeccf794bc5045aceb84380bf4a3ca03fc8e5d150a26ca88d371474",
<     #    
<     #)
<     #version(
<     #    "20210210",
<     #    sha256="2c5ba2c7935ad559ca94ee826e8727e65b49ef4582eb856534fffba70e44101a",
<     #    
<     #)
<     #version("20201029", sha256="759705e16c1fedd6aa6e07d028cc0c78d73c76b76736668420946a74050c3726")
<     #version(
<     #    "20200721",
<     #    sha256="845bfeddb7b667799a1a5dbc166b397d714c3d2720316604a979d3465b4190a9",
<     #    
<     #)
<     #version(
<     #    "20200630",
<     #    sha256="413cbfabcc1541a339c7a4ab5693fbeb768f46bb1250640ba94686c6e90922fc",
<     #    
<     #)
<     #version(
<     #    "20200505",
<     #    sha256="c49d77fd602d28ebd8cf10f7359b9fc4d14668c72039028ed7792453d416de73",
<     #    
<     #)
<     #version("20200303", sha256="a1a2e3e763ef5baecea258732518d75775639db26e60af1634ab385ed89224d1")
<     #version(
<     #    "20200227",
<     #    sha256="1aabcf38bc72285797c710b648e906151a912c36b634a9c88ac383aacf85516e",
<     #    
<     #)
<     #version(
<     #    "20200218",
<     #    sha256="73bcf146660804ced954f6a0a8dce937482677778d46018ca5a688127bf97211",
<     #    
<     #)
<     #version(
<     #    "20200204",
<     #    sha256="3bf3de546ede34ffcd89f1fca5fd66aa78c662e7c8a76e30ce593e44a00d23ce",
<     #    
<     #)
<     #version(
<     #    "20200124",
<     #    sha256="443829560d760690e1ae21ad54922f56f34f640a81e817f5cc65d2a4af3a6a5d",
<     #    
<     #)
<     #version(
<     #    "20200109",
<     #    sha256="f2fd24f6c10837801f490913d73f672ec7c6becda08465d7e834a2bfbe3d7cd6",
<     #    
<     #)
<     #version(
<     #    "20191120",
<     #    sha256="fd146bf517a6c2fb8a69ecb3749dc352eef94414739cd7855c668c690af85d27",
<     #    
<     #)
<     #version(
<     #    "20191030",
<     #    sha256="5279567f731386ffdb87800b448903a63de2591064e13b4d5216acae25b7e541",
<     #    
<     #)
<     #version(
<     #    "20190919",
<     #    sha256="0f693203afe86bc70c084c55f29330bdeea3e3ad6791f81c727f7a34a7f6caf3",
<     #    
<     #)
<     #version(
<     #    "20190807",
<     #    sha256="895d71914057e070fdf0ae5ccf9d6552b932355056690bdb8e86d96549218cc0",
<     #    
<     #)
<     #version(
<     #    "20190605",
<     #    sha256="c7b35090aef7b114d2b47a7298c1e8237dd811da87995c997bf7639cca743152",
<     #    
<     #)
<     #version(
<     #    "20181212",
<     #    sha256="ccc5d2c21c4b62ce4afe7b3a0fe2f37b83e5a5e43819b7c2e2e255cce2ce0f24",
<     #    
<     #)
<     #version(
<     #    "20181207",
<     #    sha256="d92104d008a7f1d0b6071011decc5c6dc8b936a3418b20bd34b055371302557f",
<     #    
<     #)
<     #version(
<     #    "20181127",
<     #    sha256="c076b633eda5506f895de4c73103df8b995d9fec01be82c67c7608efcc345179",
<     #    
<     #)
<     #version(
<     #    "20181115",
<     #    sha256="3bc9c166e465cac625c4a8e4060e597003f4619dadd57d3bc8d25bcd930f286e",
<     #    
<     #)
<     #version(
<     #    "20181109",
<     #    sha256="dd30fe492fa147fb6f39bfcc79d8c786b9689f7fbe86d56de58cace53b6198c9",
<     #    
<     #)
<     #version(
<     #    "20181024",
<     #    sha256="a171dff5aff7aaa2c9606ab2abc9260f2b685a5c7f6d650e7f2b59cf4aa149d6",
<     #    
<     #)
<     #version(
<     #    "20181010",
<     #    sha256="bda762ee2d2dcefe0b4e36fb689c6b9f7ede49324444ccde6c59cba727b4b02d",
<     #    
<     #)
<     #version(
<     #    "20180918",
<     #    sha256="02f143d518d8647b77137adc527faa9725c7afbc538d670253169e2a9b3fa0e6",
<     #    
<     #)
<     #version(
<     #    "20180905",
<     #    sha256="ee0df649e33a9bf4fe62e062452978731548a56b7487e8e1ce9403676217958d",
<     #    
<     #)
<     #version(
<     #    "20180831",
<     #    sha256="6c604b3ebd0cef1a5b18730d2c2eb1e659b2db65c5b1ae6240b8a0b150e4dff3",
<     #    
<     #)
<     #version(
<     #    "20180822",
<     #    sha256="9f8942ca3f8e81377ae88ccfd075da4e27d0dd677526085e1a807777c8324074",
<     #    
<     #)
<     #version(
<     #    "20180629",
<     #    sha256="1acf7d9b37b99f17563cd4c8bb00ec57bb2e29eb77c0603fd6871898de74763b",
<     #    
<     #)
<     #version(
<     #    "20180316",
<     #    sha256="a81f88c93e417ecb87cd5f5464c9a2570384a48ff13764051c5e846c3d1258c1",
<     #    
<     #)
<     #version(
<     #    "20180222",
<     #    sha256="374254d5131b7118b9ab0f0e27d20c3d13d96b03ed2b5224057f0c1065828694",
<     #    
<     #)
<     #version(
<     #    "20170922",
<     #    sha256="f0bf6eb530d528f4d261d0a261e5616cbb6e990156808b721e73234e463849d3",
<     #    
<     #)
<     #version(
<     #    "20170901",
<     #    sha256="5d88d4e92f4e0bb57c8ab30e0d20de556830af820223778b9967bec2184efd46",
<     #    
<     #)
---
> 
>     depends_on("cxx", type="build")
> 
>     # mdi, scafacos, ml-quip, qmmm require C, but not available in Spack
>     for c_pkg in ("adios", "atc", "awpmd", "ml-pod", "electrode", "kim", "h5md", "tools"):
>         depends_on("c", type="build", when=f"+{c_pkg}")
> 
>     # scafacos, ml-quip require Fortran, but not available in Spack
>     for fc_pkg in ("kim",):
>         depends_on("fortran", type="build", when=f"+{fc_pkg}")
356a383,385
>         "20230802.3",
>         "20230802.2",
>         "20230802.1",
446a476
>         "ml-uf3": {"when": "@20240627:"},
451c481
<         "mpiio": {},
---
>         "mpiio": {"when": "@:20230802.1"},
544c574,579
<     variant("exceptions", default=False, description="Build with lammps exceptions")
---
>     variant(
>         "exceptions",
>         default=False,
>         description="Build with lammps exceptions",
>         when="@:20230802.1",
>     )
575a611
>     variant("tools", default=False, description="Build LAMMPS tools (msi2lmp, binary2txt, chain)")
576a613
>     depends_on("cmake@3.16:", when="@20231121:")
609a647,648
>     depends_on("kokkos@4.3.00:", when="@20240417: +kokkos")
>     depends_on("kokkos@4.3.01:", when="@20240627: +kokkos")
616,623c655,666
<     depends_on("py-cython", when="+mliap+python")
<     depends_on("py-cython", when="+ml-iap+python")
<     depends_on("py-numpy", when="+python")
<     depends_on("py-mpi4py", when="+python+mpi")
<     depends_on("py-setuptools", when="@20220217:+python", type="build")
<     depends_on("n2p2@2.1.4:", when="+user-hdnnp")
<     depends_on("n2p2@2.1.4:", when="+ml-hdnnp")
<     depends_on("n2p2+shared", when="+lib ^n2p2")
---
>     depends_on("py-cython", when="+mliap+python", type="build")
>     depends_on("py-cython", when="+ml-iap+python", type="build")
>     depends_on("py-pip", when="+python", type="build")
>     depends_on("py-wheel", when="+python", type="build")
>     depends_on("py-build", when="+python", type="build")
>     depends_on("py-numpy", when="+python", type=("build", "run"))
>     depends_on("py-mpi4py", when="+python+mpi", type=("build", "run"))
>     depends_on("py-setuptools@42:", when="@20220217:+python", type=("build", "run"))
>     for _n2p2_cond in ("+user-hdnnp", "+ml-hdnnp"):
>         with when(_n2p2_cond):
>             depends_on("n2p2@2.1.4:")
>             depends_on("n2p2+shared", when="+lib")
627c670,671
<     depends_on("llvm-amdgpu +openmp", when="+rocm +openmp", type="build")
---
>     depends_on("llvm-amdgpu ", when="+rocm", type="build")
>     depends_on("rocm-openmp-extras", when="+rocm +openmp", type="build")
700,701c744,745
<         when="@:20230802",
<         msg="LAMMPS is incompatible with Kokkos 4.x until @20230802",
---
>         when="@:20230802.1",
>         msg="LAMMPS is incompatible with Kokkos 4.x until @20230802.1",
707c751,756
<     patch("intel-aocc.patch", when="@20220324:20221103 +intel %aocc")
---
> 
>     # This patch merged to LAMMPS trunk at 20221222 and backported to
>     # stable version 20220623.4. We still patch all other affected
>     # versions here
>     patch("intel-aocc.patch", when="@20220324:20220623.3,20220803:20221103 +intel %aocc")
> 
714a764,773
>     # Add large potential files
>     resource(
>         name="C_10_10.mesocnt",
>         url="https://download.lammps.org/potentials/C_10_10.mesocnt",
>         sha256="923f600a081d948eb8b4510f84aa96167b5a6c3e1aba16845d2364ae137dc346",
>         expand=False,
>         placement={"C_10_10.mesocnt": "potentials/C_10_10.mesocnt"},
>         when="+mesont",
>     )
> 
730a790
>             self.define_from_variant("BUILD_TOOLS", "tools"),
731a792
>             self.define("DOWNLOAD_POTENTIALS", False),
779,781c840
<         cmake_tune_flags = archspec.cpu.TARGETS[spec.target.name].optimization_flags(
<             spec.compiler.name, spec.compiler.version
<         )
---
>         cmake_tune_flags = spec.architecture.target.optimization_flags(spec.compiler)
800c859
<             elif "^mkl" in spec:
---
>             elif spec["fftw-api"].name in INTEL_MATH_LIBRARIES:
831a891,895
>             if "@:20231121" in spec:
>                 if "^hip@:5.4" in spec:
>                     args.append(self.define("HIP_PATH", f"{spec['hip'].prefix}/hip"))
>                 elif "^hip@5.5:" in spec:
>                     args.append(self.define("HIP_PATH", spec["hip"].prefix))
844,845c908,932
<             env.prepend_path("LD_LIBRARY_PATH", self.prefix.lib)
<             env.prepend_path("LD_LIBRARY_PATH", self.prefix.lib64)
---
>             if self.spec.platform == "darwin":
>                 env.prepend_path("DYLD_FALLBACK_LIBRARY_PATH", self.prefix.lib)
>                 env.prepend_path("DYLD_FALLBACK_LIBRARY_PATH", self.prefix.lib64)
>             else:
>                 env.prepend_path("LD_LIBRARY_PATH", self.prefix.lib)
>                 env.prepend_path("LD_LIBRARY_PATH", self.prefix.lib64)
>         if "+plugin" in self.spec:
>             env.prepend_path("LAMMPS_PLUGIN_PATH", self.prefix.lib.lammps.plugins)
>             env.prepend_path("LAMMPS_PLUGIN_PATH", self.prefix.lib64.lammps.plugins)
> 
>     @run_after("install")
>     def make_plugins_directories(self):
>         os.makedirs(self.prefix.lib.lammps.plugins, exist_ok=True)
>         os.makedirs(self.prefix.lib64.lammps.plugins, exist_ok=True)
> 
>     @run_after("install")
>     def install_python(self):
>         # do LAMMPS Python package installation using pip
>         if self.spec.satisfies("@20230328: +python"):
>             with working_dir("python"):
>                 os.environ["LAMMPS_VERSION_FILE"] = join_path(
>                     self.stage.source_path, "src", "version.h"
>                 )
>                 args = std_pip_args + ["--prefix=" + self.prefix, "."]
>                 pip(*args)
###### DIFF lapackpp
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5c5
< # Pawsey additions - added 2023.11.05 version
---
> 
12a13,14
>     ["master", "master"],
>     ["2024.05.31", "2024.05.31"],
35c37,45
<     version("2023.11.05", sha256="9a505ef4e76504b6714cc19eb1b58939694f9ab51427a5bb915b016d615570ca")
---
>     license("BSD-3-Clause")
> 
>     version("master", branch="master")
>     version(
>         "2024.05.31", sha256="093646d492a4c2c6b4d7001effb559c80da7fa31fd5ba517a6d686ca8c78cd99"
>     )
>     version(
>         "2023.11.05", sha256="9a505ef4e76504b6714cc19eb1b58939694f9ab51427a5bb915b016d615570ca"
>     )
59a70,71
> 
>     depends_on("cxx", type="build")  # generated
###### DIFF libffi
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5c5
< # Pawsey addtions - line 48 to handle cce compiler
---
> 
17a18,21
>     license("MIT")
> 
>     version("3.4.6", sha256="b0dea9df23c863a7a50e825440f3ebffabd65df1497108e5d437747843895a4e")
>     version("3.4.5", sha256="96fff4e589e3b239d888d9aa44b3ff30693c2ba1617f953925a70ddebcc102b2")
31a36,38
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
> 
34a42,46
>     patch(
>         "https://github.com/libffi/libffi/commit/ce077e5565366171aa1b4438749b0922fce887a4.patch?full_index=1",
>         sha256="070b1f3aa87f2b56f83aff38afc42157e1692bfaa580276ecdbad2048b818ed7",
>         when="@3.4.3:3.4.4",
>     )
47d58
<                 or self.spec.satisfies("%cce@16:")                
53c64
<         args = []
---
>         args = ["--with-pic"]
###### DIFF libxpm
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
6,7d5
< # using spack/0.19.0 recipe. spack/0.20.0 doesn't work on joey
< 
14c12
<     homepage = "https://cgit.freedesktop.org/xorg/lib/libXpm"
---
>     homepage = "https://gitlab.freedesktop.org/xorg/lib/libXpm"
16a15,23
>     license("X11")
> 
>     maintainers("wdconinc")
> 
>     version("3.5.17", sha256="959466c7dfcfcaa8a65055bfc311f74d4c43d9257900f85ab042604d286df0c6")
>     version("3.5.16", sha256="43a70e6f9b67215fb223ca270d83bdcb868c513948441d5b781ea0765df6bfb4")
>     version("3.5.15", sha256="2a9bd419e31270593e59e744136ee2375ae817322447928d2abb6225560776f9")
>     version("3.5.14", sha256="18861cc64dfffc0e7fe317b0eeb935adf64858fd5d82004894c4906d909dabf8")
>     version("3.5.13", sha256="e3dfb0fb8c1f127432f2a498c7856b37ce78a61e8da73f1aab165a73dd97ad00")
23a31,32
>     depends_on("c", type="build")
> 
27c36,37
<     depends_on("xproto")
---
>     depends_on("xproto", type="build")
>     depends_on("ncompress", when="@3.5.15")
31,41c41,44
< #    def flag_handler(self, name, flags):
< #        if name == "ldlibs" and "intl" in self.spec["gettext"].libs.names:
< #            flags.append("-lintl")
< #        return env_flags(name, flags)
< 
<     def setup_build_environment(self, env):
<         # If libxpm is installed as an external package, gettext won't
<         # be available in the spec. See
<         # https://github.com/spack/spack/issues/9149 for details.
<         if "gettext" in self.spec:
<             env.append_flags("LDFLAGS", "-L{0} -lintl".format(self.spec["gettext"].prefix.lib))    
---
>     def flag_handler(self, name, flags):
>         if name == "ldflags" and "intl" in self.spec["gettext"].libs.names:
>             flags.append("-lintl")
>         return env_flags(name, flags)
###### DIFF magma
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5d4
< # lines introduced to handle rocm-path
9d7
< from spack.util.prefix import Prefix
18c16
<     homepage = "https://icl.cs.utk.edu/magma/"
---
>     homepage = "https://icl.utk.edu/magma/"
20c18
<     url = "https://icl.cs.utk.edu/projectsfiles/magma/downloads/magma-2.2.0.tar.gz"
---
>     url = "https://icl.utk.edu/projectsfiles/magma/downloads/magma-2.2.0.tar.gz"
27a26
>     version("2.8.0", sha256="f4e5e75350743fe57f49b615247da2cc875e5193cc90c11b43554a7c82cc4348")
42a42,45
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
>     depends_on("fortran", type="build")  # generated
> 
51a55,70
>     # This ensures that rocm-core matches the hip package version in the case that
>     # hip is an external package.
>     for ver in [
>         "5.5.0",
>         "5.5.1",
>         "5.6.0",
>         "5.6.1",
>         "5.7.0",
>         "5.7.1",
>         "6.0.0",
>         "6.0.2",
>         "6.1.0",
>         "6.1.1",
>         "6.1.2",
>     ]:
>         depends_on(f"rocm-core@{ver}", when=f"@2.8.0: +rocm ^hip@{ver}")
68c87
<         conflicts("cuda_arch={}".format(target))
---
>         conflicts(f"cuda_arch={target}")
82a102
>     patch("0001-fix-magma-build-error-with-rocm-6.0.0.patch", when="@2.7.2 ^hip@6.0 + rocm")
100c120
<             gpu_target = " ".join("sm_{0}".format(i) for i in cuda_archs)
---
>             gpu_target = " ".join(f"sm_{i}" for i in cuda_archs)
106,107c126,127
<             inc.write("GPU_TARGET = {0}\n".format(gpu_target))
<             inc.write("BACKEND = {0}\n".format(backend))
---
>             inc.write(f"GPU_TARGET = {gpu_target}\n")
>             inc.write(f"BACKEND = {backend}\n")
138c158
<             capabilities = " ".join("sm{0}{1}".format(sep, i) for i in cuda_arch)
---
>             capabilities = " ".join(f"sm{sep}{i}" for i in cuda_arch)
151c171
<             # See https://github.com/ROCmSoftwarePlatform/rocFFT/issues/322
---
>             # See https://github.com/ROCm/rocFFT/issues/322
153a174,175
>             if spec.satisfies("@2.8.0:"):
>                 options.append(define("ROCM_CORE", spec["rocm-core"].prefix))
172c194
<         self.cache_extra_test_sources([self.test_src_dir])
---
>         cache_extra_test_sources(self, [self.test_src_dir])
174c196,197
<     def test(self):
---
>     def test_c(self):
>         """Run C examples"""
176,177c199,200
<         with working_dir(test_dir, create=False):
<             pkg_config_path = "{0}/lib/pkgconfig".format(self.prefix)
---
>         with working_dir(test_dir):
>             pkg_config_path = self.prefix.lib.pkgconfig
178a202
> 
180,188c204,215
<                 self.run_test("./example_sparse", purpose="MAGMA smoke test - sparse solver")
<                 self.run_test(
<                     "./example_sparse_operator", purpose="MAGMA smoke test - sparse operator"
<                 )
<                 self.run_test("./example_v1", purpose="MAGMA smoke test - legacy v1 interface")
<                 self.run_test("./example_v2", purpose="MAGMA smoke test - v2 interface")
<                 if "+fortran" in self.spec:
<                     make("fortran")
<                     self.run_test("./example_f", purpose="MAGMA smoke test - Fortran interface")
---
>                 tests = [
>                     ("example_sparse", "sparse solver"),
>                     ("example_sparse_operator", "sparse operator"),
>                     ("example_v1", "legacy v1 interface"),
>                     ("example_v2", "v2 interface"),
>                 ]
> 
>                 for test, desc in tests:
>                     with test_part(self, f"test_c_{test}", purpose=f"Run {desc} example"):
>                         exe = which(test)
>                         exe()
> 
191,236c218,230
<     def get_paths(self):
<         rocm_spec = self.spec["hip"]
<         rocm_prefix = Prefix(rocm_spec.prefix)
< 
<         paths = {
<             "hip-path": rocm_spec.prefix,
<             "rocm-path": rocm_spec.prefix,
<             "rocm-device-libs": rocm_spec.prefix, #rocm_prefix, #elf.spec["llvm-amdgpu"].prefix,
<             "llvm-amdgpu": rocm_prefix.llvm,
<             "hsa-rocr-dev": rocm_prefix.hsa,
<         }
<         paths["bitcode"] = paths["rocm-device-libs"].amdgcn.bitcode
< 
<         return paths
< 
<     def set_variables(self, env):
<         if self.spec.satisfies("+rocm"):
<             # Note: do not use self.spec[name] here, since not all dependencies
<             # have defined prefixes when hip is marked as external.
<             paths = self.get_paths()
< 
<             # Used in hipcc, but only useful when hip is external, since only then
<             # there is a common prefix /opt/rocm-x.y.z.
<             env.set("ROCM_PATH", paths["rocm-path"])
<             # Just the prefix of hip (used in hipcc)
<             env.set("HIP_PATH", paths["hip-path"])
<             env.set("HIP_DEVICE_LIB_PATH", paths["bitcode"])
<             env.set("HIP_CLANG_PATH", paths["llvm-amdgpu"].bin)
<             env.set("HSA_PATH", paths["hsa-rocr-dev"])
<             env.set("DEVICE_LIB_PATH", paths["bitcode"])
<             env.set("LLVM_PATH", paths["llvm-amdgpu"])
< 
<             env.append_path(
<                 "HIPCC_COMPILE_FLAGS_APPEND",
<                 "--rocm-path={0}".format(paths["rocm-path"]),
<                 separator=" ",
<             )
< 
< 
<     def setup_build_environment(self, env):
<         if self.spec.satisfies("+rocm"):        
<             self.set_variables(env)
< 
<     def setup_run_environment(self, env):
<         if self.spec.satisfies("+rocm"):
<             self.set_variables(env)    
---
>     def test_fortran(self):
>         """Run Fortran example"""
>         if "+fortran" not in self.spec:
>             raise SkipTest("Package must be installed with +fortran")
> 
>         test_dir = join_path(self.test_suite.current_test_cache_dir, self.test_src_dir)
>         with working_dir(test_dir):
>             pkg_config_path = self.prefix.lib.pkgconfig
>             with spack.util.environment.set_env(PKG_CONFIG_PATH=pkg_config_path):
>                 make("fortran")
>                 example_f = which("example_f")
>                 example_f()
>                 make("clean")
###### DIFF mctc-lib
1c1
< # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,6c5
< #
< # Pawsey addition: just grabbed the latest recipe from spack/develop
---
> 
17c16,18
<     maintainers = ["awvwgk"]
---
>     maintainers("awvwgk")
> 
>     license("Apache-2.0")
20,21c21,24
<     version("0.3.1", "a5032a0bbbbacc952037c5215b71aa6b438767a84bafb60fda25ba43c8835513")
<     version("0.3.0", "81f3edbf322e6e28e621730a796278498b84af0f221f785c537a315312059bf0")
---
>     version("0.3.1", sha256="a5032a0bbbbacc952037c5215b71aa6b438767a84bafb60fda25ba43c8835513")
>     version("0.3.0", sha256="81f3edbf322e6e28e621730a796278498b84af0f221f785c537a315312059bf0")
> 
>     depends_on("fortran", type="build")  # generated
30,32c33
<         return [
<             "-Djson={0}".format("enabled" if "+json" in self.spec else "disabled"),
<         ]
---
>         return ["-Djson={0}".format("enabled" if "+json" in self.spec else "disabled")]
###### DIFF mgard
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,8d4
< # to handle cray environment
< #             if self.spec.satisfies("@2020-10-01 %oneapi@2023:") or self.spec.satisfies("%cce"):
< #                flags.append("-Wno-error=c++11-narrowing")
< # is added
27c23,26
<     version("2023-03-31", commit="a8a04a86ff30f91d0b430a7c52960a12fa119589", preferred=True)
---
>     license("Apache-2.0")
> 
>     version("2023-12-09", commit="d61d8c06c49a72b2e582cc02de88b7b27e1275d2", preferred=True)
>     version("2023-03-31", commit="a8a04a86ff30f91d0b430a7c52960a12fa119589")
32a32,33
>     depends_on("cxx", type="build")  # generated
> 
50a52
>     depends_on("zlib@1.2.9:", when="^[virtuals=zlib-api] zlib")  # crc32_z
53c55
<     depends_on("protobuf@:3.21.12", when="@2022-11-18:")
---
>     depends_on("protobuf@3.4:", when="@2022-11-18:")
59a62,64
>     with when("+openmp"):
>         depends_on("llvm-openmp", when="%apple-clang")
> 
64a70,73
>     conflicts("protobuf@3.22:", when="target=ppc64le", msg="GCC 9.4 segfault in CI")
>     conflicts("protobuf@3.22:", when="+cuda target=aarch64:", msg="nvcc fails on ARM SIMD headers")
>     # https://github.com/abseil/abseil-cpp/issues/1629
>     conflicts("abseil-cpp@20240116.1", when="+cuda", msg="triggers nvcc parser bug")
68c77,79
<             if self.spec.satisfies("@2020-10-01 %oneapi@2023:") or self.spec.satisfies("%cce"):
---
>             if self.spec.satisfies("@2020-10-01 %oneapi@2023:"):
>                 flags.append("-Wno-error=c++11-narrowing")
>             if self.spec.satisfies("@2020-10-01 %apple-clang@15:"):
###### DIFF mwalib
###### DIFF namd
1c1
< # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,41d4
< # Differences for the 'namd' package
< # 12c12
< # < from spack.package import *
< # ---
< # > from spack import *
< # 31,32c31,32
< # <     variant('fftw', default='3', values=('none', '2', '3', 'mkl', 'amdfftw', 'cray'),
< # <             description='Enable the use of FFTW/FFTW3/MKL FFT/AMDFFTW/CRAY FFTW')
< # ---
< # >     variant('fftw', default='3', values=('none', '2', '3', 'mkl', 'amdfftw'),
< # >             description='Enable the use of FFTW/FFTW3/MKL FFT/AMDFFTW')
< # 37,38d36
< # <     variant('plumed', default=False, description='Enable PLUMED support')
< # < 
< # 44,45d41
< # <     patch('charmpp-shasta-2.14.patch', when='@2.14')
< # <     patch('lpython-2.14.patch.2')
< # 55d50
< # <     depends_on('cray-fftw', when="fftw=cray")
< # 64,66d58
< # <     depends_on('plumed@2.6:+mpi', when='@2.12:2.13+plumed')
< # <     depends_on('plumed@2.7:+mpi', when='@2.14+plumed')
< # < 
< # 216,219d207
< # <         elif fftw_version == 'cray':
< # <             self._copy_arch_file('fftw3')
< # <             opts.extend(['--with-fftw3',
< # <                          '--fftw-prefix', spec['cray-fftw'].prefix])
< # 257,259d244
< # <     def patch(self):
< # <         if '+plumed' in self.spec:
< # <             self.spec['plumed'].package.apply_patch(self, force=True)
< 
< # Contribute cray additions
< 
< # To install Namd with hip support use the following command:
< # spack install namd@2.15a2+rocm amdgpu_target=gfx90a  ^charmpp@7.0.0 backend=mpi ^ncurses@6.3+symlinks arch=linux-sles15-zen3
57,58c20,21
<     url      = "file://{0}/NAMD_2.14_Source.tar.gz".format(os.getcwd())
< #    git      = "https://charm.cs.illinois.edu/gerrit/namd.git"
---
>     url = "file://{0}/NAMD_2.12_Source.tar.gz".format(os.getcwd())
>     git = "https://charm.cs.illinois.edu/gerrit/namd.git"
59a23
>     redistribute(source=False, binary=False)
61,71c25
<     version("master", branch="master")
<     version('2.15a1', branch="master", tag='release-2-15-alpha-1')
<     version('2.15a2', sha256='b7ba66c0599254aec265470b477f5c51bf6fccedaeab810132b567cafbd854b7')
< #    version("2.15a2", md5="2431366620afa868468320777871ea5c")
<     version('2.14', sha256='34044d85d9b4ae61650ccdba5cda4794088c3a9075932392dd0752ef8c049235',
<             preferred=True)
<     version('2.13', '9e3323ed856e36e34d5c17a7b0341e38')
<     version('2.12', '2a1191909b1ab03bf0205971ad4d8ee9')
< 
<     variant('fftw', default='3', values=('none', '2', '3', 'mkl', 'amdfftw', 'cray'),
<             description='Enable the use of FFTW/FFTW3/MKL FFT/AMDFFTW/CRAY FFTW')
---
>     maintainers("jcphill")
73,74c27,76
<     variant('interface', default='none', values=('none', 'tcl', 'python'),
<             description='Enables TCL and/or python interface')
---
>     version("master", branch="master")
>     version("3.0", sha256="301c64f0f1db860f7336efdb26223ccf66b5ab42bfc9141df8d81ec1e20bf472")
>     version(
>         "3.0b7",
>         sha256="b18ff43b0f55ec59e137c62eba1812589dd88b2122c3a05ea652781667f438b4",
>         deprecated=True,
>     )
>     version(
>         "3.0b6",
>         sha256="8b5fb1dc8d5b5666c6a45d20ee7e8c9d1f5c186578e2cf148b68ba421d43b850",
>         deprecated=True,
>     )
>     version(
>         "3.0b3",
>         sha256="20c32b6161f9c376536e3cb97c3bfe5367e1baaaace3c716ff79831fc2eb8199",
>         deprecated=True,
>     )
>     version(
>         "2.15a2",
>         sha256="8748cbaa93fc480f92fc263d9323e55bce6623fc693dbfd4a40f59b92669713e",
>         deprecated=True,
>     )
>     version("2.15a1", branch="master", tag="release-2-15-alpha-1", deprecated=True)
>     # Same as above, but lets you use a local file instead of git
>     version(
>         "2.15a1.manual",
>         sha256="474006e98e32dddae59616b3b75f13a2bb149deaf7a0d617ce7fb9fd5a56a33a",
>         deprecated=True,
>     )
>     version(
>         "2.14",
>         sha256="34044d85d9b4ae61650ccdba5cda4794088c3a9075932392dd0752ef8c049235",
>         preferred=True,
>     )
>     version("2.13", md5="9e3323ed856e36e34d5c17a7b0341e38")
>     version("2.12", md5="2a1191909b1ab03bf0205971ad4d8ee9")
> 
>     variant(
>         "fftw",
>         default="3",
>         values=("none", "2", "3", "mkl", "amdfftw"),
>         description="Enable the use of FFTW/FFTW3/MKL FFT/AMDFFTW",
>     )
> 
>     variant(
>         "interface",
>         default="tcl",
>         values=("none", "tcl", "python"),
>         description="Enables Tcl and/or python interface",
>     )
76c78,79
<     variant('plumed', default=False, description='Enable PLUMED support')
---
>     variant("avxtiles", when="target=x86_64_v4:", default=False, description="Enable avxtiles")
>     variant("single_node_gpu", default=False, description="Single node GPU")
81,90c84,87
<     patch('inherited-member-2.13.patch', when='@2.13')
<     patch('inherited-member-2.14.patch', when='@2.14')
<     patch('charmpp-shasta-2.14.patch', when='@2.14')
< 
<     # From python 3.8 python3-config requires --embed to report lpython linkage.
<     # See https://docs.python.org/3/whatsnew/3.8.html#debug-build-uses-the-same-abi-as-release-build
<     patch('lpython-for-3.8+.patch')
< 
<     # error: 'struct BaseLB::LDStats' has no member named 'n_objs'
<     patch('nobjs.patch', when='@2.14')
---
>     patch("inherited-member-2.13.patch", when="@2.13")
>     patch("inherited-member-2.14.patch", when="@2.14")
>     # Handle change in python-config for python@3.8:
>     patch("namd-python38.patch", when="interface=python ^python@3.8:")
92,95c89,92
<     depends_on('charmpp@7.0.0', when="+rocm")
<     depends_on('charmpp@6.10.1:', when="@2.14:")
<     depends_on('charmpp@6.8.2', when="@2.13")
<     depends_on('charmpp@6.7.1', when="@2.12")
---
>     depends_on("charmpp@7.0.0:", when="@3.0:")
>     depends_on("charmpp@6.10.1:6", when="@2.14:2")
>     depends_on("charmpp@6.8.2", when="@2.13")
>     depends_on("charmpp@6.7.1", when="@2.12")
97,98c94,95
<     depends_on('fftw@:2', when="fftw=2")
<     depends_on('fftw@3:', when="fftw=3")
---
>     depends_on("fftw@:2", when="fftw=2")
>     depends_on("fftw@3:", when="fftw=3")
100,101c97
<     depends_on('amdfftw', when="fftw=amdfftw")
<     depends_on('cray-fftw', when="fftw=cray")
---
>     depends_on("amdfftw", when="fftw=amdfftw")
103c99
<     depends_on('intel-mkl', when="fftw=mkl")
---
>     depends_on("mkl", when="fftw=mkl")
105c101
<     depends_on('tcl', when='interface=tcl')
---
>     depends_on("tcl", when="interface=tcl")
107,108c103,104
<     depends_on('tcl', when='interface=python')
<     depends_on('python', when='interface=python')
---
>     depends_on("tcl", when="interface=python")
>     depends_on("python", when="interface=python")
110,111c106,108
<     depends_on('plumed@2.6:+mpi', when='@2.12:2.13+plumed')
<     depends_on('plumed@2.7:+mpi', when='@2.14+plumed')
---
>     conflicts("+avxtiles", when="@:2.14,3:", msg="AVXTiles algorithm requires NAMD 2.15")
>     conflicts("+rocm", when="+cuda", msg="NAMD supports only one GPU backend at a time")
>     conflicts("+single_node_gpu", when="~cuda~rocm")
116,117c113,114
<     depends_on('cuda@6.5.14:7.5.18', when='@2.12 +cuda')
<     depends_on('cuda@8.0.61:', when='@2.13: +cuda')
---
>     depends_on("cuda@6.5.14:7.5.18", when="@2.12 +cuda")
>     depends_on("cuda@8.0.61:", when="@2.13: +cuda")
120,126c117,126
<         config_filename = 'arch/{0}.{1}'.format(self.arch, lib)
<         copy('arch/Linux-x86_64.{0}'.format(lib),
<              config_filename)
<         if lib == 'tcl':
<             filter_file(r'-ltcl8\.5',
<                         '-ltcl{0}'.format(self.spec['tcl'].version.up_to(2)),
<                         config_filename)
---
>         config_filename = "arch/{0}.{1}".format(self.arch, lib)
>         if self.arch == "linux-aarch64":
>             copy("arch/Linux-ARM64.{0}".format(lib), config_filename)
>         else:
>             copy("arch/Linux-x86_64.{0}".format(lib), config_filename)
> 
>         if lib == "tcl":
>             filter_file(
>                 r"-ltcl8\.5", "-ltcl{0}".format(self.spec["tcl"].version.up_to(2)), config_filename
>             )
129c129
<         if lib != 'python':
---
>         if lib != "python":
132,135c132,137
<         opts.extend([
<             '--with-{0}'.format(lib),
<             '--{0}-prefix'.format(lib), spec[lib].prefix
<         ])
---
>         lib_prefix = (
>             spec[lib].package.component_prefix
>             if spec[lib].name == "intel-oneapi-mkl"
>             else spec[lib].prefix
>         )
>         opts.extend(["--with-{0}".format(lib), "--{0}-prefix".format(lib), lib_prefix])
143c145
<         return '{0}-{1}'.format(plat, march)
---
>         return "{0}-{1}".format(plat, march)
147c149
<         return '{0}-spack'.format(self.arch)
---
>         return "{0}-spack".format(self.arch)
151,153c153,155
<         m64 = '-m64 ' if not spec.satisfies('arch=aarch64:') else ''
<         with working_dir('arch'):
<             with open('{0}.arch'.format(self.build_directory), 'w') as fh:
---
>         m64 = "-m64 " if not spec.satisfies("arch=aarch64:") else ""
>         with working_dir("arch"):
>             with open("{0}.arch".format(self.build_directory), "w") as fh:
157,158c159
<                 archopt = spec.target.optimization_flags(
<                     spec.compiler.name, spec.compiler.version)
---
>                 archopt = spec.architecture.target.optimization_flags(spec.compiler)
160c161
<                 if self.spec.satisfies('^charmpp@:6.10.1'):
---
>                 if self.spec.satisfies("^charmpp@:6.10.1"):
162,166c163,173
<                         'gcc': m64 + '-O3 -fexpensive-optimizations \
<                                         -ffast-math -lpthread ' + archopt,
<                         'intel': '-O2 -ip -qopenmp-simd' + archopt,
<                         'aocc': m64 + '-O3 -ffp-contract=fast -ffast-math \
<                                         -fopenmp ' + archopt}
---
>                         "gcc": m64
>                         + "-O3 -fexpensive-optimizations \
>                                         -ffast-math -lpthread "
>                         + archopt,
>                         "intel": "-O2 -ip -qopenmp-simd" + archopt,
>                         "clang": m64 + "-O3 -ffast-math -fopenmp " + archopt,
>                         "aocc": m64
>                         + "-O3 -ffp-contract=fast -ffast-math \
>                                         -fopenmp "
>                         + archopt,
>                     }
169,187c176,210
<                         'gcc': m64 + '-O3 -fexpensive-optimizations \
<                                         -ffast-math -lpthread ' + archopt,
<                         'intel': '-O2 -ip ' + archopt,
<                         'aocc': m64 + '-O3 -ffp-contract=fast \
<                                         -ffast-math ' + archopt}
< 
<                 optim_opts = optims_opts[self.compiler.name] \
<                     if self.compiler.name in optims_opts else ''
< 
<                 fh.write('\n'.join([
<                     'NAMD_ARCH = {0}'.format(self.arch),
<                     'CHARMARCH = {0}'.format(self.spec['charmpp'].charmarch),
<                     'CXX = {0.cxx} {0.cxx11_flag}'.format(
<                         self.compiler),
<                     'CXXOPTS = {0}'.format(optim_opts),
<                     'CC = {0}'.format(self.compiler.cc),
<                     'COPTS = {0}'.format(optim_opts),
<                     ''
<                 ]))
---
>                         "gcc": m64
>                         + "-O3 -fexpensive-optimizations \
>                                         -ffast-math -lpthread "
>                         + archopt,
>                         "intel": "-O2 -ip " + archopt,
>                         "clang": m64 + "-O3 -ffast-math -fopenmp " + archopt,
>                         "aocc": m64
>                         + "-O3 -ffp-contract=fast \
>                                         -ffast-math "
>                         + archopt,
>                     }
> 
>                 if self.spec.satisfies("+avxtiles"):
>                     optims_opts["aocc"] += " -DNAMD_AVXTILES"
>                     optims_opts["clang"] += " -DNAMD_AVXTILES"
>                     optims_opts["gcc"] += " -DNAMD_AVXTILES"
>                     optims_opts["intel"] += " -DNAMD_AVXTILES"
> 
>                 optim_opts = (
>                     optims_opts[self.compiler.name] if self.compiler.name in optims_opts else ""
>                 )
> 
>                 fh.write(
>                     "\n".join(
>                         [
>                             "NAMD_ARCH = {0}".format(self.arch),
>                             "CHARMARCH = {0}".format(self.spec["charmpp"].charmarch),
>                             "CXX = {0.cxx} {0.cxx11_flag}".format(self.compiler),
>                             "CXXOPTS = {0}".format(optim_opts),
>                             "CC = {0}".format(self.compiler.cc),
>                             "COPTS = {0}".format(optim_opts),
>                             "",
>                         ]
>                     )
>                 )
195,196c218,219
<         with working_dir('arch'):
<             arch_filename = '{0}.arch'.format(self.build_directory)
---
>         with working_dir("arch"):
>             arch_filename = "{0}.arch".format(self.build_directory)
199,206c222,223
<                 [
<                     r"^CHARMARCH = .*$",
<                     'CHARMARCH = {0}'.format(self.spec['charmpp'].charmarch)
<                 ],
<                 [
<                     r"^NAMD_ARCH = .*$",
<                     'NAMD_ARCH = {0}'.format(self.arch)
<                 ]
---
>                 [r"^CHARMARCH = .*$", "CHARMARCH = {0}".format(self.spec["charmpp"].charmarch)],
>                 [r"^NAMD_ARCH = .*$", "NAMD_ARCH = {0}".format(self.arch)],
210,215c227,233
<             if spec.platform == "linux" and \
<                     self.compiler.name == "intel" and \
<                     'avx512' in spec.target and \
<                     spec.target >= 'skylake_avx512':
<                 if spec.version >= Version("2.15") and \
<                         os.path.exists("Linux-AVX512-icc.arch"):
---
>             if (
>                 spec.platform == "linux"
>                 and self.compiler.name == "intel"
>                 and "avx512" in spec.target
>                 and spec.target >= "skylake_avx512"
>             ):
>                 if spec.version >= Version("2.15") and os.path.exists("Linux-AVX512-icc.arch"):
218,221c236,237
<                 elif spec.version >= Version("2.14") and \
<                         os.path.exists("Linux-SKX-icc.arch"):
<                     tty.info("Building binaries with Skylake-X"
<                              "AVX512 optimization")
---
>                 elif spec.version >= Version("2.14") and os.path.exists("Linux-SKX-icc.arch"):
>                     tty.info("Building binaries with Skylake-X" "AVX512 optimization")
226,233c242,243
<                 replace.append([
<                     r"^CXX = icpc",
<                     'CXX = {0}'.format(self.compiler.cxx)
<                 ])
<                 replace.append([
<                     r"^CC = icc",
<                     'CC = {0}'.format(self.compiler.cc)
<                 ])
---
>                 replace.append([r"^CXX = icpc", "CXX = {0}".format(self.compiler.cxx)])
>                 replace.append([r"^CC = icc", "CC = {0}".format(self.compiler.cc)])
250c260
<         self._copy_arch_file('base')
---
>         self._copy_arch_file("base")
252,265c262,270
<         opts = ['--charm-base', spec['charmpp'].prefix]
<         fftw_version = spec.variants['fftw'].value
<         if fftw_version == 'none':
<             opts.append('--without-fftw')
<         elif fftw_version == 'mkl':
<             self._append_option(opts, 'mkl')
<         elif fftw_version == 'amdfftw':
<             self._copy_arch_file('fftw3')
<             opts.extend(['--with-fftw3',
<                          '--fftw-prefix', spec['amdfftw'].prefix])
<         elif fftw_version == 'cray':
<             self._copy_arch_file('fftw3')
<             opts.extend(['--with-fftw3',
<                          '--fftw-prefix', spec['cray-fftw'].prefix])
---
>         opts = ["--charm-base", spec["charmpp"].prefix]
>         fftw_version = spec.variants["fftw"].value
>         if fftw_version == "none":
>             opts.append("--without-fftw")
>         elif fftw_version == "mkl":
>             self._append_option(opts, "mkl")
>         elif fftw_version == "amdfftw":
>             self._copy_arch_file("fftw3")
>             opts.extend(["--with-fftw3", "--fftw-prefix", spec["amdfftw"].prefix])
267c272
<             _fftw = 'fftw{0}'.format('' if fftw_version == '2' else '3')
---
>             _fftw = "fftw{0}".format("" if fftw_version == "2" else "3")
270,271c275
<             opts.extend(['--with-{0}'.format(_fftw),
<                          '--fftw-prefix', spec['fftw'].prefix])
---
>             opts.extend(["--with-{0}".format(_fftw), "--fftw-prefix", spec["fftw"].prefix])
273,275c277,279
<         interface_type = spec.variants['interface'].value
<         if interface_type != 'none':
<             self._append_option(opts, 'tcl')
---
>         interface_type = spec.variants["interface"].value
>         if interface_type != "none":
>             self._append_option(opts, "tcl")
277,278c281,282
<             if interface_type == 'python':
<                 self._append_option(opts, 'python')
---
>             if interface_type == "python":
>                 self._append_option(opts, "python")
280,289c284,305
<             opts.extend([
<                 '--without-tcl',
<                 '--without-python'
<             ])
< 
<         if '+cuda' in spec:
<             self._append_option(opts, 'cuda')
<             filter_file('^CUDADIR=.*$',
<                         'CUDADIR={0}'.format(spec['cuda'].prefix),
<                         join_path('arch', self.arch + '.cuda'))
---
>             opts.extend(["--without-tcl", "--without-python"])
> 
>         if "+cuda" in spec:
>             self._append_option(opts, "cuda")
>             filter_file(
>                 "^CUDADIR=.*$",
>                 "CUDADIR={0}".format(spec["cuda"].prefix),
>                 join_path("arch", self.arch + ".cuda"),
>             )
>             for cuda_arch in spec.variants["cuda_arch"].value:
>                 opts.extend(["--cuda-gencode", f"arch=compute_{cuda_arch},code=sm_{cuda_arch}"])
> 
>             if "+single_node_gpu" in spec:
>                 opts.extend(["--with-single-node-cuda"])
> 
>         if "+rocm" in spec:
>             self._copy_arch_file("hip")
>             opts.append("--with-hip")
>             opts.extend(["--rocm-prefix", os.environ["ROCM_PATH"]])
> 
>             if "+single_node_gpu" in spec:
>                 opts.extend(["--with-single-node-hip"])
291c307
<         config = Executable('./config')
---
>         config = Executable("./config")
298,305c314,328
<         if not os.path.exists(join_path(
<                 self.spec['charmpp'].prefix, self.spec['charmpp'].charmarch)):
<             filter_file(r"^CHARM = \$\(CHARMBASE\)/\$\(CHARMARCH\)",
<                         "CHARM = $(CHARMBASE)",
<                         join_path(self.build_directory, "Make.config"))
<     def patch(self):
<         if '+plumed' in self.spec:
<             self.spec['plumed'].package.apply_patch(self)
---
>         if not os.path.exists(
>             join_path(self.spec["charmpp"].prefix, self.spec["charmpp"].charmarch)
>         ):
>             filter_file(
>                 r"^CHARM = \$\(CHARMBASE\)/\$\(CHARMARCH\)",
>                 "CHARM = $(CHARMBASE)",
>                 join_path(self.build_directory, "Make.config"),
>             )
> 
>     @when("@3.0b3")
>     def build(self, spec, prefix):
>         # Disable parallel build
>         # https://github.com/spack/spack/pull/43215
>         with working_dir(self.build_directory):
>             make(parallel=False)
310c333,337
<             install('namd2', prefix.bin)
---
>             if spec.version < Version("3"):
>                 install("namd2", prefix.bin)
>             else:
>                 install("namd3", prefix.bin)
>             install("psfgen", prefix.bin)
314,320c341
<             install('charmrun', prefix.bin)
< 
<     def url_for_version(self,version):
<         if self.spec.satisfies("+rocm"):
<             return "file://{0}/NAMD_2.15a2_Source.tar.gz".format(os.getcwd()) 
<         else:
<             return "file://{0}/NAMD_2.12_Source.tar.gz".format(os.getcwd())
---
>             install("charmrun", prefix.bin)
###### DIFF nekrs
1c1
< # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
7a8
> from spack.package import *
9,10d9
< class Nekrs(CMakePackage, ROCmPackage):
<     """High-order methods have the potential to overcome the current limitations of standard CFD solvers. For this reason, we have been developing and improving our spectral element code for more than 35 years now. It features state-of-the-art, scalable algorithms that are fast and efficient on platforms ranging from laptops to the world’s fastest computers. Applications span a wide range of fields, including fluid flow, thermal convection, combustion and magnetohydrodynamics. Our user community includes hundreds of scientists and engineers in academia, laboratories and industry."""
12,15c11,65
<     homepage = 'https://nek5000.mcs.anl.gov/'
<     url      = 'https://github.com/Nek5000/nekRS/archive/refs/tags/v22.0.tar.gz'
<     git      = 'https://github.com/Nek5000/nekRS.git'
<     maintainers = ['Basha', 'crist']
---
> class Nekrs(Package, CudaPackage, ROCmPackage):
>     """nekRS is an open-source Navier Stokes solver based on the spectral
>     element method targeting classical processors and hardware accelerators
>     like GPUs"""
> 
>     homepage = "https://github.com/Nek5000/nekRS"
>     git = "https://github.com/Nek5000/nekRS.git"
> 
>     tags = [
>         "cfd",
>         "flow",
>         "hpc",
>         "solver",
>         "navier-stokes",
>         "spectral-elements",
>         "fluid",
>         "ecp",
>         "ecp-apps",
>     ]
> 
>     maintainers("thilinarmtb", "stgeke")
> 
>     license("BSD-3-Clause")
> 
>     version("21.0", tag="v21.0", commit="bcd890bf3f9fb4d91224c83aeda75c33570f1eaa")
> 
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
>     depends_on("fortran", type="build")  # generated
> 
>     variant("opencl", default=False, description="Activates support for OpenCL")
> 
>     # Conflicts:
>     # nekrs includes following packages, but in order to build as part of
>     # CEED we can't leave them in as conflicts. They should be enabled
>     # sometime in future.
>     # for pkg in ['occa', 'hyper', 'nek5000', 'blas', 'lapack', 'gslib']:
>     #     conflicts('^' + pkg, msg=(pkg + " is built into nekRS"))
> 
>     # Dependencies
>     depends_on("mpi")
>     depends_on("git")
>     depends_on("cmake")
> 
>     @run_before("install")
>     def fortran_check(self):
>         if not self.compiler.f77:
>             msg = "Cannot build NekRS without a Fortran 77 compiler."
>             raise RuntimeError(msg)
> 
>     # Following 4 methods are stolen from OCCA since we are using OCCA
>     # shipped with nekRS.
>     def _setup_runtime_flags(self, s_env):
>         spec = self.spec
>         s_env.set("OCCA_CXX", self.compiler.cxx)
17,18c67,75
<     version("23.0",tag="v23.0")
<     version("22.0",tag="v22.0")
---
>         cxxflags = spec.compiler_flags["cxxflags"]
>         if cxxflags:
>             # Run-time compiler flags:
>             s_env.set("OCCA_CXXFLAGS", " ".join(cxxflags))
> 
>         if "+cuda" in spec:
>             cuda_dir = spec["cuda"].prefix
>             # Run-time CUDA compiler:
>             s_env.set("OCCA_CUDA_COMPILER", join_path(cuda_dir, "bin", "nvcc"))
20,21c77,80
<     variant('rocm', default=True, description='Enable Hip support')
<     variant('mpi', default=True, description='Enable mpi support')
---
>     def setup_build_environment(self, env):
>         spec = self.spec
>         # The environment variable CXX is automatically set to the Spack
>         # compiler wrapper.
23,24c82,91
<     depends_on('hip')
<     depends_on('mpi')
---
>         # The cxxflags, if specified, will be set by the Spack compiler wrapper
>         # while the environment variable CXXFLAGS will remain undefined.
>         # We define CXXFLAGS in the environment to tell OCCA to use the user
>         # specified flags instead of its defaults. This way the compiler will
>         # get the cxxflags twice - once from the Spack compiler wrapper and
>         # second time from OCCA - however, only the second one will be seen in
>         # the verbose output, so we keep both.
>         cxxflags = spec.compiler_flags["cxxflags"]
>         if cxxflags:
>             env.set("CXXFLAGS", " ".join(cxxflags))
26,27c93,105
<     def cmake_args(self):
<         args = []
---
>         # For the cuda, openmp, and opencl variants, set the environment
>         # variable OCCA_{CUDA,OPENMP,OPENCL}_ENABLED only if the variant is
>         # disabled. Otherwise, let OCCA autodetect what is available.
> 
>         if "+cuda" in spec:
>             cuda_dir = spec["cuda"].prefix
>             cuda_libs_list = ["libcuda", "libcudart", "libOpenCL"]
>             cuda_libs = find_libraries(cuda_libs_list, cuda_dir, shared=True, recursive=True)
>             env.set("OCCA_INCLUDE_PATH", cuda_dir.include)
>             env.set("OCCA_LIBRARY_PATH", ":".join(cuda_libs.directories))
>             env.set("OCCA_CUDA_ENABLED", "1")
>         else:
>             env.set("OCCA_CUDA_ENABLED", "0")
29,33c107,108
<         args.append('-DENABLE_CUDA=0')
<         args.append('-DENABLE_HIP=1')
<         args.append('-DENABLE_OPENCL=0')
<         args.append('-DGPU_MPI=1')
<         args.append('-DAMDGPU_TARGET=gfx90a')
---
>         env.set("OCCA_OPENCL_ENABLED", "1" if "+opencl" in spec else "0")
>         env.set("OCCA_HIP_ENABLED", "1" if "+rocm" in spec else "0")
35c110,112
<         return args
---
>         # Setup run-time environment for testing.
>         env.set("OCCA_VERBOSE", "1")
>         self._setup_runtime_flags(env)
38,47c115,116
<         spec = self.spec
<         env.set("OCCA_CXX", self.compiler.cxx)
<         cxxflags = spec.compiler_flags["cxxflags"]
<         env.set("OCCA_CXXFLAGS", " ".join(cxxflags))
<         env.set("NEKRS_HOME", self.prefix)
< 
< 
<     def setup_build_environment(self, env):
<         spec = self.spec
<         rocm_dir = spec["hip"].prefix
---
>         # The 'env' is included in the Spack generated module files.
>         self._setup_runtime_flags(env)
49,60c118,140
<         env.set("OCCA_INCLUDE_PATH", rocm_dir.include)
<         env.set("OCCA_LIBRARY_PATH", ":".join(rocm_dir.directories))
<         env.set("NEKRS_INSTALL_DIR", self.prefix)
<         env.set("OCCA_CXX", "CC")
<         env.set("OCCA_CXXFLAGS", " ".join(spec.compiler_flags["cxxflags"]))
<         env.set("OCCA_ENABLE_HIP","1")
<         env.set("CXXFLAGS", " ".join(spec.compiler_flags["cxxflags"]))
<         env.set("OCCA_VERBOSE", "1")
<         env.set("NEKRS_CC", spec["mpi"].mpicc)
<         env.set("NEKRS_CXX", spec["mpi"].mpicxx)
<         env.set("NEKRS_FC", spec["mpi"].mpifc)
<         env.set("TRAVIS", "true")
---
>     def setup_dependent_build_environment(self, env, dependent_spec):
>         # Export OCCA_* variables for everyone using this package from within
>         # Spack.
>         self._setup_runtime_flags(env)
> 
>     def install(self, spec, prefix):
>         script_dir = "scripts"
> 
>         with working_dir(script_dir):
>             # Make sure nekmpi wrapper uses srun when we know OpenMPI
>             # is not built with mpiexec
>             if "^openmpi~legacylaunchers" in spec:
>                 filter_file(r"mpirun -np", "srun -n", "nrsmpi")
>                 filter_file(r"mpirun -np", "srun -n", "nrspre")
>                 filter_file(r"mpirun -np", "srun -n", "nrsbmpi")
> 
>         makenrs = Executable(os.path.join(os.getcwd(), "makenrs"))
> 
>         makenrs.add_default_env("NEKRS_INSTALL_DIR", prefix)
>         makenrs.add_default_env("NEKRS_CC", spec["mpi"].mpicc)
>         makenrs.add_default_env("NEKRS_CXX", spec["mpi"].mpicxx)
>         makenrs.add_default_env("NEKRS_FC", spec["mpi"].mpifc)
>         makenrs.add_default_env("TRAVIS", "true")
61a142
>         makenrs(output=str, error=str, fail_on_error=True)
###### DIFF nektar
1c1
< # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,6d4
< # Nektar builds its own boost and other packages - better than let spack handling it.
< from spack.package import *
9a8,12
> import llnl.util.filesystem as fs
> 
> from spack.package import *
> 
> 
14,51c17
< #    url      = "https://gitlab.nektar.info/nektar/nektar/-/archive/v4.4.1/nektar-v4.4.1.tar.bz2"
<     url      = "file://{0}/nektar-v5.0.2.tar.bz2".format(os.getcwd())
<     manual_download = True
<     #version('5.2.0', sha256="")
<     version('5.1.0', sha256='f5fdb729909e4dcd42cb071f06569634fa87fe90384ba0f2f857a9e0e56b6ac5')
<     version('5.0.3', sha256='1ef6f8f94f850ae78675bca3f752aa6c9f75401d1d6da4ec25df7fa795b860e9')
<     version('5.0.2', sha256='24af60a48dbdf0455149540b35a6a59acd636c47b3150b261899a1a1ca886c0b')
<     version('5.0.0', sha256='5c594453fbfaa433f732a55405da9bba27d4a00c32d7b9d7515767925fb4a818')
<     version('4.4.1', sha256='71cfd93d848a751ae9ae5e5ba336cee4b4827d4abcd56f6b8dc5c460ed6b738c')
< 
<     variant('mpi', default=True, description='Builds with mpi support')
<     variant('avx2', default=True, description='Builds with simd avx2 support')
<     variant('fftw', default=True, description='Builds with fftw support')
<     variant('arpack', default=True, description='Builds with arpack support')
<     variant('hdf5', default=True, description='Builds with hdf5 support')
<     variant('scotch', default=False,
<             description='Builds with scotch partitioning support')
<     variant('unit-tests', default=False, description='Builds unit tests')
<     variant('regression-tests', default=False, description='Builds regression tests')
<     variant('benchmarking-tests', default=False, description='Builds benchmark timing codes')
<     variant('python', default=False, description='Builds python bindings')
< 
<     # depends_on('cmake@2.8.8:', type='build', when="~hdf5")
<     # depends_on('cmake@3.2:', type='build', when="+hdf5")
< 
<     depends_on('tinyxml', when='platform=darwin')
<     depends_on('mpi', when='+mpi')
<     depends_on('blas')
<     depends_on('lapack')
<     # depends_on('boost@1.57.0 ~atomic ~chrono ~exception +filesystem ~graph +iostreams ~locale ~log ~math ~mpi +multithreaded ~numpy +pic ~program_options ~python ~random +regex ~serialization ~signals +system ~test +thread ~timer ~wave')
< 
<     depends_on('fftw@3.0: +mpi', when="+mpi+fftw")
<     depends_on('fftw@3.0: ~mpi', when="~mpi+fftw")
<     depends_on('arpack-ng +mpi', when="+arpack+mpi")
<     depends_on('arpack-ng ~mpi', when="+arpack~mpi")
<     depends_on('hdf5 +mpi +hl', when="+mpi+hdf5")
<     depends_on('scotch ~mpi ~metis', when="~mpi+scotch")
<     depends_on('scotch +mpi ~metis', when="+mpi+scotch")
---
>     git = "https://gitlab.nektar.info/nektar/nektar.git"
53,54c19,126
<     conflicts('+hdf5', when='~mpi',
<               msg='Nektar hdf5 output is for parallel builds only')
---
>     version("5.5.0", commit="4365d5d7156139f238db962deae5eb25e0437d12", preferred=True)
>     version("5.4.0", commit="002bf62648ec667e10524ceb8a98bb1c21804130")
>     version("5.3.0", commit="f286f809cfeb26cb73828c90a689a048898971d2")
> 
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
> 
>     variant("mpi", default=True, description="Builds with mpi support")
>     variant("fftw", default=True, description="Builds with fftw support")
>     variant("arpack", default=True, description="Builds with arpack support")
>     variant("tinyxml", default=True, description="Builds with external tinyxml support")
>     variant("hdf5", default=True, description="Builds with hdf5 support")
>     variant("scotch", default=False, description="Builds with scotch partitioning support")
>     variant("demos", default=False, description="Build demonstration codes")
>     variant("python", default=True, description="Enable python support")
>     # Solver variants
>     variant(
>         "acoustic_solver",
>         default=False,
>         description="Builds an executable associated with the Acoustic solver",
>     )
>     variant(
>         "adr_solver",
>         default=False,
>         description="Builds an executable associated with the ADR solver",
>     )
>     variant(
>         "cardiac_solver",
>         default=False,
>         description="Builds an executable associated with the Cardiac electrophysiology solver",
>     )
>     variant(
>         "compflow_solver",
>         default=False,
>         description="Builds an executable associated with the CompressibleFlow solver",
>     )
>     variant(
>         "diff_solver",
>         default=False,
>         description="Builds an executable associated with the Diffusion solver",
>     )
>     variant(
>         "dummy_solver",
>         default=False,
>         description="Builds an executable associated with the Dummy solver",
>     )
>     variant(
>         "elasticity_solver",
>         default=False,
>         description="Builds an executable associated with the Elasticity solver",
>     )
>     variant(
>         "imgwarp_solver",
>         default=False,
>         description="Builds an executable associated with the Image Warping solver",
>     )
>     variant(
>         "ins_solver",
>         default=False,
>         description="Builds an executable associated with the Incompressible Navier Stokes solver",
>     )
>     variant(
>         "mmf_solver",
>         default=False,
>         description="Builds an executable associated with the MMF solver",
>     )
>     variant(
>         "pulsewave_solver",
>         default=False,
>         description="Builds an executable associated with the Pulse Wave solver",
>     )
>     variant(
>         "shwater_solver",
>         default=False,
>         description="Builds an executable associated with the Shallow Water solver",
>     )
>     variant(
>         "vortexwave_solver",
>         default=False,
>         description="Builds an executable associated with the Vortex Wave solver",
>     )
> 
>     depends_on("cmake@2.8.8:", type="build", when="~hdf5")
>     depends_on("cmake@3.2:", type="build", when="+hdf5")
> 
>     depends_on("blas")
>     depends_on("zlib")
>     depends_on("tinyxml", when="+tinyxml")
>     depends_on("lapack")
>     depends_on(
>         "boost@1.74.0: +thread +iostreams +filesystem +system +program_options +regex +pic"
>         "+python +numpy",
>         when="+python",
>     )
>     depends_on(
>         "boost@1.74.0: +thread +iostreams +filesystem +system +program_options +regex +pic",
>         when="~python",
>     )
>     depends_on("tinyxml", when="platform=darwin")
> 
>     depends_on("mpi", when="+mpi", type=("build", "link", "run"))
>     depends_on("fftw@3.0: +mpi", when="+mpi+fftw")
>     depends_on("fftw@3.0: ~mpi", when="~mpi+fftw")
>     depends_on("arpack-ng +mpi", when="+arpack+mpi")
>     depends_on("arpack-ng ~mpi", when="+arpack~mpi")
>     depends_on("hdf5 +mpi +hl", when="+mpi+hdf5")
>     depends_on("scotch ~mpi ~metis", when="~mpi+scotch")
>     depends_on("scotch +mpi ~metis", when="+mpi+scotch")
56,57c128
<     def cmake_args(self):
<         args = []
---
>     extends("python@3:", when="+python")
59,60c130
<         def hasfeature(feature):
<             return 'ON' if feature in self.spec else 'OFF'
---
>     conflicts("+hdf5", when="~mpi", msg="Nektar's hdf5 output is for parallel builds only")
62,77c132,134
<         args.append('-DNEKTAR_USE_FFTW=ON')
<         args.append('-DNEKTAR_USE_ARPACK=ON')
<         args.append('-DNEKTAR_USE_HDF5=ON')
<         args.append('-DNEKTAR_ERROR_ON_WARNINGS=OFF')
< 
<         args.append('-DNEKTAR_USE_MPI=%s' % hasfeature('+mpi'))
<         # args.append('-DNEKTAR_USE_FFTW=%s' % hasfeature('+fftw'))
<         # args.append('-DNEKTAR_USE_ARPACK=%s' % hasfeature('+arpack'))
<         # args.append('-DNEKTAR_USE_HDF5=%s' % hasfeature('+hdf5'))
<         args.append('-DNEKTAR_USE_SCOTCH=%s' % hasfeature('+scotch'))
<         args.append('-DNEKTAR_ENABLE_SIMD_AVX2=%s' % hasfeature('+avx2'))
<         args.append('-DNEKTAR_USE_PETSC=OFF')
<         args.append('-DNEKTAR_BUILD_UNIT_TESTS=%s' % hasfeature('+unit-tests'))
<         args.append('-DNEKTAR_BUILD_TESTS=%s' % hasfeature('+regression-tests'))
<         args.append('-DNEKTAR_BUILD_TIMINGS=%s' % hasfeature('+benchmarking-tests'))
<         args.append('-DNEKTAR_BUILD_PYTHON=%s' % hasfeature('+python'))
---
>     def cmake_args(self):
>         def hasfeature(feature):
>             return True if feature in self.spec else False
78a136,164
>         args = [
>             self.define_from_variant("NEKTAR_BUILD_DEMOS", "demos"),
>             self.define_from_variant("NEKTAR_BUILD_PYTHON", "python"),
>             self.define("NEKTAR_BUILD_SOLVERS", True),
>             self.define("NEKTAR_BUILD_UTILITIES", True),
>             self.define("NEKTAR_ERROR_ON_WARNINGS", False),
>             self.define_from_variant("NEKTAR_SOLVER_ACOUSTIC", "acoustic_solver"),
>             self.define_from_variant("NEKTAR_SOLVER_ADR", "adr_solver"),
>             self.define_from_variant("NEKTAR_SOLVER_CARDIAC_EP", "cardiac_solver"),
>             self.define_from_variant("NEKTAR_SOLVER_COMPRESSIBLE_FLOW", "compflow_solver"),
>             self.define_from_variant("NEKTAR_SOLVER_DIFFUSION", "diff_solver"),
>             self.define_from_variant("NEKTAR_SOLVER_DUMMY", "dummy_solver"),
>             self.define_from_variant("NEKTAR_SOLVER_ELASTICITY", "elasticity_solver"),
>             self.define_from_variant("NEKTAR_SOLVER_IMAGE_WARPING", "imgwarp_solver"),
>             self.define_from_variant("NEKTAR_SOLVER_INCNAVIERSTOKES", "ins_solver"),
>             self.define_from_variant("NEKTAR_SOLVER_MMF", "mmf_solver"),
>             self.define_from_variant("NEKTAR_SOLVER_PULSEWAVE", "pulsewave_solver"),
>             self.define_from_variant("NEKTAR_SOLVER_SHALLOW_WATER", "shwater_solver"),
>             self.define_from_variant("NEKTAR_SOLVER_VORTEXWAVE", "vortexwave_solver"),
>             self.define_from_variant("NEKTAR_USE_ARPACK", "arpack"),
>             self.define_from_variant("NEKTAR_USE_FFTW", "fftw"),
>             self.define_from_variant("NEKTAR_USE_HDF5", "hdf5"),
>             self.define_from_variant("NEKTAR_USE_MPI", "mpi"),
>             self.define("NEKTAR_USE_PETSC", False),
>             self.define_from_variant("NEKTAR_USE_SCOTCH", "scotch"),
>             self.define("NEKTAR_USE_THREAD_SAFETY", True),
>             self.define("NEKTAR_USE_MKL", hasfeature("^intel-oneapi-mkl")),
>             self.define("NEKTAR_USE_OPENBLAS", hasfeature("^openblas")),
>         ]
79a166,194
> 
>     def install(self, spec, prefix):
>         super(Nektar, self).install(spec, prefix)
>         if "+python" in spec:
>             python = which("python")
>             with fs.working_dir(self.build_directory):
>                 python("setup.py", "install", "--prefix", prefix)
> 
>     def setup_run_environment(self, env):
>         env.append_path(
>             "CMAKE_PREFIX_PATH",
>             os.path.join(
>                 self.spec.prefix, os.path.join("lib64", os.path.join("nektar++", "cmake"))
>             ),
>         )
>         env.append_path(
>             "PYTHONPATH", os.path.abspath(os.path.join(self.spec.prefix, "build_tree"))
>         )
> 
>     def setup_dependent_run_environment(self, env, dependent_spec):
>         self.setup_run_environment(env)
> 
>     def setup_dependent_build_environment(self, env, dependent_spec):
>         self.setup_run_environment(env)
> 
>     def add_files_to_view(self, view, merge_map, skip_if_exists=True):
>         super(Nektar, self).add_files_to_view(view, merge_map, skip_if_exists)
>         path = self.view_destination(view)
>         view.link(os.path.join(path, "lib64", "nektar++"), os.path.join(path, "lib", "nektar++"))
###### DIFF netcdf-c
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,10c5
< #pawsey additions
< #    def flag_handler(self, name, flags):
< #        if name == "cflags":
< #            if self.spec.satisfies("%cce"):
< #                flags.append("-Wno-error=incompatible-function-pointer-types")
< #        return (flags, None, None)
---
> 
33a29,30
>     license("BSD-3-Clause")
> 
58a56,58
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
> 
64,66c64,69
<         # TODO: fetch from the upstream repo once https://github.com/Unidata/netcdf-c/pull/2595
<         #  is accepted:
<         patch("netcdfc-mpi-win-support.patch", when="platform=windows")
---
>         # TODO: https://github.com/Unidata/netcdf-c/pull/2595 contains some of the changes
>         # made in this patch but is not sufficent to replace the patch. There is currently
>         # no upstream PR (or set of PRs) covering all changes in this path.
>         # When #2595 lands, this patch should be updated to include only
>         # the changes not incorporated into that PR
>         patch("netcdfc_correct_and_export_link_interface.patch", when="platform=windows")
136a140
>     variant("logging", default=False, description="Enable logging")
167c171
<     for __p in ["darwin", "cray", "linux"]:
---
>     for __p in ["darwin", "linux"]:
250c254
<     depends_on("zlib@1.2.5:", when="^zlib")
---
>     depends_on("zlib@1.2.5:", when="^[virtuals=zlib-api] zlib")
253c257
<     for __p in ["darwin", "cray", "linux"]:
---
>     for __p in ["darwin", "linux"]:
290,292d293
<         if name == "cflags":
<             if self.spec.satisfies("%cce"):
<                 flags.append("-Wno-error=incompatible-function-pointer-types")
309d309
<         self.pkg.setup_run_environment(env)
343a344
>             self.define_from_variant("NETCDF_ENABLE_LOGGING", "logging"),
351a353,356
>         if "+shared" in self.pkg.spec["hdf5"]:
>             base_cmake_args.append(self.define("NC_FIND_SHARED_LIBS", True))
>         else:
>             base_cmake_args.append(self.define("NC_FIND_SHARED_LIBS", False))
353a359,378
>     @run_after("install")
>     def patch_hdf5_pkgconfigcmake(self):
>         """
>         Incorrect hdf5 library names are put in the package config and config.cmake files
>         due to incorrectly using hdf5 target names
>         https://github.com/spack/spack/pull/42878
>         """
>         if sys.platform == "win32":
>             return
> 
>         pkgconfig_file = find(self.prefix, "netcdf.pc", recursive=True)
>         cmakeconfig_file = find(self.prefix, "netCDFTargets.cmake", recursive=True)
>         ncconfig_file = find(self.prefix, "nc-config", recursive=True)
>         settingsconfig_file = find(self.prefix, "libnetcdf.settings", recursive=True)
> 
>         files = pkgconfig_file + cmakeconfig_file + ncconfig_file + settingsconfig_file
>         config = "shared" if self.spec.satisfies("+shared") else "static"
>         filter_file(f"hdf5-{config}", "hdf5", *files, ignore_absent=True)
>         filter_file(f"hdf5_hl-{config}", "hdf5_hl", *files, ignore_absent=True)
> 
414a440,441
>         config_args += self.enable_or_disable("logging")
> 
443c470
<                 if "+external-xdr" in hdf:
---
>                 if "+external-xdr ^libtirpc" in hdf:
452c479
<             extra_libs.append(hdf5["zlib"].libs)
---
>             extra_libs.append(hdf5["zlib-api"].libs)
###### DIFF netlib-scalapack
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
45c45,49
<         if name == "fflags":
---
>         if name == "cflags":
>             if self.spec.satisfies("%gcc@14:"):
>                 # https://bugzilla.redhat.com/show_bug.cgi?id=2178710
>                 iflags.append("-std=gnu89")
>         elif name == "fflags":
110a115
>     git = "https://github.com/Reference-ScaLAPACK/scalapack"
112a118,119
>     license("BSD-3-Clause-Open-MPI")
> 
117a125,128
>     version("master", branch="master")
> 
>     depends_on("c", type="build")  # generated
>     depends_on("fortran", type="build")  # generated
120,126d130
< 
<     def flag_handler(self, name, flags):
<         if name == "cflags":
<             if self.spec.satisfies("%cce"):
<                 flags.append("-Wno-error=implicit-function-declaration")
<         return (flags, None, None)
< 
###### DIFF not_in_spack.txt
###### DIFF omnitrace
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
6c6
< #- ----------------------------------------------------------------------------
---
> # ----------------------------------------------------------------------------
17a18,19
>     license("MIT")
> 
19d20
<     version("1.11.2", commit="1df597e049b240fb263e7fcd7bddc78097d27f00", submodules=True)
31a33,36
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
>     depends_on("fortran", type="build")  # generated
> 
81d85
<     depends_on("tbb@2018.6.0:")
125,133d128
< 
<         # TBB include and lib directories, version 10.x or later.
<         args.extend(
<             [
<                 "-DTBB_INCLUDE_DIRS=%s" % spec["tbb"].prefix.include,
<                 "-DTBB_LIBRARY=%s" % spec["tbb"].prefix.lib,
<             ]
<         )
< 
138,142d132
<         if "+python" in spec:
<             pyexe = spec["python"].command.path
<             args.append(self.define("PYTHON_EXECUTABLE", pyexe))
<             args.append(self.define("Python3_EXECUTABLE", pyexe))
< 
158,161d147
< 
<     def setup_run_environment(self, env):
<         if "+python" in self.spec:
<             env.prepend_path("PYTHONPATH", join_path(self.prefix.lib, "python", "site-packages"))
###### DIFF openfoam
1c1
< # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
46,47d45
< #AEG: Importing this module to use their tools for copying files
< import shutil
51a50
> from spack.pkg.builtin.boost import Boost
54,59d52
< #AEG: Will use this function to save the original files before any modification
< def save_original(theFile):
<     backHere = theFile + '.original'
<     if not os.path.isfile(backHere):
<         shutil.copyfile(theFile, backHere)
< 
62,68c55,61
<     'add_extra_files',
<     'write_environ',
<     'rewrite_environ_files',
<     'mplib_content',
<     'foam_add_path',
<     'foam_add_lib',
<     'OpenfoamArch',
---
>     "add_extra_files",
>     "write_environ",
>     "rewrite_environ_files",
>     "mplib_content",
>     "foam_add_path",
>     "foam_add_lib",
>     "OpenfoamArch",
79c72
<     indir  = join_path(os.path.dirname(__file__), 'common')
---
>     indir = join_path(os.path.dirname(__file__), "common")
81c74
<         tty.info('Added file {0}'.format(f))
---
>         tty.info("Added file {0}".format(f))
84c77
<     indir  = join_path(foam_pkg.package_dir, 'assets')
---
>     indir = join_path(foam_pkg.package_dir, "assets")
86c79
<         tty.info('Added file {0}'.format(f))
---
>         tty.info("Added file {0}".format(f))
95,96c88,89
<     if key.startswith('#'):
<         return '## export {0}={1}\n'.format(re.sub(r'^#+\s*', '', key), value)
---
>     if key.startswith("#"):
>         return "## export {0}={1}\n".format(re.sub(r"^#+\s*", "", key), value)
98c91
<         return 'unset {0}\n'.format(key)
---
>         return "unset {0}\n".format(key)
100c93
<         return 'export {0}={1}\n'.format(key, value)
---
>         return "export {0}={1}\n".format(key, value)
108,109c101,102
<     if key.startswith('#'):
<         return '## setenv {0} {1}\n'.format(re.sub(r'^#+\s*', '', key), value)
---
>     if key.startswith("#"):
>         return "## setenv {0} {1}\n".format(re.sub(r"^#+\s*", "", key), value)
111c104
<         return 'unsetenv {0}\n'.format(key)
---
>         return "unsetenv {0}\n".format(key)
113c106
<         return 'setenv {0} {1}\n'.format(key, value)
---
>         return "setenv {0} {1}\n".format(key, value)
142,143c135,136
<     with open(output, 'w') as outfile:
<         outfile.write('# spack generated\n')
---
>     with open(output, "w") as outfile:
>         outfile.write("# spack generated\n")
145c138
<         outfile.write('# spack\n')
---
>         outfile.write("# spack\n")
157c150
<     rcfile = kwargs.get('posix', None)
---
>     rcfile = kwargs.get("posix", None)
160c153
<     rcfile = kwargs.get('cshell', None)
---
>     rcfile = kwargs.get("cshell", None)
167,169c160,162
<        Keyword Options:
<          posix[=None]    If set, the name of the POSIX file to rewrite.
<          cshell[=None]   If set, the name of the C-shell file to rewrite.
---
>     Keyword Options:
>       posix[=None]    If set, the name of the POSIX file to rewrite.
>       cshell[=None]   If set, the name of the C-shell file to rewrite.
171c164
<     rcfile = kwargs.get('posix', None)
---
>     rcfile = kwargs.get("posix", None)
174c167
<             regex = r'^(\s*export\s+{0})=.*$'.format(k)
---
>             regex = r"^(\s*export\s+{0})=.*$".format(k)
176,178c169,171
<                 replace = r'unset {0}  #SPACK: unset'.format(k)
<             elif v.startswith('#'):
<                 replace = r'unset {0}  {1}'.format(k, v)
---
>                 replace = r"unset {0}  #SPACK: unset".format(k)
>             elif v.startswith("#"):
>                 replace = r"unset {0}  {1}".format(k, v)
180,182c173
<                 replace = r'\1={0}'.format(v)
<             #AEG:saving original for easier installation debug
<             save_original(rcfile)
---
>                 replace = r"\1={0}".format(v)
185c176
<     rcfile = kwargs.get('cshell', None)
---
>     rcfile = kwargs.get("cshell", None)
188c179
<             regex = r'^(\s*setenv\s+{0})\s+.*$'.format(k)
---
>             regex = r"^(\s*setenv\s+{0})\s+.*$".format(k)
190,192c181,183
<                 replace = r'unsetenv {0}  #SPACK: unset'.format(k)
<             elif v.startswith('#'):
<                 replace = r'unsetenv {0}  {1}'.format(k, v)
---
>                 replace = r"unsetenv {0}  #SPACK: unset".format(k)
>             elif v.startswith("#"):
>                 replace = r"unsetenv {0}  {1}".format(k, v)
194,196c185
<                 replace = r'\1 {0}'.format(v)
<             #AEG:saving original for easier installation debug
<             save_original(rcfile)
---
>                 replace = r"\1 {0}".format(v)
202c191
<     return '"' + ':'.join(args) + ':${PATH}"'
---
>     return '"' + ":".join(args) + ':${PATH}"'
207c196
<     return '"' + ':'.join(args) + ':${LD_LIBRARY_PATH}"'
---
>     return '"' + ":".join(args) + ':${LD_LIBRARY_PATH}"'
231c220
<     mpi_spec = spec['mpi']
---
>     mpi_spec = spec["mpi"]
236,238c225,227
<     libname = 'mpi'
<     if 'mpich' in mpi_spec.name:
<         libname = 'mpich'
---
>     libname = "mpi"
>     if "mpich" in mpi_spec.name:
>         libname = "mpich"
245a235
> 
247,255c237,244
<         'name':   '{0}-{1}'.format(mpi_spec.name, mpi_spec.version),
<         'prefix':  pre,
<         'include': inc,
<         'bindir':  bin,
<         'libdir':  lib,
<         'FLAGS':  '-DOMPI_SKIP_MPICXX -DMPICH_SKIP_MPICXX',
<         'PINC':   '-I{0}'.format(inc),
<         #AEG:'PLIBS':  '-L{0} -l{1}'.format(lib, libname),
<         'PLIBS':  '-L{0} -L{1} -l{2} -l{3}'.format(lib+'$(WM_COMPILER_LIB_ARCH)',lib, libname,'rt'),
---
>         "name": "{0}-{1}".format(mpi_spec.name, mpi_spec.version),
>         "prefix": pre,
>         "include": inc,
>         "bindir": bin,
>         "libdir": lib,
>         "FLAGS": "-DOMPI_SKIP_MPICXX -DMPICH_SKIP_MPICXX",
>         "PINC": "-I{0}".format(inc),
>         "PLIBS": "-L{0} -l{1}".format(lib, libname),
261a251
> 
271c261
<     maintainers = ['olesenm']
---
>     maintainers("olesenm")
273,274c263,264
<     url      = "https://sourceforge.net/projects/openfoam/files/v1906/OpenFOAM-v1906.tgz"
<     git      = "https://develop.openfoam.com/Development/openfoam.git"
---
>     url = "https://sourceforge.net/projects/openfoam/files/v1906/OpenFOAM-v1906.tgz"
>     git = "https://develop.openfoam.com/Development/openfoam.git"
277a268,269
>     license("GPL-3.0-or-later")
> 
279a272,277
>     version("2312", sha256="f113183a4d027c93939212af8967053c5f8fe76fb62e5848cb11bbcf8e829552")
>     version("2306", sha256="d7fba773658c0f06ad17f90199565f32e9bf502b7bb03077503642064e1f5344")
>     version(
>         "2212_230612", sha256="604cd731173ec2a3645c838cf2468fae050a35c6340e2ca7c157699899d904c0"
>     )
>     version("2212", sha256="0a3ddbfea9abca04c3a811e72fcbb184c6b1f92c295461e63b231f1a97e96476")
338,360c336,337
<     variant('float32', default=False,
<             description='Use single-precision')
<     variant('spdp', default=False,
<             description='Use single/double mixed precision')
<     variant('int64', default=False,
<             description='With 64-bit labels')
<     variant('knl', default=False,
<             description='Use KNL compiler settings')
<     variant('kahip', default=False,
<             description='With kahip decomposition')
<     variant('metis', default=False,
<             description='With metis decomposition')
<     variant('scotch', default=True,
<             description='With scotch/ptscotch decomposition')
<     variant('zoltan', default=False,
<             description='With zoltan renumbering')
<     variant('mgridgen', default=False, description='With mgridgen support')
<     variant('paraview', default=False,
<             description='Build paraview plugins and runtime post-processing')
<     variant('vtk', default=False,
<             description='With VTK runTimePostProcessing')
<     variant('source', default=True,
<             description='Install library/application sources and tutorials')
---
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
362c339,361
<     depends_on('mpi')
---
>     variant("int64", default=False, description="With 64-bit labels")
>     variant("knl", default=False, description="Use KNL compiler settings")
>     variant("kahip", default=False, description="With kahip decomposition")
>     variant("metis", default=False, description="With metis decomposition")
>     variant("scotch", default=True, description="With scotch/ptscotch decomposition")
>     variant("zoltan", default=False, description="With zoltan renumbering")
>     variant("mgridgen", default=False, description="With mgridgen support")
>     variant(
>         "paraview", default=False, description="Build paraview plugins and runtime post-processing"
>     )
>     variant("vtk", default=False, description="With VTK runTimePostProcessing")
>     variant(
>         "source", default=True, description="Install library/application sources and tutorials"
>     )
>     variant(
>         "precision",
>         default="dp",
>         description="Precision option",
>         values=("sp", "dp", conditional("spdp", when="@1906:")),
>         multi=False,
>     )
> 
>     depends_on("mpi")
368,372c367,380
<     depends_on('zlib')
<     depends_on('fftw-api')
<     depends_on('boost')
<     # OpenFOAM does not play nice with CGAL 5.X
<     depends_on('cgal@:4')
---
>     depends_on("zlib-api")
>     depends_on("fftw-api")
> 
>     # TODO: replace this with an explicit list of components of Boost,
>     # for instance depends_on('boost +filesystem')
>     # See https://github.com/spack/spack/pull/22303 for reference
>     depends_on(Boost.with_default_variants)
> 
>     # Earlier versions of OpenFOAM may not work with CGAL 5.6. I do
>     # not know which OpenFOAM added support for 5.x and conservatively
>     # use 2312 in the check.
>     depends_on("cgal", when="@2312:")
>     depends_on("cgal@:4", when="@:2306")
> 
375,377c383,385
<     depends_on('flex@:2.6.1,2.6.4:')
<     depends_on('cmake', type='build')
<     depends_on('m4', type='build')
---
>     depends_on("flex@:2.6.1,2.6.4:")
>     depends_on("cmake", type="build")
>     depends_on("m4", type="build")
380,384c388,392
<     depends_on('scotch~metis+mpi~int64', when='+scotch~int64')
<     depends_on('scotch~metis+mpi+int64', when='+scotch+int64')
<     depends_on('kahip',        when='+kahip')
<     depends_on('metis@5:',     when='+metis')
<     depends_on('metis+int64',  when='+metis+int64')
---
>     depends_on("scotch~metis+mpi~int64", when="+scotch~int64")
>     depends_on("scotch~metis+mpi+int64", when="+scotch+int64")
>     depends_on("kahip", when="+kahip")
>     depends_on("metis@5:", when="+metis")
>     depends_on("metis+int64", when="+metis+int64")
386,389c394,397
<     depends_on('parmgridgen',  when='+mgridgen', type='build')
<     depends_on('zoltan',       when='+zoltan')
<     depends_on('vtk',          when='+vtk')
<     depends_on('adios2',       when='@1912:')
---
>     depends_on("parmgridgen", when="+mgridgen", type="build")
>     depends_on("zoltan", when="+zoltan")
>     depends_on("vtk", when="+vtk")
>     depends_on("adios2~fortran", when="@1912:")
397c405
<     depends_on('paraview@5.4:',   when='@1706:+paraview')
---
>     depends_on("paraview@5.4:", when="@1706:+paraview")
399c407,410
<     depends_on('paraview@:5.0.1', when='@1612+paraview')
---
>     depends_on("paraview@:5.0.1", when="@1612+paraview")
> 
>     # Icx only support from v2106 onwards
>     conflicts("%oneapi", when="@:2012", msg="OneAPI compiler not supported. Try v2106 or greater.")
402,403c413,414
<     common = ['spack-Allwmake', 'README-spack']
<     assets = []
---
>     common = ["spack-Allwmake", "README-spack"]
>     assets = []  # type: List[str]
406c417
<     patch('1612-spack-patches.patch', when='@1612')
---
>     patch("1612-spack-patches.patch", when="@1612")
408,411c419,429
<     patch('https://develop.openfoam.com/Development/openfoam/commit/8831dfc58b0295d0d301a78341dd6f4599073d45.patch',
<           when='@1806',
<           sha256='531146be868dd0cda70c1cf12a22110a38a30fd93b5ada6234be3d6c9256c6cf'
<           )
---
>     patch(
>         "https://develop.openfoam.com/Development/openfoam/commit/8831dfc58b0295d0d301a78341dd6f4599073d45.patch",
>         when="@1806",
>         sha256="531146be868dd0cda70c1cf12a22110a38a30fd93b5ada6234be3d6c9256c6cf",
>     )
>     # Fix: missing std::array include (searchable sphere)
>     patch(
>         "https://develop.openfoam.com/Development/openfoam/commit/b4324b1297761545d5b10f50b60ab29e71c172aa.patch",
>         when="@2012_220610",
>         sha256="bad4b0e80fd26ea702bce9ccfb925edbbaa3308f70392fe6da2c7671b1d39bea",
>     )
418c436
<         'link':  False
---
>         "link": False
425c443
<     etc_prefs = {}
---
>     etc_prefs = {}  # type: Dict[str,str]
428c446
<     etc_config = {}
---
>     etc_config = {}  # type: Dict[str,str]
430,431c448,449
<     phases = ['configure', 'build', 'install']
<     build_script = './spack-Allwmake'  # From patch() method.
---
>     phases = ["configure", "build", "install"]
>     build_script = "./spack-Allwmake"  # From patch() method.
443,444c461,462
<         if version <= Version('1612'):
<             fmt = 'v{0}+/OpenFOAM-v{1}+.tgz'
---
>         if version <= Version("1612"):
>             fmt = "v{0}+/OpenFOAM-v{1}+.tgz"
446c464
<             fmt = 'v{0}/OpenFOAM-v{1}.tgz'
---
>             fmt = "v{0}/OpenFOAM-v{1}.tgz"
450,456c468,473
<         """Sets a minimal openfoam environment.
<         """
<         tty.info('OpenFOAM minimal env {0}'.format(self.prefix))
<         env.set('FOAM_PROJECT_DIR', self.projectdir)
<         env.set('WM_PROJECT_DIR', self.projectdir)
<         for d in ['wmake', self.archbin]:  # bin added automatically
<             env.prepend_path('PATH', join_path(self.projectdir, d))
---
>         """Sets a minimal openfoam environment."""
>         tty.info("OpenFOAM minimal env {0}".format(self.prefix))
>         env.set("FOAM_PROJECT_DIR", self.projectdir)
>         env.set("WM_PROJECT_DIR", self.projectdir)
>         for d in ["wmake", self.archbin]:  # bin added automatically
>             env.prepend_path("PATH", join_path(self.projectdir, d))
459,460c476
<         """Sets the build environment (prior to unpacking the sources).
<         """
---
>         """Sets the build environment (prior to unpacking the sources)."""
472c488
<         bashrc = join_path(self.projectdir, 'etc', 'bashrc')
---
>         bashrc = join_path(self.projectdir, "etc", "bashrc")
483,485c499,500
<                         'PS1',              # Leave untouched
<                         'MANPATH',          # Leave untouched
< 
---
>                         "PS1",  # Leave untouched
>                         "MANPATH",  # Leave untouched
493d507
< 
496c510
<                         '[A-Z].*_ARCH_PATH',
---
>                         "[A-Z].*_ARCH_PATH",
498d511
< 
501,502c514,515
<                         'FOAM_RUN',
<                         '(FOAM|WM)_.*USER_.*',
---
>                         "FOAM_RUN",
>                         "(FOAM|WM)_.*USER_.*",
505,506c518,520
<                         'MPI_ARCH_PATH',  # Can be required for compilation
<                     ])
---
>                         "MPI_ARCH_PATH"  # Can be required for compilation
>                     ],
>                 )
510,511c524
<                 #AEG:solutionFromSpack#284444:tty.info('OpenFOAM bashrc env: {0}'.format(bashrc))
<                 tty.debug('OpenFOAM bashrc env: {0}'.format(bashrc))
---
>                 tty.debug("OpenFOAM bashrc env: {0}".format(bashrc))
525c538
<         env.set('FOAM_PROJECT_DIR', self.projectdir)
---
>         env.set("FOAM_PROJECT_DIR", self.projectdir)
533c546
<         env.set('FOAM_PROJECT_DIR', self.projectdir)
---
>         env.set("FOAM_PROJECT_DIR", self.projectdir)
549c562
<         return join_path('platforms', self.foam_arch, 'bin')
---
>         return join_path("platforms", self.foam_arch, "bin")
554c567
<         return join_path('platforms', self.foam_arch, 'lib')
---
>         return join_path("platforms", self.foam_arch, "lib")
558c571
<            Where needed, apply filter as an alternative to normal patching."""
---
>         Where needed, apply filter as an alternative to normal patching."""
561c574
<     @when('@:1806')
---
>     @when("@:1806")
564c577
<            Where needed, apply filter as an alternative to normal patching."""
---
>         Where needed, apply filter as an alternative to normal patching."""
570c583
<             tty.info('Added directory link {0}'.format(projdir))
---
>             tty.info("Added directory link {0}".format(projdir))
572,576c585,586
<                 os.path.relpath(
<                     self.stage.source_path,
<                     self.stage.path
<                 ),
<                 join_path(self.stage.path, projdir)
---
>                 os.path.relpath(self.stage.source_path, self.stage.path),
>                 join_path(self.stage.path, projdir),
582,583c592
<             'WM_THIRD_PARTY_DIR':
<             r'$WM_PROJECT_DIR/ThirdParty  #SPACK: No separate third-party',
---
>             "WM_THIRD_PARTY_DIR": r"$WM_PROJECT_DIR/ThirdParty  #SPACK: No separate third-party"
586,588c595,596
<             edits,
<             posix=join_path('etc', 'bashrc'),
<             cshell=join_path('etc', 'cshrc'))
---
>             edits, posix=join_path("etc", "bashrc"), cshell=join_path("etc", "cshrc")
>         )
594,595c602,603
<         for rcdir in ['config.sh', 'config.csh']:
<             rcfile = join_path('etc', rcdir, 'settings')
---
>         for rcdir in ["config.sh", "config.csh"]:
>             rcfile = join_path("etc", rcdir, "settings")
597,603c605
<                 #AEG:saving original for easier installation debug
<                 save_original(rcfile)
<                 filter_file(
<                     'WM_PROJECT_INST_DIR/',
<                     'WM_PROJECT_DIR/',
<                     rcfile,
<                     backup=False)
---
>                 filter_file("WM_PROJECT_INST_DIR/", "WM_PROJECT_DIR/", rcfile, backup=False)
610,622c612
<         controlDict = 'etc/controlDict'
<         if os.path.exists(controlDict):
<             #AEG:saving original for easier installation debug
<             save_original(controlDict)
<             filter_file(r'trapFpe\s+\d+\s*;', 'trapFpe 0;',
<                         controlDict, backup=False)
< 
<     #AEG: Using this function to change the default controlDict settings to use collated filehandler
<     def configure_filehandler_collated(self):
<         """Enable filehandler collated by default
<         """
<         # Set 'fileHandler collated' in etc/controlDict
<         controlDict = 'etc/controlDict'
---
>         controlDict = "etc/controlDict"
624,687c614
<             #AEG:saving original for easier installation debug
<             save_original(controlDict)
<             filter_file(r'fileHandler.*;', 'fileHandler collated;',
<                         controlDict, backup=False)
< 
< #----
< #AEG: Specific settings for Pawsey
<     def make_pawsey_settings(self):
<         """Settings for Pawsey
<            This for when no @when applies!
<         """
<         tty.info('Nothing to do in this method for Pawsey settings')
< 
<     @when('@1812:')
<     def make_pawsey_settings(self):
<         """Settings for Pawsey
<            This for @1812:
<         """
<         tty.info('Calling the collated change:')
<         self.configure_filehandler_collated()
< 
<     @run_before('configure')
<     def call_make_pawsey_settings(self):
<         """Finally performing Pawsey Settings
<         """
<         tty.info('Calling the method "pawsey_settings":')
<         self.make_pawsey_settings()
< #-----
< #-----
<     #AEG: This dummy function is when no @when applies:
<     def make_pawsey_rules(self):
<         """Pawsey rules when no @when applies
<         """
<         tty.info('Nothing to do for the Pawsey rules when no @when applies')
< 
<     #AEG: The Pawsey Rules rules:
<     @when('@1812: %gcc')
<     def make_pawsey_rules(self):
<         """Create Pawsey rules (based on Cray original rules) unless supplied upstream.
<         """
<         compOrig = 'Cray' #This is the name of existing wmake/rules to be used as template for the new ones
<         compNew = 'CrayGcc' #This is the name to be used for the new wmake/rules
<         compOrigBaseGeneral = 'Gcc' #These are the rules/General used in the original wmake/rules above
<         #compNewBaseGeneral = 'Gcc' #These are the rules/General to be used in the new rules
< 
<         general_rules = 'wmake/rules/General'
<         arch_rules = 'wmake/rules/linux64'  # self.arch
<         src = arch_rules + compOrig
<         dst = arch_rules + compNew
<         #AEG: In theory, next line shoudl be used for clang based ones
<         #self.configure_trapFpe_off()  # LLVM may falsely trigger FPE
< 
<         if os.path.exists(dst):
<             return
< 
<         # Handle rules/<ARCH><COMP> or rules/<ARCH>/<COMP>
<         if not os.path.exists(src):
<             src = join_path(arch_rules, compOrig)
<             dst = join_path(arch_rules, compNew)
<             if os.path.exists(dst):
<                 return
< 
<         tty.info('Add Pawsey wmake rules')
<         copy_tree(src, dst)
---
>             filter_file(r"trapFpe\s+\d+\s*;", "trapFpe 0;", controlDict, backup=False)
689,705c616,627
<         if self.spec.version >= Version('1906'):
<             for cfg in ['c', 'c++', 'general']:
<                 rule = join_path(dst, cfg)
<                 #AEG:saving original for easier installation debug
<                 save_original(rule)
<                 filter_file(compOrig, compNew, rule, backup=False)
<         else:
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c'))
<             filter_file(compOrig, compNew, rule, backup=False)
<             filter_file(compOrigBaseGeneral, spack_cc, join_path(dst, 'c'),
<                         backup=False, string=True)
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c++'))
<             filter_file(compOrig, compNew, rule, backup=False)
<             filter_file(compOrigBaseGeneral + '++', spack_cxx, join_path(dst, 'c++'),
<                         backup=False, string=True)
---
>     @when("@:2106 %aocc@3.2.0:")
>     @run_before("configure")
>     def make_amd_rules(self):
>         """Due to the change in the linker behavior in AOCC v3.2, it is now
>         issuing diagnostic messages for the unreferenced symbols in the
>         shared objects as it may lead to run time failures.
>         """
>         general_rules = "wmake/rules/General"
>         src = join_path(general_rules, "Clang")
>         filter_file(
>             "clang++", spack_cxx + " -pthread", join_path(src, "c++"), backup=False, string=True
>         )
707,735c629,630
<         src = join_path(general_rules, compOrigBaseGeneral)
<         dst = join_path(general_rules, compNew)
<         copy_tree(src, dst)
<         if self.spec.version >= Version('1906'):
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c'))
<             filter_file(compOrigBaseGeneral, spack_cc, join_path(dst, 'c'),
<                         backup=False, string=True)
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c++'))
<             filter_file(compOrigBaseGeneral + '++', spack_cxx, join_path(dst, 'c++'),
<                         backup=False, string=True)
< 
<     #AEG: This additional function was needed for correct logic when using @when(@1812: %fj) for the fujitsu
<     @run_before('configure')
<     def call_make_pawsey_rules(self):
<         """Calling the correct Pawsey rules with @when
<         """
<         self.make_pawsey_rules()
< #-----
< #-----
<     #AEG: This additional function was needed for correct logic when using @when(@1812: %fj) for the fujitsu
<     def make_fujitsu_rules(self):
<         """Fujitsu rules when no @when applies
<         """
<         tty.info('Nothing to do for the fujitsu rules when no @when applies')
< 
<     #AEG: Original function for the fujitsu rules:
<     @when('@1812: %fj')
---
>     @when("@1812: %fj")
>     @run_before("configure")
741,744c636,639
<         general_rules = 'wmake/rules/General'
<         arch_rules = 'wmake/rules/linuxARM64'  # self.arch
<         src = arch_rules + 'Clang'
<         dst = arch_rules + 'Fujitsu2'  # self.compiler
---
>         general_rules = "wmake/rules/General"
>         arch_rules = "wmake/rules/linuxARM64"  # self.arch
>         src = arch_rules + "Clang"
>         dst = arch_rules + "Fujitsu"  # self.compiler
752,753c647,648
<             src = join_path(arch_rules, 'Clang')
<             dst = join_path(arch_rules, 'Fujitsu')  # self.compiler
---
>             src = join_path(arch_rules, "Clang")
>             dst = join_path(arch_rules, "Fujitsu")  # self.compiler
757c652
<         tty.info('Add Fujitsu wmake rules')
---
>         tty.info("Add Fujitsu wmake rules")
760,761c655,656
<         if self.spec.version >= Version('1906'):
<             for cfg in ['c', 'c++', 'general']:
---
>         if self.spec.version >= Version("1906"):
>             for cfg in ["c", "c++", "general"]:
763,765c658
<                 #AEG:saving original for easier installation debug
<                 save_original(rule)
<                 filter_file('Clang', 'Fujitsu', rule, backup=False)
---
>                 filter_file("Clang", "Fujitsu", rule, backup=False)
767,774c660,661
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c'))
<             filter_file('clang', spack_cc, join_path(dst, 'c'),
<                         backup=False, string=True)
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c++'))
<             filter_file('clang++', spack_cxx, join_path(dst, 'c++'),
<                         backup=False, string=True)
---
>             filter_file("clang", spack_cc, join_path(dst, "c"), backup=False, string=True)
>             filter_file("clang++", spack_cxx, join_path(dst, "c++"), backup=False, string=True)
776,777c663,664
<         src = join_path(general_rules, 'Clang')
<         dst = join_path(general_rules, 'Fujitsu')  # self.compiler
---
>         src = join_path(general_rules, "Clang")
>         dst = join_path(general_rules, "Fujitsu")  # self.compiler
779,795c666,668
<         if self.spec.version >= Version('1906'):
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c'))
<             filter_file('clang', spack_cc, join_path(dst, 'c'),
<                         backup=False, string=True)
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c++'))
<             filter_file('clang++', spack_cxx, join_path(dst, 'c++'),
<                         backup=False, string=True)
< 
<     #AEG: This additional function was needed for correct logic when using @when(@1812: %fj) for the fujitsu
<     @run_before('configure')
<     def call_make_fujitsu_rules(self):
<         """Calling the correct fujitsu rules with @when
<         """
<         self.make_fujitsu_rules()
< #-----
---
>         if self.spec.version >= Version("1906"):
>             filter_file("clang", spack_cc, join_path(dst, "c"), backup=False, string=True)
>         filter_file("clang++", spack_cxx, join_path(dst, "c++"), backup=False, string=True)
803d675
<         
808,810c680,681
<             edits,
<             posix=join_path('etc', 'bashrc'),
<             cshell=join_path('etc', 'cshrc'))
---
>             edits, posix=join_path("etc", "bashrc"), cshell=join_path("etc", "cshrc")
>         )
821c692
<         user_mpi = mplib_content(spec, '${MPI_ARCH_PATH}')
---
>         user_mpi = mplib_content(spec, "${MPI_ARCH_PATH}")
825,838c696,707
<             'CGAL': [
<                 #AEG: Adding the GMP and MPFR pieces
<                 ('boost_version', 'boost_system'),
<                 ('cgal_version', 'cgal_system'),
<                 ('BOOST_ARCH_PATH', spec['boost'].prefix),
<                 ('CGAL_ARCH_PATH',  spec['cgal'].prefix),
<                 ('GMP_ARCH_PATH',  spec['gmp'].prefix),
<                 ('MPFR_ARCH_PATH',  spec['mpfr'].prefix),
<                 ('LD_LIBRARY_PATH',
<                  foam_add_lib(
<                      pkglib(spec['boost'], '${BOOST_ARCH_PATH}'),
<                      pkglib(spec['cgal'], '${CGAL_ARCH_PATH}'),
<                      pkglib(spec['gmp'], '${GMP_ARCH_PATH}'),
<                      pkglib(spec['mpfr'], '${MPFR_ARCH_PATH}'))),
---
>             "CGAL": [
>                 ("BOOST_ARCH_PATH", spec["boost"].prefix),
>                 ("CGAL_ARCH_PATH", spec["cgal"].prefix),
>                 ("MPFR_ARCH_PATH", spec["mpfr"].prefix),
>                 (
>                     "LD_LIBRARY_PATH",
>                     foam_add_lib(
>                         pkglib(spec["boost"], "${BOOST_ARCH_PATH}"),
>                         pkglib(spec["cgal"], "${CGAL_ARCH_PATH}"),
>                         pkglib(spec["mpfr"], "${MPFR_ARCH_PATH}"),
>                     ),
>                 ),
840,844c709,711
<             'FFTW': [
<                 ('FFTW_ARCH_PATH', spec['fftw-api'].prefix),  # Absolute
<                 ('LD_LIBRARY_PATH',
<                  foam_add_lib(
<                      pkglib(spec['fftw-api'], '${BOOST_ARCH_PATH}'))),
---
>             "FFTW": [
>                 ("FFTW_ARCH_PATH", spec["fftw-api"].prefix),  # Absolute
>                 ("LD_LIBRARY_PATH", foam_add_lib(pkglib(spec["fftw-api"], "${BOOST_ARCH_PATH}"))),
847,850c714,717
<             'mpi-user': [
<                 ('MPI_ARCH_PATH', spec['mpi'].prefix),  # Absolute
<                 ('LD_LIBRARY_PATH', foam_add_lib(user_mpi['libdir'])),
<                 ('PATH', foam_add_path(user_mpi['bindir'])),
---
>             "mpi-user": [
>                 ("MPI_ARCH_PATH", spec["mpi"].prefix),  # Absolute
>                 ("LD_LIBRARY_PATH", foam_add_lib(user_mpi["libdir"])),
>                 ("PATH", foam_add_path(user_mpi["bindir"])),
852,859c719,726
<             'adios2': {},
<             'scotch': {},
<             'kahip': {},
<             'metis': {},
<             'ensight': {},     # Disable settings
<             'paraview': [],
<             'gperftools': [],  # Disable settings
<             'vtk': [],
---
>             "adios2": {},
>             "scotch": {},
>             "kahip": {},
>             "metis": {},
>             "ensight": {},  # Disable settings
>             "paraview": [],
>             "gperftools": [],  # Disable settings
>             "vtk": [],
863,868c730,734
<         if spec.satisfies('@1912:'):
<             self.etc_config['adios2'] = [
<                 ('ADIOS2_ARCH_PATH', spec['adios2'].prefix),
<                 ('LD_LIBRARY_PATH',
<                  foam_add_lib(pkglib(spec['adios2'], '${ADIOS2_ARCH_PATH}'))),
<                 ('PATH', foam_add_path('${ADIOS2_ARCH_PATH}/bin')),
---
>         if spec.satisfies("@1912:"):
>             self.etc_config["adios2"] = [
>                 ("ADIOS2_ARCH_PATH", spec["adios2"].prefix),
>                 ("LD_LIBRARY_PATH", foam_add_lib(pkglib(spec["adios2"], "${ADIOS2_ARCH_PATH}"))),
>                 ("PATH", foam_add_path("${ADIOS2_ARCH_PATH}/bin")),
871,873c737,739
<         if '+scotch' in spec:
<             self.etc_config['scotch'] = {
<                 'SCOTCH_ARCH_PATH': spec['scotch'].prefix,
---
>         if "+scotch" in spec:
>             self.etc_config["scotch"] = {
>                 "SCOTCH_ARCH_PATH": spec["scotch"].prefix,
875c741
<                 'SCOTCH_VERSION': 'scotch-{0}'.format(spec['scotch'].version),
---
>                 "SCOTCH_VERSION": "scotch-{0}".format(spec["scotch"].version),
878,881c744,745
<         if '+kahip' in spec:
<             self.etc_config['kahip'] = {
<                 'KAHIP_ARCH_PATH': spec['kahip'].prefix,
<             }
---
>         if "+kahip" in spec:
>             self.etc_config["kahip"] = {"KAHIP_ARCH_PATH": spec["kahip"].prefix}
883,886c747,748
<         if '+metis' in spec:
<             self.etc_config['metis'] = {
<                 'METIS_ARCH_PATH': spec['metis'].prefix,
<             }
---
>         if "+metis" in spec:
>             self.etc_config["metis"] = {"METIS_ARCH_PATH": spec["metis"].prefix}
889,895c751,757
<         if '+paraview' in spec:
<             pvmajor = 'paraview-{0}'.format(spec['paraview'].version.up_to(2))
<             self.etc_config['paraview'] = [
<                 ('ParaView_DIR', spec['paraview'].prefix),
<                 ('ParaView_INCLUDE_DIR', '${ParaView_DIR}/include/' + pvmajor),
<                 ('PV_PLUGIN_PATH', '$FOAM_LIBBIN/' + pvmajor),
<                 ('PATH', foam_add_path('${ParaView_DIR}/bin')),
---
>         if "+paraview" in spec:
>             pvmajor = "paraview-{0}".format(spec["paraview"].version.up_to(2))
>             self.etc_config["paraview"] = [
>                 ("ParaView_DIR", spec["paraview"].prefix),
>                 ("ParaView_INCLUDE_DIR", "${ParaView_DIR}/include/" + pvmajor),
>                 ("PV_PLUGIN_PATH", "$FOAM_LIBBIN/" + pvmajor),
>                 ("PATH", foam_add_path("${ParaView_DIR}/bin")),
898,902c760,763
<         if '+vtk' in spec:
<             self.etc_config['vtk'] = [
<                 ('VTK_DIR', spec['vtk'].prefix),
<                 ('LD_LIBRARY_PATH',
<                  foam_add_lib(pkglib(spec['vtk'], '${VTK_DIR}'))),
---
>         if "+vtk" in spec:
>             self.etc_config["vtk"] = [
>                 ("VTK_DIR", spec["vtk"].prefix),
>                 ("LD_LIBRARY_PATH", foam_add_lib(pkglib(spec["vtk"], "${VTK_DIR}"))),
906,909c767,768
<         if '+mgridgen' in spec:
<             self.etc_config['mgridgen'] = {
<                 'MGRIDGEN_ARCH_PATH': spec['parmgridgen'].prefix
<             }
---
>         if "+mgridgen" in spec:
>             self.etc_config["mgridgen"] = {"MGRIDGEN_ARCH_PATH": spec["parmgridgen"].prefix}
912,915c771,772
<         if '+zoltan' in spec:
<             self.etc_config['zoltan'] = {
<                 'ZOLTAN_ARCH_PATH': spec['zoltan'].prefix
<             }
---
>         if "+zoltan" in spec:
>             self.etc_config["zoltan"] = {"ZOLTAN_ARCH_PATH": spec["zoltan"].prefix}
922,923c779,781
<                 posix=join_path('etc', 'prefs.sh'),
<                 cshell=join_path('etc', 'prefs.csh'))
---
>                 posix=join_path("etc", "prefs.sh"),
>                 cshell=join_path("etc", "prefs.csh"),
>             )
929,930c787,789
<                 posix=join_path('etc', 'config.sh',  component),
<                 cshell=join_path('etc', 'config.csh', component))
---
>                 posix=join_path("etc", "config.sh", component),
>                 cshell=join_path("etc", "config.csh", component),
>             )
940c799
<         args = ['-silent']
---
>         args = ["-silent"]
942c801
<             args.append('-j{0}'.format(make_jobs))
---
>             args.append("-j{0}".format(make_jobs))
951,954c810,811
<         edits = {
<             'WM_PROJECT_DIR': self.projectdir,
<         }
<         etc_dir = join_path(self.projectdir, 'etc')
---
>         edits = {"WM_PROJECT_DIR": self.projectdir}
>         etc_dir = join_path(self.projectdir, "etc")
956,958c813,814
<             edits,
<             posix=join_path(etc_dir, 'bashrc'),
<             cshell=join_path(etc_dir, 'cshrc'))
---
>             edits, posix=join_path(etc_dir, "bashrc"), cshell=join_path(etc_dir, "cshrc")
>         )
960c816
<     @when('@:1806')
---
>     @when("@:1806")
971,972c827,828
<             'WM_PROJECT_INST_DIR': os.path.dirname(self.projectdir),
<             'WM_PROJECT_DIR': join_path('$WM_PROJECT_INST_DIR', projdir),
---
>             "WM_PROJECT_INST_DIR": os.path.dirname(self.projectdir),
>             "WM_PROJECT_DIR": join_path("$WM_PROJECT_INST_DIR", projdir),
974c830
<         etc_dir = join_path(self.projectdir, 'etc')
---
>         etc_dir = join_path(self.projectdir, "etc")
976,978c832,833
<             edits,
<             posix=join_path(etc_dir, 'bashrc'),
<             cshell=join_path(etc_dir, 'cshrc'))
---
>             edits, posix=join_path(etc_dir, "bashrc"), cshell=join_path(etc_dir, "cshrc")
>         )
985,986c840,841
<         if '+source' in spec:
<             ignored = re.compile(r'^spack-.*')
---
>         if "+source" in spec:
>             ignored = re.compile(r"^spack-.*")
988c843
<             ignored = re.compile(r'^(Allwmake|spack-).*')
---
>             ignored = re.compile(r"^(Allwmake|spack-).*")
990,993c845
<         files = [
<             f for f in glob.glob("*")
<             if os.path.isfile(f) and not ignored.search(f)
<         ]
---
>         files = [f for f in glob.glob("*") if os.path.isfile(f) and not ignored.search(f)]
1000,1002c852,854
<         dirs = ['META-INFO', 'etc', 'bin', 'wmake']
<         if '+source' in spec:
<             dirs.extend(['applications', 'src', 'tutorials'])
---
>         dirs = ["META-INFO", "etc", "bin", "wmake"]
>         if "+source" in spec:
>             dirs.extend(["applications", "src", "tutorials"])
1006,1013c858,862
<                 install_tree(
<                     d,
<                     join_path(self.projectdir, d),
<                     symlinks=True)
< 
<         dirs = ['platforms']
<         if '+source' in spec:
<             dirs.extend(['doc'])
---
>                 install_tree(d, join_path(self.projectdir, d), symlinks=True)
> 
>         dirs = ["platforms"]
>         if "+source" in spec:
>             dirs.extend(["doc"])
1016c865
<         relative_ignore_paths = ['src', 'applications', 'html', 'Guides']
---
>         relative_ignore_paths = ["src", "applications", "html", "Guides"]
1019,1023c868
<             install_tree(
<                 d,
<                 join_path(self.projectdir, d),
<                 ignore=ignore,
<                 symlinks=True)
---
>             install_tree(d, join_path(self.projectdir, d), ignore=ignore, symlinks=True)
1034c879,880
<                 join_path('log.' + str(self.foam_arch)))
---
>                 join_path("log." + str(self.foam_arch)),
>             )
1036c882
<         if not self.config['link']:
---
>         if not self.config["link"]:
1042c888
<                 os.symlink(self.archlib, 'lib')
---
>                 os.symlink(self.archlib, "lib")
1045c891
<         with working_dir(join_path(self.projectdir, 'bin')):
---
>         with working_dir(join_path(self.projectdir, "bin")):
1047,1048c893
<                 f for f in glob.glob(join_path('..', self.archbin, "*"))
<                 if os.path.isfile(f)
---
>                 f for f in glob.glob(join_path("..", self.archbin, "*")) if os.path.isfile(f)
1055c900,901
< class OpenfoamArch(object):
---
> 
> class OpenfoamArch:
1067,1068c913
<     compiler_mapping = {'aocc': 'Amd', 'fj': 'Fujitsu',
<                         'intel': 'Icc', 'oneapi': 'Icx'}
---
>     compiler_mapping = {"aocc": "Amd", "fj": "Fujitsu", "intel": "Icc", "oneapi": "Icx"}
1072,1079c917,924
<         self.compiler         = None   # <- %compiler
<         self.arch_option      = ''     # Eg, -march=knl
<         self.label_size       = None   # <- +int64
<         self.precision_option = 'DP'   # <- +float32 | +spdp
<         self.compile_option   = kwargs.get('compile-option', '-spack')
<         self.arch             = None
<         self.options          = None
<         self.mplib            = kwargs.get('mplib', 'USERMPI')
---
>         self.compiler = None  # <- %compiler
>         self.arch_option = ""  # Eg, -march=knl
>         self.label_size = None  # <- +int64
>         self.precision_option = "DP"  # <- precision= sp | dp | spdp
>         self.compile_option = kwargs.get("compile-option", "-spack")
>         self.arch = None
>         self.options = None
>         self.mplib = kwargs.get("mplib", "USERMPI")
1082,1085c927,930
<         if '+int64' in spec:
<             self.label_size = '64'
<         elif kwargs.get('label-size', True):
<             self.label_size = '32'
---
>         if "+int64" in spec:
>             self.label_size = "64"
>         elif kwargs.get("label-size", True):
>             self.label_size = "32"
1088,1091c933,936
<         if '+spdp' in spec:
<             self.precision_option = 'SPDP'
<         elif '+float32' in spec:
<             self.precision_option = 'SP'
---
>         if "precision=sp" in spec:
>             self.precision_option = "SP"
>         elif "precision=spdp" in spec:
>             self.precision_option = "SPDP"
1094,1095c939,940
<         if '+knl' in spec:
<             self.arch_option = '-march=knl'
---
>         if "+knl" in spec:
>             self.arch_option = "-march=knl"
1104,1112c949
<         #AEG: updating the compiler if installing in a Cray:
<         plat = str(spec.architecture.platform)
<         tty.info('Spack Platform is set to {0}'.format(plat))
<         tty.info('Current compiler is set to {0}'.format(comp))
<         if plat == 'cray':
<             self.compiler = plat.capitalize() + comp.capitalize()
<         else:
<             self.compiler = comp.capitalize()
<         tty.info('Now compiler is set to {0}'.format(str(self.compiler)))
---
>         self.compiler = comp.capitalize()
1117,1118c954
<         """Set WM_ARCH string corresponding to spack platform/target
<         """
---
>         """Set WM_ARCH string corresponding to spack platform/target"""
1121,1125d956
<         #AEG:Redefining platform to use rules as linuxXX<Compiler> instead of original problematic "cray<Compiler>"
<         tty.info('Spack defined platform is {0}'.format(platform))
<         if platform == 'cray':
<             platform = 'linux'
<             tty.info('Now platform is {0}'.format(platform))
1131,1138c962,969
<         if platform == 'linux':
<             if target == 'x86_64':
<                 platform += '64'
<             elif target == 'ia64':
<                 platform += 'IA64'
<             elif target == 'armv7l':
<                 platform += 'ARM7'
<             elif target == 'aarch64':
---
>         if platform == "linux":
>             if target == "x86_64":
>                 platform += "64"
>             elif target == "ia64":
>                 platform += "IA64"
>             elif target == "armv7l":
>                 platform += "ARM7"
>             elif target == "aarch64":
1140,1147c971,977
<                 platform += 'ARM64'
<             elif target == 'ppc64':
<                 platform += 'PPC64'
<             elif target == 'ppc64le':
<                 platform += 'PPC64le'
<         elif platform == 'darwin':
<             if target == 'x86_64':
<                 platform += '64'
---
>                 platform += "ARM64"
>             elif target == "ppc64":
>                 platform += "PPC64"
>             elif target == "ppc64le":
>                 platform += "PPC64le"
>         elif platform == "darwin":
>             platform += "64"  # aarch64 or x86_64
1152,1153c982
<         """Set WM_OPTIONS string consistent with current settings
<         """
---
>         """Set WM_OPTIONS string consistent with current settings"""
1162,1167c991,999
<         self.options = ''.join([
<             self.arch,
<             self.compiler,
<             self.precision_option,
<             ('Int' + self.label_size if self.label_size else ''),
<             self.compile_option])
---
>         self.options = "".join(
>             [
>                 self.arch,
>                 self.compiler,
>                 self.precision_option,
>                 ("Int" + self.label_size if self.label_size else ""),
>                 self.compile_option,
>             ]
>         )
1177,1183c1009,1017
<         return dict([
<             ('WM_COMPILER',    self.compiler),
<             ('WM_LABEL_SIZE',  self.label_size),
<             ('WM_PRECISION_OPTION', self.precision_option),
<             ('WM_COMPILE_OPTION', self.compile_option),
<             ('WM_MPLIB',       self.mplib),
<         ])
---
>         return dict(
>             [
>                 ("WM_COMPILER", self.compiler),
>                 ("WM_LABEL_SIZE", self.label_size),
>                 ("WM_PRECISION_OPTION", self.precision_option),
>                 ("WM_COMPILE_OPTION", self.compile_option),
>                 ("WM_MPLIB", self.mplib),
>             ]
>         )
1186c1020
<         """Return the wmake/rules/ General/common, General or
---
>         """Return wmake/rules/ General/common, General or
1190c1024
<         rules_dir = os.path.join(projdir, 'wmake', 'rules')
---
>         rules_dir = os.path.join(projdir, "wmake", "rules")
1192c1026
<             return os.path.join(rules_dir, 'General', 'common')
---
>             return os.path.join(rules_dir, "General", "common")
1194c1028
<             return os.path.join(rules_dir, 'General')
---
>             return os.path.join(rules_dir, "General")
1204,1205c1038
<         """Verify that a wmake/rules/ compiler rule exists in the project.
<         """
---
>         """Verify that a wmake/rules/ compiler rule exists in the project."""
1210,1213c1043
<             raise InstallError(
<                 #AEG:'No wmake rule for {0} {1}'.format(self.arch, self.compiler))
<                 'Failed to find the directory {0}\n'.format(rule_dir)
<                 + 'No wmake rule for {0} {1}'.format(self.arch, self.compiler))
---
>             raise InstallError("No wmake rule for {0} {1}".format(self.arch, self.compiler))
1232,1233c1062,1063
<             with open(src, 'r') as infile:
<                 with open(dst, 'w') as outfile:
---
>             with open(src, "r") as infile:
>                 with open(dst, "w") as outfile:
1237c1067
<                         if re.match(r'^\S+DBUG\s*:?=', line):
---
>                         if re.match(r"^\S+DBUG\s*:?=", line):
1240c1070
<                         elif re.match(r'^\S+OPT\s*:?=', line):
---
>                         elif re.match(r"^\S+OPT\s*:?=", line):
1242c1072
<                                 outfile.write(' ')
---
>                                 outfile.write(" ")
1244c1074
<                         outfile.write('\n')
---
>                         outfile.write("\n")
1248c1078
<         """ Create {c,c++}-spack and mplib{USERMPI} rules in the
---
>         """Create {c,c++}-spack and mplib{USERMPI} rules in the
1262,1264c1092,1094
<         rpath = '{0}{1}'.format(
<             foam_pkg.compiler.cxx_rpath_arg,
<             join_path(foam_pkg.projectdir, foam_pkg.archlib))
---
>         rpath = "{0}{1}".format(
>             foam_pkg.compiler.cxx_rpath_arg, join_path(foam_pkg.projectdir, foam_pkg.archlib)
>         )
1273,1276c1103,1106
<         for lang in ['c', 'c++']:
<             gen = join_path(comm_dir, '{0}Opt'.format(lang))
<             src = join_path(rule_dir, '{0}Opt'.format(lang))
<             dst = join_path(rule_dir, '{0}{1}'.format(lang, self.compile_option))
---
>         for lang in ["c", "c++"]:
>             gen = join_path(comm_dir, "{0}Opt".format(lang))
>             src = join_path(rule_dir, "{0}Opt".format(lang))
>             dst = join_path(rule_dir, "{0}{1}".format(lang, self.compile_option))
1283,1285c1113,1116
<             for mplib in ['mplibUSERMPI']:
<                 with open(mplib, 'w') as out:
<                     out.write("""# MPI from spack ({name})\n
---
>             for mplib in ["mplibUSERMPI"]:
>                 with open(mplib, "w") as out:
>                     out.write(
>                         """# MPI from spack ({name})\n
1290c1121,1125
< """.format(**user_mpi))
---
> """.format(
>                             **user_mpi
>                         )
>                     )
> 
###### DIFF perl
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
6,15d5
< #
< # Author: Milton Woods <milton.woods@bom.gov.au>
< # Date: March 22, 2017
< # Author: George Hartzell <hartzell@alerce.com>
< # Date: July 21, 2016
< # Author: Justin Too <justin@doubleotoo.com>
< # Date: September 6, 2015
< #
< 
< #pawsey additions  - flag_handler function to handle cce
20a11
> from llnl.util.filesystem import windows_sfn
35c26
<     tags = ["windows"]
---
>     tags = ["windows", "build-tools"]
38a30,31
>     license("Artistic-1.0-Perl OR GPL-1.0-or-later")
> 
44,59c37,45
<     # Maintenance releases (even numbers, preferred)
<     version(
<         "5.38.0",
<         sha256="213ef58089d2f2c972ea353517dc60ec3656f050dcc027666e118b508423e517",
<         preferred=True,
<     )
<     version(
<         "5.36.1",
<         sha256="68203665d8ece02988fc77dc92fccbb297a83a4bb4b8d07558442f978da54cc1",
<         preferred=True,
<     )
<     version(
<         "5.36.0",
<         sha256="e26085af8ac396f62add8a533c3a0ea8c8497d836f0689347ac5abd7b7a4e00a",
<         preferred=True,
<     )
---
>     # Maintenance releases (even numbers)
>     version("5.40.0", sha256="c740348f357396327a9795d3e8323bafd0fe8a5c7835fc1cbaba0cc8dfe7161f")
>     version("5.38.2", sha256="a0a31534451eb7b83c7d6594a497543a54d488bc90ca00f5e34762577f40655e")
>     version("5.38.0", sha256="213ef58089d2f2c972ea353517dc60ec3656f050dcc027666e118b508423e517")
>     version("5.36.3", sha256="f2a1ad88116391a176262dd42dfc52ef22afb40f4c0e9810f15d561e6f1c726a")
>     version("5.36.1", sha256="68203665d8ece02988fc77dc92fccbb297a83a4bb4b8d07558442f978da54cc1")
>     version("5.36.0", sha256="e26085af8ac396f62add8a533c3a0ea8c8497d836f0689347ac5abd7b7a4e00a")
> 
>     # End of life releases (deprecated)
63c49
<         preferred=True,
---
>         deprecated=True,
68c54
<         preferred=True,
---
>         deprecated=True,
73c59
<         preferred=True,
---
>         deprecated=True,
78c64
<         preferred=True,
---
>         deprecated=True,
83c69
<         preferred=True,
---
>         deprecated=True,
88c74
<         preferred=True,
---
>         deprecated=True,
93c79
<         preferred=True,
---
>         deprecated=True,
98c84,139
<         preferred=True,
---
>         deprecated=True,
>     )
>     version(
>         "5.28.0",
>         sha256="7e929f64d4cb0e9d1159d4a59fc89394e27fa1f7004d0836ca0d514685406ea8",
>         deprecated=True,
>     )
>     version(
>         "5.26.2",
>         sha256="572f9cea625d6062f8a63b5cee9d3ee840800a001d2bb201a41b9a177ab7f70d",
>         deprecated=True,
>     )
>     version(
>         "5.24.1",
>         sha256="e6c185c9b09bdb3f1b13f678999050c639859a7ef39c8cad418448075f5918af",
>         deprecated=True,
>     )
>     version(
>         "5.22.4",
>         sha256="ba9ef57c2b709f2dad9c5f6acf3111d9dfac309c484801e0152edbca89ed61fa",
>         deprecated=True,
>     )
>     version(
>         "5.22.3",
>         sha256="1b351fb4df7e62ec3c8b2a9f516103595b2601291f659fef1bbe3917e8410083",
>         deprecated=True,
>     )
>     version(
>         "5.22.2",
>         sha256="81ad196385aa168cb8bd785031850e808c583ed18a7901d33e02d4f70ada83c2",
>         deprecated=True,
>     )
>     version(
>         "5.22.1",
>         sha256="2b475d0849d54c4250e9cba4241b7b7291cffb45dfd083b677ca7b5d38118f27",
>         deprecated=True,
>     )
>     version(
>         "5.22.0",
>         sha256="0c690807f5426bbd1db038e833a917ff00b988bf03cbf2447fa9ffdb34a2ab3c",
>         deprecated=True,
>     )
>     version(
>         "5.20.3",
>         sha256="3524e3a76b71650ab2f794fd68e45c366ec375786d2ad2dca767da424bbb9b4a",
>         deprecated=True,
>     )
>     version(
>         "5.18.4",
>         sha256="01a4e11a9a34616396c4a77b3cef51f76a297e1a2c2c490ae6138bf0351eb29f",
>         deprecated=True,
>     )
>     version(
>         "5.16.3",
>         sha256="69cf08dca0565cec2c5c6c2f24b87f986220462556376275e5431cc2204dedb6",
>         deprecated=True,
102,119c143,170
<     version("5.37.9", sha256="9884fa8a4958bf9434b50f01cbfd187f9e2738f38fe1ae37f844e9950c5117c1")
<     version("5.35.0", sha256="d6c0eb4763d1c73c1d18730664d43fcaf6100c31573c3b81e1504ec8f5b22708")
<     version("5.33.3", sha256="4f4ba0aceb932e6cf7c05674d05e51ef759d1c97f0685dee65a8f3d190f737cd")
<     version("5.31.7", sha256="d05c4e72128f95ef6ffad42728ecbbd0d9437290bf0f88268b51af011f26b57d")
<     version("5.31.4", sha256="418a7e6fe6485cc713a86d1227ef112f0bb3f80322e3b715ffe42851d97804a5")
< 
<     # End of life releases
<     version("5.28.0", sha256="7e929f64d4cb0e9d1159d4a59fc89394e27fa1f7004d0836ca0d514685406ea8")
<     version("5.26.2", sha256="572f9cea625d6062f8a63b5cee9d3ee840800a001d2bb201a41b9a177ab7f70d")
<     version("5.24.1", sha256="e6c185c9b09bdb3f1b13f678999050c639859a7ef39c8cad418448075f5918af")
<     version("5.22.4", sha256="ba9ef57c2b709f2dad9c5f6acf3111d9dfac309c484801e0152edbca89ed61fa")
<     version("5.22.3", sha256="1b351fb4df7e62ec3c8b2a9f516103595b2601291f659fef1bbe3917e8410083")
<     version("5.22.2", sha256="81ad196385aa168cb8bd785031850e808c583ed18a7901d33e02d4f70ada83c2")
<     version("5.22.1", sha256="2b475d0849d54c4250e9cba4241b7b7291cffb45dfd083b677ca7b5d38118f27")
<     version("5.22.0", sha256="0c690807f5426bbd1db038e833a917ff00b988bf03cbf2447fa9ffdb34a2ab3c")
<     version("5.20.3", sha256="3524e3a76b71650ab2f794fd68e45c366ec375786d2ad2dca767da424bbb9b4a")
<     version("5.18.4", sha256="01a4e11a9a34616396c4a77b3cef51f76a297e1a2c2c490ae6138bf0351eb29f")
<     version("5.16.3", sha256="69cf08dca0565cec2c5c6c2f24b87f986220462556376275e5431cc2204dedb6")
---
>     version("5.39.10", sha256="4b7ffb3e068583fa5c8413390c998b2c15214f205ce737acc485b40932b9f419")
>     version(
>         "5.37.9",
>         sha256="9884fa8a4958bf9434b50f01cbfd187f9e2738f38fe1ae37f844e9950c5117c1",
>         deprecated=True,
>     )
>     version(
>         "5.35.0",
>         sha256="d6c0eb4763d1c73c1d18730664d43fcaf6100c31573c3b81e1504ec8f5b22708",
>         deprecated=True,
>     )
>     version(
>         "5.33.3",
>         sha256="4f4ba0aceb932e6cf7c05674d05e51ef759d1c97f0685dee65a8f3d190f737cd",
>         deprecated=True,
>     )
>     version(
>         "5.31.7",
>         sha256="d05c4e72128f95ef6ffad42728ecbbd0d9437290bf0f88268b51af011f26b57d",
>         deprecated=True,
>     )
>     version(
>         "5.31.4",
>         sha256="418a7e6fe6485cc713a86d1227ef112f0bb3f80322e3b715ffe42851d97804a5",
>         deprecated=True,
>     )
> 
>     depends_on("c", type="build")  # generated
123a175
>         depends_on("gmake", type="build")
289c341
<         args.append("INST_TOP=%s" % self.prefix.replace("/", "\\"))
---
>         args.append("INST_TOP=%s" % windows_sfn(self.prefix.replace("/", "\\")))
369a422
>             win32_dir = windows_sfn(win32_dir)
377a431
>             win32_dir = windows_sfn(win32_dir)
410a465
>             cpan_dir = windows_sfn(cpan_dir)
453,456d507
<             # Make the site packages directory for extensions,
<             # if it does not exist already.
<             mkdirp(module.perl_lib_dir)
< 
579,586d629
< 
<     def flag_handler(self, name, flags):
<         if name == "cflags":
<             if self.spec.satisfies("%cce"):
<                 flags.append("-Wno-error=implicit-int -Wno-error=implicit-function-declaration -Wno-error=incompatible-function-pointer-types -Wno-error=int-conversion")
<         return flags, None, None
< 
< 
###### DIFF pocl
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5c5
< #added versioon 4.0
---
> 
21a22,23
>     license("MIT")
> 
23,24c25
<     version("4.0", sha256="7f4e8ab608b3191c2b21e3f13c193f1344b40aba7738f78762f7b88f45e8ce03")
<     version("3.0", sha256="5f6bbc391ba144bc7becc3b90888b25468460d5aa6830f63a3b066137e7bfac3")
---
>     version("3.0", sha256="a3fd3889ef7854b90b8e4c7899c5de48b7494bf770e39fba5ad268a5cbcc719d")
34a36,38
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
> 
51d54
<     depends_on("llvm @14:15", when="@4.0")
###### DIFF presto
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5a6
> 
9,34c10,27
< class Presto(MesonPackage):
<     """
<     PRESTO is a large suite of pulsar search and analysis software developed primarily by Scott 
<     Ransom mostly from scratch, and released under the GPL (v2). It was primarily designed to 
<     efficiently search for binary millisecond pulsars from long observations of globular 
<     clusters (although it has since been used in several surveys with short integrations and to 
<     process a lot of X-ray data as well). It is written primarily in ANSI C, with many of the 
<     recent routines in Python. According to Steve Eikenberry, PRESTO stands for: PulsaR 
<     Exploration and Search TOolkit!
<     """
<     homepage = "http://www.cv.nrao.edu/~sransom/presto"
<     git = "https://github.com/scottransom/presto.git"
< 
<     maintainers("dipietrantonio")
< 
<     license("GPL-2")
< 
<     version("5.0.1", tag="v5.0.1")
< 
<     depends_on("glib")
<     depends_on("fftw-api@3:")
<     depends_on("pgplot")
<     depends_on("cfitsio")
<     depends_on("libpng")
<     depends_on("python@3.6:")
<  
---
> class Presto(MavenPackage):
>     """Presto is a distributed SQL query engine for big data."""
> 
>     homepage = "https://prestodb.io/"
>     url = "https://github.com/prestodb/presto/archive/0.239.tar.gz"
> 
>     license("Apache-2.0")
> 
>     version("0.239", sha256="cff738eecf9e4e0bb58a9b0366053a328c4ac4e72d3e8209e8c654f6e1b8985f")
>     version("0.238.2", sha256="cb79311cb27695e00108c84c6e135c0b1f8ffb631013c2b25ed8565f9cf1b71f")
>     version("0.238.1", sha256="4b811af887fc2dd38cfa36355d6a47c234a600f51e908dc9b59e24a5407b3620")
>     version("0.238", sha256="89733c79eac750d401007bc4d1eb2d61aba725b3eaaa3421782443553799e7c9")
>     version("0.237.2", sha256="3547328e1757956f8c46d4f5ad12d903f71da1ffed41bb39e6f24c4d4b056040")
>     version("0.237.1", sha256="c613c04ef97cf90eb390379cc6efa9ec65aac41a3d8f4863f9567597c6a2ec21")
>     version("0.237", sha256="4a19b384eb6bd8ecb020a18b8fa8f6f2105489d1891a2909f53f4e2c20c12699")
>     version("0.236.1", sha256="571c74c0b84ee515750c129eb5de1fbac09cd4d028943d9df99c8e89909c83f4")
>     version("0.236", sha256="6d4c1d79216d2530b64a7737a54c35e698ca738e42d77d086f036224b42b508e")
>     version("0.235.1", sha256="1353b2b8526bc2a365f70e9af7005e294cfff11d53285279b2f67048bb5511a0")
###### DIFF psrfits-utils
###### DIFF py-archspec
1c1
< # Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5d4
< # Can be removed
15c14
<     pypi = "archspec/archspec-0.1.1.tar.gz"
---
>     pypi = "archspec/archspec-0.2.0.tar.gz"
17c16
<     maintainers = ["alalazo"]
---
>     maintainers("alalazo")
19,22c18
<     version("0.1.3", sha256="a1aa7abde4d4ce38d115dfd572584906fa8e192e3272b8897e7b4fa1213ec27c")
<     version("0.1.2", sha256="8bb998370f0dc3e509d57c13724ab4109d761fd74af20da26fbe513b0fe01c46")
<     version("0.1.1", sha256="34bafad493b41208857232e21776216d716de37ab051a6a4a1cc1653f7e26423")
<     version("0.1.0", sha256="a4431d0bbe9c9dd7b293c39d8e7590034d512ce5f5a1278a6cbdf61b33f7202d")
---
>     license("Apache-2.0")
24c20,24
<     depends_on("python@2.7:2.8,3.5:", type=("build", "run"))
---
>     version("0.2.4", sha256="eabbae22f315d24cc2ce786a092478ec8e245208c9877fb213c2172a6ecb9302")
>     version("0.2.3", sha256="d07deb5b6e2ab3b74861e217523d02e69be8522f6e6565f4cc5d2062eb1a5d2c")
>     version("0.2.2", sha256="d922c9fd80a5234d8cef883fbe0e146b381c449062c0405f91714ebad1edc035")
>     version("0.2.1", sha256="0974a8a95831d2d43cce906c5b79a35d5fd2bf9be478b0e3b7d83ccc51ac815e")
>     version("0.2.0", sha256="6aaba5ebdb5c3633c400d8c221a6a18716da0c64b367a8509f4217b22e91a5f5")
26,29d25
<     depends_on("py-click@7.1.2:7", type=("build", "run"))
<     depends_on("py-six@1.13.0:1", type=("build", "run"))
< 
<     depends_on("py-setuptools", type="build")
31,37c27
< 
<     def patch(self):
<         # See https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
<         with working_dir(self.stage.source_path):
<             if self.spec.satisfies("@:0.1.3"):
<                 filter_file("poetry>=0.12", "poetry_core>=1.0.0", "pyproject.toml")
<                 filter_file("poetry.masonry.api", "poetry.core.masonry.api", "pyproject.toml")
---
>     depends_on("py-click@8", type=("build", "run"), when="@:0.2.0")
###### DIFF py-astropy
1c1
< # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,52d4
< # Differences for the 'py-astropy' package
< # 8c8
< # < from spack.package import *
< # ---
< # > from spack import *
< # 19,20d18
< # <     version('5.1', sha256='1db1b2c7eddfc773ca66fa33bd07b25d5b9c3b5eee2b934e0ca277fa5b1b7b7e')
< # <     version('4.2.1', sha256='ed483e472241153daec45f4b0c318c2c63d9f47305b78e6e63d32fc388c18427')
< # 44,46d41
< # <     depends_on('py-extension-helpers', when='@4.1:', type=('build', 'run'))
< # <     depends_on('py-jinja2', when='@4.1:', type=('build', 'run'))
< # <     depends_on('py-erfa', type=('build', 'run'))
< # 73,80c68,73
< # <     #def patch(self, spec):
< # <     #    # forces the rebuild of files with cython
< # <     #    # avoids issues with PyCode_New() in newer
< # <     #    # versions of python in the distributed
< # <     #    # cython-ized files
< # <     #    #if spec.satisifies('@1.0:4.0.1'):
< # <     #    #    os.remove('astropy/cython_version.py')
< # <     #    #os.remove('astropy/cython_version.py')
< # ---
< # >     def patch(self):
< # >         # forces the rebuild of files with cython
< # >         # avoids issues with PyCode_New() in newer
< # >         # versions of python in the distributed
< # >         # cython-ized files
< # >         os.remove('astropy/cython_version.py')
< # 83,91c76,82
< # <         args = []
< # <         if spec.satisfies('@1:4.0'):
< # <             args.extend([
< # <                 '--use-system-libraries',
< # <                 '--use-system-erfa',
< # <                 '--use-system-wcslib',
< # <                 '--use-system-cfitsio',
< # <                 '--use-system-expat',
< # <             ])
< # ---
< # >         args = [
< # >             '--use-system-libraries',
< # >             '--use-system-erfa',
< # >             '--use-system-wcslib',
< # >             '--use-system-cfitsio',
< # >             '--use-system-expat'
< # >         ]
< # 94a86
< # > 
54d5
< # Contribute dependency on py-erfa and spec.statisfies
65,66c16,30
<     homepage = 'https://astropy.org/'
<     pypi = 'astropy/astropy-4.0.1.post1.tar.gz'
---
>     homepage = "https://astropy.org/"
>     pypi = "astropy/astropy-4.0.1.post1.tar.gz"
>     git = "https://github.com/astropy/astropy.git"
> 
>     license("BSD-3-Clause")
> 
>     version("6.1.0", sha256="6c3b915f10b1576190730ddce45f6245f9927dda3de6e3f692db45779708950f")
>     version("5.1", sha256="1db1b2c7eddfc773ca66fa33bd07b25d5b9c3b5eee2b934e0ca277fa5b1b7b7e")
>     version(
>         "4.0.1.post1", sha256="5c304a6c1845ca426e7bc319412b0363fccb4928cb4ba59298acd1918eec44b5"
>     )
>     version("3.2.1", sha256="706c0457789c78285e5464a5a336f5f0b058d646d60f4e5f5ba1f7d5bf424b28")
>     version("2.0.14", sha256="618807068609a4d8aeb403a07624e9984f566adc0dc0f5d6b477c3658f31aeb6")
>     version("1.1.2", sha256="6f0d84cd7dfb304bb437dda666406a1d42208c16204043bc920308ff8ffdfad1")
>     version("1.1.post1", sha256="64427ec132620aeb038e4d8df94d6c30df4cc8b1c42a6d8c5b09907a31566a21")
68,74c32
<     version('5.1', sha256='1db1b2c7eddfc773ca66fa33bd07b25d5b9c3b5eee2b934e0ca277fa5b1b7b7e')
<     version('4.2.1', sha256='ed483e472241153daec45f4b0c318c2c63d9f47305b78e6e63d32fc388c18427')
<     version('4.0.1.post1', sha256='5c304a6c1845ca426e7bc319412b0363fccb4928cb4ba59298acd1918eec44b5')
<     version('3.2.1', sha256='706c0457789c78285e5464a5a336f5f0b058d646d60f4e5f5ba1f7d5bf424b28')
<     version('2.0.14', sha256='618807068609a4d8aeb403a07624e9984f566adc0dc0f5d6b477c3658f31aeb6')
<     version('1.1.2', sha256='6f0d84cd7dfb304bb437dda666406a1d42208c16204043bc920308ff8ffdfad1')
<     version('1.1.post1', sha256='64427ec132620aeb038e4d8df94d6c30df4cc8b1c42a6d8c5b09907a31566a21')
---
>     depends_on("c", type="build")  # generated
76c34
<     variant('extras', default=False, description='Enable extra functionality')
---
>     variant("all", default=False, when="@3.2:", description="Enable all functionality")
79,95c37,70
<     depends_on('python@3.6:', when='@4.0:', type=('build', 'run'))
<     depends_on('python@3.5:', when='@3.0:', type=('build', 'run'))
<     depends_on('python@2.7:2.8,3.4:', when='@2.0:', type=('build', 'run'))
<     depends_on('python@2.7:2.8,3.3:', when='@1.2:', type=('build', 'run'))
<     depends_on('python@2.6:', type=('build', 'run'))
<     depends_on('py-setuptools', type='build')
<     depends_on('py-cython@0.29.13:', type='build')
<     depends_on('py-numpy@1.16:', when='@4.0:', type=('build', 'run'))
<     depends_on('py-numpy@1.13:', when='@3.1:', type=('build', 'run'))
<     depends_on('py-numpy@1.10:', when='@3.0:', type=('build', 'run'))
<     depends_on('py-numpy@1.9:', when='@2.0:', type=('build', 'run'))
<     depends_on('py-numpy@1.7:', when='@1.2:', type=('build', 'run'))
<     depends_on('py-numpy', type=('build', 'run'))
<     depends_on('pkgconfig', type='build')
<     depends_on('py-extension-helpers', when='@4.1:', type=('build', 'run'))
<     depends_on('py-jinja2', when='@4.1:', type=('build', 'run'))
<     depends_on('py-erfa', type=('build', 'run'))
---
>     depends_on("python@3.10:", when="@6.1.0:", type=("build", "run"))
>     depends_on("python@3.8:", when="@5.1:", type=("build", "run"))
>     depends_on("py-setuptools", type="build")
>     depends_on("py-cython@0.29.13:", type="build")
>     depends_on("py-cython@0.29.30", when="@5.1:6.0", type="build")
>     depends_on("py-cython@3.0.0", when="@6.1.0:", type="build")
> 
>     # in newer pip versions --install-option does not exist
>     depends_on("py-pip@:23.0", type="build")
> 
>     depends_on("py-astropy-iers-data", when="@6:", type=("build", "run"))
>     depends_on("py-numpy@1.23:", when="@6.1:", type=("build", "run"))
>     depends_on("py-numpy@1.18:", when="@5.1:", type=("build", "run"))
>     depends_on("py-numpy@1.16:", when="@4.0:", type=("build", "run"))
>     depends_on("py-numpy@1.13:", when="@3.1:", type=("build", "run"))
>     depends_on("py-numpy@1.10:", when="@3.0:", type=("build", "run"))
>     depends_on("py-numpy@1.9:", when="@2.0:", type=("build", "run"))
>     depends_on("py-numpy@1.7:", when="@1.2:", type=("build", "run"))
>     depends_on("py-numpy", type=("build", "run"))
>     # https://github.com/astropy/astropy/issues/16200
>     depends_on("py-numpy@:1", when="@:6.0")
>     depends_on("py-packaging@19.0:", when="@5.1:", type=("build", "run"))
>     depends_on("py-pyyaml@3.13:", when="@5.1:", type=("build", "run"))
>     depends_on("py-pyerfa@2.0:", when="@5.1:", type=("build", "run"))
>     depends_on("py-pyerfa@2.0.1.1:", when="@6.1.0:", type=("build", "run"))
>     depends_on("py-setuptools-scm@6.2:", when="@5.1:", type="build")
>     depends_on("py-extension-helpers", when="@5.1:", type="build")
>     depends_on("pkgconfig", type="build")
> 
>     depends_on("py-pytest@7:", type="test")
>     depends_on("py-pytest-doctestplus@0.12:", type="test")
>     depends_on("py-pytest-astropy-header@0.2.1:", type="test")
>     depends_on("py-pytest-astropy@0.10:", type="test")
>     depends_on("py-pytest-xdist", type="test")
98,114c73,110
<     depends_on('py-scipy@0.18:', when='+extras', type=('build', 'run'))
<     depends_on('py-h5py', when='+extras', type=('build', 'run'))
<     depends_on('py-beautifulsoup4', when='+extras', type=('build', 'run'))
<     depends_on('py-html5lib', when='+extras', type=('build', 'run'))
<     depends_on('py-bleach', when='+extras', type=('build', 'run'))
<     depends_on('py-pyyaml', when='+extras', type=('build', 'run'))
<     depends_on('py-pandas', when='+extras', type=('build', 'run'))
<     depends_on('py-bintrees', when='+extras', type=('build', 'run'))
<     depends_on('py-sortedcontainers', when='+extras', type=('build', 'run'))
<     depends_on('py-pytz', when='+extras', type=('build', 'run'))
<     depends_on('py-jplephem', when='+extras', type=('build', 'run'))
<     depends_on('py-matplotlib@2.0:', when='+extras', type=('build', 'run'))
<     depends_on('py-scikit-image', when='+extras', type=('build', 'run'))
<     depends_on('py-mpmath', when='+extras', type=('build', 'run'))
<     depends_on('py-asdf@2.3:', when='+extras', type=('build', 'run'))
<     depends_on('py-bottleneck', when='+extras', type=('build', 'run'))
<     depends_on('py-pytest', when='+extras', type=('build', 'run'))
---
>     with when("+all"):
>         depends_on("py-scipy@1.8:", when="@6:", type=("build", "run"))
>         depends_on("py-scipy@1.3:", when="@5:", type=("build", "run"))
>         depends_on("py-scipy@0.18:", type=("build", "run"))
>         depends_on("py-matplotlib@3.3:", when="@6:", type=("build", "run"))
>         depends_on("py-matplotlib@3.1:", when="@5:", type=("build", "run"))
>         depends_on("py-matplotlib@2.1:", when="@4:", type=("build", "run"))
>         depends_on("py-matplotlib@2.0:", type=("build", "run"))
>         depends_on("py-certifi", when="@4.3:", type=("build", "run"))
>         depends_on("py-dask+array", when="@4.1:", type=("build", "run"))
>         depends_on("py-h5py", type=("build", "run"))
>         depends_on("py-pyarrow@5:", when="@5:", type=("build", "run"))
>         depends_on("py-beautifulsoup4", type=("build", "run"))
>         depends_on("py-html5lib", type=("build", "run"))
>         depends_on("py-bleach", type=("build", "run"))
>         depends_on("py-pandas", type=("build", "run"))
>         depends_on("py-sortedcontainers", type=("build", "run"))
>         depends_on("py-pytz", type=("build", "run"))
>         depends_on("py-jplephem", type=("build", "run"))
>         depends_on("py-mpmath", type=("build", "run"))
>         depends_on("py-asdf@2.10:", when="@5.1:", type=("build", "run"))
>         depends_on("py-asdf@2.5:", when="@4.0.1post1:", type=("build", "run"))
>         depends_on("py-asdf@2.3:", type=("build", "run"))
>         depends_on("py-bottleneck", type=("build", "run"))
>         depends_on("py-ipython@4.2:", when="@4.3:", type=("build", "run"))
>         depends_on("py-ipython", type=("build", "run"))
>         depends_on("py-pytest@7:", when="@5.0.2:", type=("build", "run"))
>         depends_on("py-pytest", type=("build", "run"))
>         depends_on("py-fsspec+http@2023.4:", when="@6.1:", type=("build", "run"))
>         depends_on("py-s3fs@2023.4:", when="@6.1:", type=("build", "run"))
>         depends_on("py-typing-extensions@3.10.0.1:", when="@5.0.2:", type=("build", "run"))
> 
>         # Historical optional dependencies
>         depends_on("py-pyyaml", when="@:5", type=("build", "run"))
>         depends_on("py-scikit-image", when="@:4.0", type=("build", "run"))
>         depends_on("py-bintrees", when="@:3.2.1", type=("build", "run"))
> 
>         conflicts("^py-matplotlib@3.4.0,3.5.2")
117,140c113,133
<     depends_on('erfa')
<     depends_on('wcslib')
<     depends_on('cfitsio')
<     depends_on('expat')
< 
<     #def patch(self, spec):
<     #    # forces the rebuild of files with cython
<     #    # avoids issues with PyCode_New() in newer
<     #    # versions of python in the distributed
<     #    # cython-ized files
<     #    #if spec.satisifies('@1.0:4.0.1'):
<     #    #    os.remove('astropy/cython_version.py')
<     #    #os.remove('astropy/cython_version.py')
< 
<     def build_args(self, spec, prefix):
<         args = []
<         if spec.satisfies('@1:4.0'):
<             args.extend([
<                 '--use-system-libraries',
<                 '--use-system-erfa',
<                 '--use-system-wcslib',
<                 '--use-system-cfitsio',
<                 '--use-system-expat',
<             ])
---
>     depends_on("erfa")
>     depends_on("wcslib")
>     depends_on("cfitsio@:3")
>     depends_on("expat")
> 
>     def patch(self):
>         # forces the rebuild of files with cython
>         # avoids issues with PyCode_New() in newer
>         # versions of python in the distributed
>         # cython-ized files
>         if os.path.exists("astropy/cython_version.py"):
>             os.remove("astropy/cython_version.py")
> 
>     def install_options(self, spec, prefix):
>         args = [
>             "--use-system-libraries",
>             "--use-system-erfa",
>             "--use-system-wcslib",
>             "--use-system-cfitsio",
>             "--use-system-expat",
>         ]
142,143d134
<         if spec.satisfies('^python@3:'):
<             args.extend(['-j', str(make_jobs)])
146c137
<     @run_after('install')
---
>     @run_after("install")
149,150c140,150
<         with working_dir('spack-test', create=True):
<             python('-c', 'import astropy; astropy.test()')
---
>         with working_dir("spack-test", create=True):
>             python("-c", "import astropy; astropy.test()")
> 
>     @property
>     def skip_modules(self):
>         modules = []
> 
>         if self.spec.satisfies("~extras"):
>             modules.append("astropy.visualization.wcsaxes")
> 
>         return modules
###### DIFF py-erfa
###### DIFF py-funcsigs
###### DIFF py-gevent
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5d4
< #PAWSEY Additions to handle cce compiler in flag_handler
16a16,17
>     license("MIT")
> 
21a23,24
>     depends_on("c", type="build")  # generated
> 
40a44,49
>     # https://github.com/gevent/gevent/issues/2031
>     conflicts(
>         "^py-cython@3.0.10",
>         when="@:23.9.0",
>         msg="py-gevent fails to build when using cython@3.0.10",
>     )
43c52
<     patch("icc.patch", when="%intel")
---
>     patch("icc.patch", when="@:21.12.0 %intel")
56c65
<             if self.spec.satisfies("%oneapi@2023:") or self.spec.satisfies("%cce"):
---
>             if self.spec.satisfies("%oneapi@2023:"):
57a67,68
>             if self.spec.compiler.name in ["intel", "oneapi"]:
>                 flags.append("-we147")
###### DIFF py-h5py
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5d4
< #PAWSEY Additions to handle cce compiler in flag_handler
18a18,19
>     license("BSD-3-Clause")
> 
19a21,23
>     version("3.11.0", sha256="7b7e8f78072a2edec87c9836f25f34203fd492a4475709a18b417a33cfb21fa9")
>     version("3.10.0", sha256="d93adc48ceeb33347eb24a634fb787efc7ae4644e6ea4ba733d099605045c049")
>     version("3.9.0", sha256="e604db6521c1e367c6bd7fad239c847f53cc46646f2d2651372d05ae5e95f817")
38a43,44
>     depends_on("c", type="build")  # generated
> 
43,44d48
<     depends_on("python@3.6:", type=("build", "run"), when="@3:3.1")
<     depends_on("python@3.7:", type=("build", "run"), when="@3.2:")
47,49c51,53
<     depends_on("py-cython@0.23:0", type="build", when="@:2")
<     depends_on("py-cython@0.29:0", type=("build"), when="@3:")
<     depends_on("py-cython@0.29.14:0", type=("build"), when="@3:3.7 ^python@3.8.0:3.8")
---
>     # h5py@3.11 can build with cython@3.x
>     depends_on("py-cython@0.29.31:3", type="build", when="@3.11:")
>     depends_on("py-cython@0.29.31:0", type="build", when="@3.9:3.10")
50a55,57
>     depends_on("py-cython@0.29.14:0", type=("build"), when="@3:3.7 ^python@3.8.0:3.8")
>     depends_on("py-cython@0.29:0", type=("build"), when="@3.0:3.10")
>     depends_on("py-cython@0.23:0", type="build", when="@:2")
52d58
<     depends_on("py-setuptools", type="build")
54c60
<     depends_on("py-wheel", type="build", when="@3:")
---
>     depends_on("py-setuptools", type="build")
57,60c63
<     depends_on("py-cached-property@1.5:", type=("build", "run"), when="@:3.6 ^python@:3.7")
<     depends_on("py-numpy@1.7:", type=("build", "run"), when="@:2")
<     depends_on("py-numpy@1.14.5:", type=("build", "run"), when="@3:")
<     depends_on("py-numpy@1.17.5:", type=("build", "run"), when="@3:3.5 ^python@3.8.0:3.8")
---
>     depends_on("py-numpy@1.17.3:", type=("build", "run"), when="@3.9:")
62c65,69
<     depends_on("py-six", type=("build", "run"), when="@:2")
---
>     depends_on("py-numpy@1.17.5:", type=("build", "run"), when="@3:3.5 ^python@3.8.0:3.8")
>     depends_on("py-numpy@1.14.5:", type=("build", "run"), when="@3:")
>     depends_on("py-numpy@1.7:", type=("build", "run"), when="@:2")
>     # https://github.com/h5py/h5py/issues/2353
>     depends_on("py-numpy@:1", when="@:3.10", type=("build", "run"))
66c73,74
<     depends_on("hdf5@1.8.4:1.11 +hl", when="@:2")
---
>     depends_on("hdf5@1.10.4:1.14 +hl", when="@3.10:")
>     depends_on("hdf5@1.8.4:1.14 +hl", when="@3.8:3.9")
68c76
<     depends_on("hdf5@1.8.4:1.14 +hl", when="@3.8:")
---
>     depends_on("hdf5@1.8.4:1.11 +hl", when="@:2")
73c81
<     depends_on("py-mpi4py", when="@:2 +mpi", type=("build", "run"))
---
>     depends_on("py-mpi4py@3.1.1:", when="@3.8: +mpi", type=("build", "run"))
74a83,87
>     depends_on("py-mpi4py", when="@:2 +mpi", type=("build", "run"))
> 
>     # Historical dependencies
>     depends_on("py-cached-property@1.5:", type=("build", "run"), when="@:3.6 ^python@:3.7")
>     depends_on("py-six", type=("build", "run"), when="@:2")
78c91
<             if self.spec.satisfies("%oneapi@2023.0.0:") or self.spec.satisfies("%cce"):
---
>             if self.spec.satisfies("%oneapi@2023.0.0:"):
###### DIFF py-healpy
1c1
< # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,13c5
< # Differences for the 'py-healpy' package
< # 6c6
< # < from spack.package import *
< # ---
< # > from spack import *
< # 28,29d27
< # < 
< # <     patch('cfitsio_version_check.patch', when='@1.13:')
< # contribute the patch
---
> 
23,35c15
<     version('1.14.0', sha256='2720b5f96c314bdfdd20b6ffc0643ac8091faefcf8fd20a4083cedff85a66c5e')
<     version('1.13.0', sha256='d0ae02791c2404002a09c643e9e50bc58e3d258f702c736dc1f39ce1e6526f73')
<     version('1.7.4', sha256='3cca7ed7786ffcca70e2f39f58844667ffb8521180ac890d4da651b459f51442')
< 
<     depends_on('py-setuptools@3.2:', type='build')
<     depends_on('py-pkgconfig', type='build')
<     depends_on('py-numpy@1.13:', type=('build', 'run'))
<     depends_on('py-scipy', type=('build', 'run'))
<     depends_on('py-astropy', type=('build', 'run'))
<     depends_on('py-matplotlib', type=('build', 'run'))
<     depends_on('py-six', type=('build', 'run'))
<     depends_on('cfitsio', type=('build', 'run'))
<     depends_on('healpix-cxx', type=('build', 'run'))
---
>     license("GPL-2.0-only")
37c17,33
<     patch('cfitsio_version_check.patch', when='@1.13:')
---
>     version("1.14.0", sha256="2720b5f96c314bdfdd20b6ffc0643ac8091faefcf8fd20a4083cedff85a66c5e")
>     version("1.13.0", sha256="d0ae02791c2404002a09c643e9e50bc58e3d258f702c736dc1f39ce1e6526f73")
>     version("1.7.4", sha256="3cca7ed7786ffcca70e2f39f58844667ffb8521180ac890d4da651b459f51442")
> 
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
>     depends_on("fortran", type="build")  # generated
> 
>     depends_on("py-setuptools@3.2:", type="build")
>     depends_on("py-pkgconfig", type="build")
>     depends_on("py-numpy@1.13:", type=("build", "run"))
>     depends_on("py-scipy", type=("build", "run"))
>     depends_on("py-astropy", type=("build", "run"))
>     depends_on("py-matplotlib", type=("build", "run"))
>     depends_on("py-six", type=("build", "run"))
>     depends_on("cfitsio", type=("build", "run"))
>     depends_on("healpix-cxx", type=("build", "run"))
###### DIFF py-maturin
1,3c1
< 
< 
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
18a17,23
>     maintainers("teaguesterling")
> 
>     license("Apache-2.0")
> 
>     version("1.6.0", sha256="b955025c24c8babc808db49e0ff90db8b4b1320dcc16b14eb26132841737230d")
>     version("1.5.1", sha256="3dd834ece80edb866af18cbd4635e0ecac40139c726428d5f1849ae154b26dca")
>     version("1.4.0", sha256="ed12e1768094a7adeafc3a74ebdb8dc2201fa64c4e7e31f14cfc70378bf93790")
23,30c28,46
<     depends_on("py-setuptools", type="build")
<     depends_on("py-wheel@0.36.2:", type="build")
<     depends_on("py-setuptools-rust@1.4:", type="build")
<     depends_on("py-tomli@1.1:", when="^python@:3.10", type=("build", "run"))
<     depends_on("rust", type=("build", "run"))
< 
<     def setup_build_environment(self, env):
<         env.set("CARGO_HOME", f"{self.stage.source_path}/.cargo")
---
>     with default_args(type="build"):
>         depends_on("py-setuptools")
>         depends_on("py-wheel@0.36.2:")
>         depends_on("py-setuptools-rust@1.4:")
> 
>     with default_args(type=("build", "run")):
>         depends_on("py-tomli@1.1:", when="^python@:3.10")
>         for rust, maturin in [
>             ("1.70", "1.5.0"),
>             ("1.64", "1.0.0"),
>             ("1.62", "0.14.3"),
>             ("1.59", "0.13.3"),
>         ]:
>             depends_on(f"rust@{rust}:", when=f"@{maturin}:")
> 
>     # May be an accidental dependency, remove in the future
>     # https://git.alpinelinux.org/aports/commit/?id=7ad298b467403b96a6b97d050170e367f147a75f
>     # https://patchwork.yoctoproject.org/project/oe-core/patch/8803dc101b641c948805cab9e5784c38f43b0e51.1702791173.git.tim.orling@konsulko.com/
>     depends_on("bzip2", when="platform=darwin")
###### DIFF quantum-espresso
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,6d4
< 
< #Added version 7.2
23c21
<     maintainers("ye-luo", "danielecesarini", "bellenlau")
---
>     maintainers("ye-luo", "bellenlau", "tgorni")
26a25,26
>     license("GPL-2.0-only")
> 
27a28,29
>     version("7.3.1", sha256="2c58b8fadfe4177de5a8b69eba447db5e623420b070dea6fd26c1533b081d844")
>     version("7.3", sha256="edc2a0f3315c69966df4f82ec86ab9f682187bc9430ef6d2bacad5f27f08972c")
48a51,54
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
>     depends_on("fortran", type="build")  # generated
> 
75,81c81,87
<         depends_on("fftw+openmp", when="^fftw")
<         depends_on("amdfftw+openmp", when="^amdfftw")
<         depends_on("openblas threads=openmp", when="^openblas")
<         depends_on("amdblis threads=openmp", when="^amdblis")
<         depends_on("intel-mkl threads=openmp", when="^intel-mkl")
<         depends_on("armpl-gcc threads=openmp", when="^armpl-gcc")
<         depends_on("acfl threads=openmp", when="^acfl")
---
>         depends_on("fftw+openmp", when="^[virtuals=fftw-api] fftw")
>         depends_on("amdfftw+openmp", when="^[virtuals=fftw-api] amdfftw")
>         depends_on("openblas threads=openmp", when="^[virtuals=blas] openblas")
>         depends_on("amdblis threads=openmp", when="^[virtuals=blas] amdblis")
>         depends_on("intel-mkl threads=openmp", when="^[virtuals=blas] intel-mkl")
>         depends_on("armpl-gcc threads=openmp", when="^[virtuals=blas] armpl-gcc")
>         depends_on("acfl threads=openmp", when="^[virtuals=blas] acfl")
106a113,115
>     # CLOCK variant to display program time in seconds
>     variant("clock", default=False, description="Display program time in seconds")
> 
129c138
<             depends_on("elpa+openmp", when="+openmp")
---
>             depends_on("elpa", when="+openmp")
136a146,149
>     variant("fox", default=False, description="Enables FoX library")
>     with when("+fox"):
>         conflicts("@:7.1", msg="+fox variant requires QE >= 7.2")
> 
232d244
<         when="build_system=generic",
235,238d246
<     with when("+gipaw"):
<         conflicts(
<             "@:6.3", msg="gipaw standard support available for QE 6.3 or grater version only"
<         )
246a255,259
>     # If the Intel suite is used for Lapack, it must be used for fftw and vice-versa
>     for _intel_pkg in INTEL_MATH_LIBRARIES:
>         requires(f"^[virtuals=fftw-api] {_intel_pkg}", when=f"^[virtuals=lapack]   {_intel_pkg}")
>         requires(f"^[virtuals=lapack]   {_intel_pkg}", when=f"^[virtuals=fftw-api] {_intel_pkg}")
> 
259a273,281
>     # gipaw
>     conflicts(
>         "@:6.2",
>         when="+gipaw",
>         msg="gipaw standard support available for QE 6.3 or greater version only",
>     )
>     conflicts("~fox", when="@7.2: +gipaw", msg="gipaw plugin requires FoX")
>     conflicts("+gipaw build_system=cmake", when="@:7.1")
> 
280a303,307
>     # 7.3 - a compile-time problem fixed in 7.3.1
>     patch_url = "https://gitlab.com/QEF/q-e/-/commit/b98ff7539e5731728d2d49ac01021a57f2594027.diff"
>     patch_checksum = "04c125d249d1f076abe04bc4de39bd3b44a41a78d6233b638a17bd96f91443d5"
>     patch(patch_url, sha256=patch_checksum, when="@=7.3+elpa build_system=cmake")
> 
285c312
<     patch(patch_url, sha256=patch_checksum, when="@:7.1 build_system=cmake")
---
>     patch(patch_url, sha256=patch_checksum, when="@7.1 build_system=cmake")
291c318
<     patch(patch_url, sha256=patch_checksum, when="@:7.1 build_system=cmake")
---
>     patch(patch_url, sha256=patch_checksum, when="@7.1 build_system=cmake")
316c343
<     patch(patch_url, sha256=patch_checksum, when="@6.4:6.4.0+qmcpack")
---
>     patch(patch_url, sha256=patch_checksum, when="@=6.4+qmcpack")
352c379
<         when="+patch@6.3:6.3.0",
---
>         when="+patch@=6.3",
359c386
<         when="+patch@6.3:6.3.0",
---
>         when="+patch@=6.3",
399a427,429
>     # gipaw.x will only be installed with cmake if the qe-gipaw version is >= 5c4a4ce.
>     patch("gipaw-eccee44.patch", when="@7.2+gipaw build_system=cmake")
> 
412a443
>             self.define_from_variant("QE_CLOCK_SECONDS", "clock"),
415a447,454
>         plugins = []
> 
>         if "+fox" in spec:
>             cmake_args.append(self.define("QE_ENABLE_FOX", True))
> 
>         if "+gipaw" in spec:
>             plugins.append("gipaw")
> 
428c467,470
<             cmake_args.append(self.define("QE_ENABLE_PW2QMCPACK", True))
---
>             if spec.satisfies("@:7.0"):
>                 cmake_args.append(self.define("QE_ENABLE_PW2QMCPACK", True))
>             else:
>                 plugins.append("pw2qmcpack")
436a479,480
>         if plugins:
>             cmake_args.append(self.define("QE_ENABLE_PLUGINS", plugins))
494c538,539
<         if "^mkl" in spec:
---
>         is_using_intel_libraries = spec["lapack"].name in INTEL_MATH_LIBRARIES
>         if is_using_intel_libraries:
536c581
<             if not spec.satisfies("^mkl"):
---
>             if not is_using_intel_libraries:
540c585
<             if "^mkl" in spec:
---
>             if is_using_intel_libraries:
587a633,635
>         if "+fox" in spec:
>             options.append("--with-fox=yes")
> 
607,608c655,656
<                 zlib_libs = spec["zlib"].prefix.lib + " -lz"
<                 filter_file(zlib_libs, format(spec["zlib"].libs.ld_flags), make_inc)
---
>                 zlib_libs = spec["zlib-api"].prefix.lib + " -lz"
>                 filter_file(zlib_libs, format(spec["zlib-api"].libs.ld_flags), make_inc)
###### DIFF rust
5c5
< # Latest recipe from spack - fixes ssl certs issue
---
> 
38a39
>     version("1.78.0", sha256="ff544823a5cb27f2738128577f1e7e00ee8f4c83f2a348781ae4fc355e91d5a9")
46a48,50
>     depends_on("c", type="build")
>     depends_on("cxx", type="build")
> 
56d59
<     depends_on("cmake@3.13.4:", type="build")
58a62
>     depends_on("libssh2")
62a67,73
>     depends_on("zlib-api")
> 
>     # cmake dependency comes from LLVM. Rust has their own fork of LLVM, with tags corresponding
>     # to each Rust release, so it's easy to loop through tags and grep for "cmake_minimum_required"
>     depends_on("cmake@3.4.3:", type="build", when="@:1.51")
>     depends_on("cmake@3.13.4:", type="build", when="@1.52:1.72")
>     depends_on("cmake@3.20.0:", type="build", when="@1.73:")
74a86
>     depends_on("rust-bootstrap", type="build")
80a93,98
>     depends_on("rust-bootstrap@1.77:1.78", type="build", when="@1.78")
> 
>     # src/llvm-project/llvm/cmake/modules/CheckCompilerVersion.cmake
>     conflicts("%gcc@:7.3", when="@1.73:", msg="Host GCC version must be at least 7.4")
>     # https://github.com/rust-lang/llvm-project/commit/4d039a7a71899038b3bc6ed6fe5a8a48d915caa0
>     conflicts("%gcc@13:", when="@:1.63", msg="Rust<1.64 not compatible with GCC>=13")
88,89c106,112
<     def determine_version(csl, exe):
<         output = Executable(exe)("--version", output=str, error=str)
---
>     def determine_spec_details(cls, prefix, exes_in_prefix):
>         rustc_candidates = [x for x in exes_in_prefix if os.path.basename(x) == "rustc"]
>         cargo_candidates = [x for x in exes_in_prefix if os.path.basename(x) == "cargo"]
>         # Both rustc and cargo must be present
>         if not (rustc_candidates and cargo_candidates):
>             return
>         output = Executable(rustc_candidates[0])("--version", output=str, error=str)
91c114,116
<         return match.group(1) if match else None
---
>         if match:
>             version_str = match.group(1)
>             return Spec.from_detection(f"rust@{version_str}")
96a122,126
>         # Manually instruct Cargo dependency libssh2-sys to build with
>         # the Spack installed libssh2 package. For more info see
>         # https://github.com/alexcrichton/ssh2-rs/issues/173
>         env.set("LIBSSH2_SYS_USE_PKG_CONFIG", "1")
> 
###### DIFF singularity
1c1
< # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5,35d4
< # =======================================================================
< #                         PAWSEY ADDITIONS
< # =======================================================================
< # Differences for the 'singularity' package
< # 6c6
< # < from spack.package import *
< # ---
< # > from spack import *
< # 29,32d28
< # <     version('3.8.7', sha256='3329f2e583f84a8343cb2c0380a1d6cbceafae7d1e633b5cbcadf7143eac859b')
< # <     version('3.8.6', sha256='bb5a3b7670ac9c7a4b3ce5b2c9f3d6b5be60e21b08d338c9dfdabb7b2a99f528')
< # <     version('3.8.5', sha256='7fff78b5c07b5d4d08269bd267ac5e994390f933321e54efd6b7c86683153ce4')
< # <     version('3.8.4', sha256='cb95e6d68b0d20f2b87d60f23a3bf707b7d3e87cee0dd4aa4380f8f481a57ebc')
< # 53,69d48
< # < 
< # <     @run_after('install')
< # <     def set_pawsey_configuration(self):
< # <        configuration_file = join_path(self.spec.prefix.etc, 'singularity', 'singularity.conf')
< # < # do not allow execution of encrypted containers
< # <        filter_file(r'^ *allow *container *encrypted *=.*',
< # <                     'allow container encrypted = no',
< # <                     configuration_file)
< # < # do not mount home by default at runtime
< # <        filter_file(r'^ *mount *home *=.*',
< # <                     'mount home = no',
< # <                     configuration_file)
< # < # # Cray: use RAMFS
< # < # # beyond CLE6up05, this is not needed any more
< # < #       filter_file(r'^ *memory *fs *type *=.*',
< # < #                    'memory fs type = ramfs',
< # < #                    configuration_file)
37d5
< # For the next spack, move to singularityce package
43,50c11,21
<     '''Singularity is a container technology focused on building portable
<        encapsulated environments to support "Mobility of Compute" For older
<        versions of Singularity (pre 3.0) you should use singularity-legacy,
<        which has a different install base (Autotools).
< 
<        Needs post-install chmod/chown steps to enable full functionality.
<        See package definition or `spack-build-out.txt` build log for details,
<        e.g.
---
>     """Singularity is a container technology focused on building portable
>     encapsulated environments to support "Mobility of Compute" For older
>     versions of Singularity (pre 3.0) you should use singularity-legacy,
>     which has a different install base (Autotools).
> 
>     Needs post-install chmod/chown steps to enable full functionality.
>     See package definition or `spack-build-out.txt` build log for details,
>     e.g.
> 
>     tail -15 $(spack location -i singularity)/.spack/spack-build-out.txt
>     """
52,53d22
<        tail -15 $(spack location -i singularity)/.spack/spack-build-out.txt
<     '''
55,56c24,133
<     git      = "https://github.com/hpcng/singularity.git"
<     url      = "https://github.com/hpcng/singularity/releases/download/v3.8.3/singularity-3.8.3.tar.gz"
---
>     git = "https://github.com/hpcng/singularity.git"
>     url = "https://github.com/hpcng/singularity/releases/download/v3.8.5/singularity-3.8.5.tar.gz"
> 
>     license("BSD-3-Clause AND BSD-3-Clause-LBNL")
> 
>     version(
>         "3.8.7",
>         sha256="3329f2e583f84a8343cb2c0380a1d6cbceafae7d1e633b5cbcadf7143eac859b",
>         deprecated=True,
>     )
>     version(
>         "3.8.6",
>         sha256="bb5a3b7670ac9c7a4b3ce5b2c9f3d6b5be60e21b08d338c9dfdabb7b2a99f528",
>         deprecated=True,
>     )
>     version(
>         "3.8.5",
>         sha256="7fff78b5c07b5d4d08269bd267ac5e994390f933321e54efd6b7c86683153ce4",
>         deprecated=True,
>     )
>     version(
>         "3.8.3",
>         sha256="2e22eb9ee1b73fdd51b8783149f0e4d83c0d2d8a0c1edf6034157d50eeefb835",
>         deprecated=True,
>     )
>     version(
>         "3.8.0",
>         sha256="e9608b0e0a8c805218bbe795e9176484837b2f7fcb95e5469b853b3809a2412e",
>         deprecated=True,
>     )
>     version(
>         "3.7.4",
>         sha256="c266369a8bf2747f44e0759858c3fc3b2325b975a8818b2668f0b97b124d0164",
>         deprecated=True,
>     )
>     version(
>         "3.7.3",
>         sha256="6667eb8875d2b66d73504f40c956b42b1351744f488d164204376215d885da5c",
>         deprecated=True,
>     )
>     version(
>         "3.7.2",
>         sha256="36916222e26fb934404f0766e0ff368edac36d7fc31ca571f5f609466609066b",
>         deprecated=True,
>     )
>     version(
>         "3.7.1",
>         sha256="82d2c65063560195ec34551931be3c325b95e8e2009e92755fd7daad346e083c",
>         deprecated=True,
>     )
>     version(
>         "3.7.0",
>         sha256="fb96aaf5f462a56a4a5bd2951287bcbbefe8cf543e228e4e955428f386a8d478",
>         deprecated=True,
>     )
>     version(
>         "3.6.4",
>         sha256="71233a81d6bb4d686d8dc636b3e3e962a372f54001921c89a12b062cefd9e79f",
>         deprecated=True,
>     )
>     version(
>         "3.6.3",
>         sha256="b1a985757a9907d8db0f102fc170a25387e715f7ff31957be964bf47914ea2fd",
>         deprecated=True,
>     )
>     version(
>         "3.6.2",
>         sha256="dfd7ec7376ca0321c47787388fb3e781034edf99068f66efc36109e516024d9b",
>         deprecated=True,
>     )
>     version(
>         "3.6.1",
>         sha256="6cac56106ee7f209150aaee9f8788d03b58796af1b767245d343f0b8a691121c",
>         deprecated=True,
>     )
>     version(
>         "3.5.3",
>         sha256="0c76f1e3808bf4c10e92b17150314b2b816be79f8101be448a6e9d7a96c9e486",
>         deprecated=True,
>     )
>     version(
>         "3.5.2",
>         sha256="f9c21e289377a4c40ed7a78a0c95e1ff416dec202ed49a6c616dd2c37700eab8",
>         deprecated=True,
>     )
>     version(
>         "3.4.1",
>         sha256="638fd7cc5ab2a20e779b8768f73baf21909148339d6c4edf6ff61349c53a70c2",
>         deprecated=True,
>     )
>     version(
>         "3.4.0",
>         sha256="eafb27f1ffbed427922ebe2b5b95d1c9c09bfeb897518867444fe230e3e35e41",
>         deprecated=True,
>     )
>     version(
>         "3.3.0",
>         sha256="070530a472e7e78492f1f142c8d4b77c64de4626c4973b0589f0d18e1fcf5b4f",
>         deprecated=True,
>     )
>     version(
>         "3.2.1",
>         sha256="d4388fb5f7e0083f0c344354c9ad3b5b823e2f3f27980e56efa7785140c9b616",
>         deprecated=True,
>     )
>     version(
>         "3.1.1",
>         sha256="7f0df46458d8894ba0c2071b0848895304ae6b1137d3d4630f1600ed8eddf1a4",
>         deprecated=True,
>     )
58c135
<     maintainers = ['alalazo']
---
>     depends_on("c", type="build")  # generated
60,101c137
<     version('master', branch='master')
<     version('3.8.7', sha256='3329f2e583f84a8343cb2c0380a1d6cbceafae7d1e633b5cbcadf7143eac859b')
<     version('3.8.6', sha256='bb5a3b7670ac9c7a4b3ce5b2c9f3d6b5be60e21b08d338c9dfdabb7b2a99f528')
<     version('3.8.5', sha256='7fff78b5c07b5d4d08269bd267ac5e994390f933321e54efd6b7c86683153ce4')
<     version('3.8.4', sha256='cb95e6d68b0d20f2b87d60f23a3bf707b7d3e87cee0dd4aa4380f8f481a57ebc')
<     version('3.8.3', sha256='2e22eb9ee1b73fdd51b8783149f0e4d83c0d2d8a0c1edf6034157d50eeefb835')
<     version('3.8.0', sha256='e9608b0e0a8c805218bbe795e9176484837b2f7fcb95e5469b853b3809a2412e')
<     version('3.7.4', sha256='c266369a8bf2747f44e0759858c3fc3b2325b975a8818b2668f0b97b124d0164')
<     version('3.7.3', sha256='6667eb8875d2b66d73504f40c956b42b1351744f488d164204376215d885da5c')
<     version('3.7.2', sha256='36916222e26fb934404f0766e0ff368edac36d7fc31ca571f5f609466609066b')
<     version('3.7.1', sha256='82d2c65063560195ec34551931be3c325b95e8e2009e92755fd7daad346e083c')
<     version('3.7.0', sha256='fb96aaf5f462a56a4a5bd2951287bcbbefe8cf543e228e4e955428f386a8d478')
<     version('3.6.4', sha256='71233a81d6bb4d686d8dc636b3e3e962a372f54001921c89a12b062cefd9e79f')
<     version('3.6.3', sha256='b1a985757a9907d8db0f102fc170a25387e715f7ff31957be964bf47914ea2fd')
<     version('3.6.2', sha256='dfd7ec7376ca0321c47787388fb3e781034edf99068f66efc36109e516024d9b')
<     version('3.6.1', sha256='6cac56106ee7f209150aaee9f8788d03b58796af1b767245d343f0b8a691121c')
<     version('3.5.3', sha256='0c76f1e3808bf4c10e92b17150314b2b816be79f8101be448a6e9d7a96c9e486')
<     version('3.5.2', sha256='f9c21e289377a4c40ed7a78a0c95e1ff416dec202ed49a6c616dd2c37700eab8')
<     version('3.4.1', sha256='638fd7cc5ab2a20e779b8768f73baf21909148339d6c4edf6ff61349c53a70c2')
<     version('3.4.0', sha256='eafb27f1ffbed427922ebe2b5b95d1c9c09bfeb897518867444fe230e3e35e41')
<     version('3.3.0', sha256='070530a472e7e78492f1f142c8d4b77c64de4626c4973b0589f0d18e1fcf5b4f')
<     version('3.2.1', sha256='d4388fb5f7e0083f0c344354c9ad3b5b823e2f3f27980e56efa7785140c9b616')
<     version('3.1.1', sha256='7f0df46458d8894ba0c2071b0848895304ae6b1137d3d4630f1600ed8eddf1a4')
< 
<     patch('singularity_v3.4.0_remove_root_check.patch', level=0, when='@3.4.0:3.4.1')
< 
<     @run_after('install')
<     def set_pawsey_configuration(self):
<        configuration_file = join_path(self.spec.prefix.etc, 'singularity', 'singularity.conf')
< # do not allow execution of encrypted containers
<        filter_file(r'^ *allow *container *encrypted *=.*',
<                     'allow container encrypted = no',
<                     configuration_file)
< # do not mount home by default at runtime
<        filter_file(r'^ *mount *home *=.*',
<                     'mount home = no',
<                     configuration_file)
< # # Cray: use RAMFS
< # # beyond CLE6up05, this is not needed any more
< #       filter_file(r'^ *memory *fs *type *=.*',
< #                    'memory fs type = ramfs',
< #                    configuration_file)
---
>     patch("singularity_v3.4.0_remove_root_check.patch", level=0, when="@3.4.0:3.4.1")
###### DIFF singularityce
220a221,222
> 
>     depends_on("c", type="build")  # generated
###### DIFF slate
7d6
< from spack.util.prefix import Prefix
30a30,32
>         "2024.05.31", sha256="9c5d4d6779d8935b6fe41031b46e11ab92102f13c5f684022287c8616661b775"
>     )
>     version(
54a57,60
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
>     depends_on("fortran", type="build")  # generated
> 
67c73
<     depends_on("mpi", when="+mpi")
---
>     depends_on("mpi")
85a92
>     depends_on("lapackpp@2024.05.31:", when="@2024.05.31:")
100a108,109
>     requires("+mpi", msg="MPI is required (use of the 'mpi' variant is deprecated)")
>     requires("+openmp", msg="OpenMP is required (use of the 'openmp' variant is deprecated)")
132d140
<             "-Duse_openmp=%s" % ("+openmp" in spec),
135d142
<             "-Duse_mpi=%s" % ("+mpi" in spec),
154c161
<         self.cache_extra_test_sources(["examples"])
---
>         cache_extra_test_sources(self, ["examples"])
165c172,174
<     def test(self):
---
>     def test_example(self):
>         """build and run slate example"""
> 
167,168c176
<             print("Skipping: stand-alone tests")
<             return
---
>             raise SkipTest("Package must be installed with +mpi and version @2021.05.01 or later")
172c180,181
<             cmake_bin = join_path(self.spec["cmake"].prefix.bin, "cmake")
---
>             cmake = self.spec["cmake"].command
> 
179c188,190
<             self.run_test(cmake_bin, ["-DCMAKE_PREFIX_PATH=" + prefixes, ".."])
---
> 
>             cmake("-DCMAKE_PREFIX_PATH=" + prefixes, "..")
>             make = which("make")
181d191
<             test_args = ["-n", "4", "./ex05_blas"]
183,233c193,194
<             if not launcher:
<                 raise RuntimeError("Cannot run tests due to absence of MPI launcher")
<             self.run_test(launcher.command, test_args, purpose="SLATE smoke test")
<             make("clean")
< 
<     def get_paths(self):
<         rocm_spec = self.spec["hip"]
<         rocm_prefix = Prefix(rocm_spec.prefix)
<             
<         paths = {
<             "hip-path": rocm_spec.prefix,
<             "rocm-path": rocm_spec.prefix,
<             "rocm-device-libs": rocm_spec.prefix, #rocm_prefix, #elf.spec["llvm-amdgpu"].prefix,
<             "llvm-amdgpu": rocm_prefix.llvm,
<             "hsa-rocr-dev": rocm_prefix.hsa,                
<         }
<         paths["bitcode"] = paths["rocm-device-libs"].amdgcn.bitcode
< 
<         return paths
< 
<     def set_variables(self, env):
<         if self.spec.satisfies("+rocm"):
<             # Note: do not use self.spec[name] here, since not all dependencies
<             # have defined prefixes when hip is marked as external.
<             paths = self.get_paths()
<     
<             # Used in hipcc, but only useful when hip is external, since only then
<             # there is a common prefix /opt/rocm-x.y.z.
<             env.set("ROCM_PATH", paths["rocm-path"])
<             # Just the prefix of hip (used in hipcc)
<             env.set("HIP_PATH", paths["hip-path"])
<             env.set("HIP_DEVICE_LIB_PATH", paths["bitcode"])
<             env.set("HIP_CLANG_PATH", paths["llvm-amdgpu"].bin)
<             env.set("HSA_PATH", paths["hsa-rocr-dev"])
<             env.set("DEVICE_LIB_PATH", paths["bitcode"])
<             env.set("LLVM_PATH", paths["llvm-amdgpu"])
<     
<             env.append_path(
<                 "HIPCC_COMPILE_FLAGS_APPEND",
<                 "--rocm-path={0}".format(paths["rocm-path"]),
<                 separator=" ",
<             )            
<     
<     
<     def setup_build_environment(self, env):
<         if self.spec.satisfies("+rocm"):
<             self.set_variables(env)
<     
<     def setup_run_environment(self, env):
<         if self.spec.satisfies("+rocm"):
<             self.set_variables(env)        
---
>             assert launcher is not None, "Cannot run tests due to absence of MPI launcher"
>             launcher("-n", "4", "./ex05_blas")
###### DIFF tar
1c1
< # Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
6,12d5
< #pawsey additions
< #    def flag_handler(self, name, flags):
< #        if name == "cflags":
< #            if self.spec.satisfies("%cce"):
< #                flags.append("-Wno-error=incompatible-function-pointer-types")
< #        return (flags, None, None)
< 
16d8
< from spack.util.environment import is_system_path
29a22,23
>     license("GPL-3.0-or-later")
> 
36a31,32
>     depends_on("c", type="build")  # generated
> 
72,77d67
<     def flag_handler(self, name, flags):
<         if name == "cflags":
<             if self.spec.satisfies("%cce"):
<                 flags.append("-Wno-error=incompatible-function-pointer-types")
<         return (flags, None, None)    
< 
88c78,80
<         if spec["iconv"].name == "libc":
---
>         if spec["iconv"].name == "libiconv":
>             args.append(f"--with-libiconv-prefix={spec['iconv'].prefix}")
>         else:
90,91d81
<         elif not is_system_path(spec["iconv"].prefix):
<             args.append("--with-libiconv-prefix={0}".format(spec["iconv"].prefix))
###### DIFF trilinos
5,11c5
< # Latest recipe from spack
< #Pawsey additions:
< #updated flag_handler to handle cce/16.0.1
< #        if name == "cflags":
< #            if spec.satisfies("%cce"):
< #                flags.append("-Wno-error=implicit-function-declaration")
< # comment out lines 786-793
---
> 
13a8
> import re
43c38
<     maintainers("keitat", "sethrj", "kuberry", "jwillenbring", "psakievich")
---
>     maintainers("keitat", "kuberry", "jwillenbring", "psakievich")
50a46
>     version("16.0.0", sha256="46bfc40419ed2aa2db38c144fb8e61d4aa8170eaa654a88d833ba6b92903f309")
78a75,78
>     depends_on("c", type="build")
>     depends_on("cxx", type="build")
>     depends_on("fortran", type="build", when="+fortran")
> 
409c409,411
<     depends_on("kokkos@4.2.01", when="@15.1.0: +kokkos")
---
>     depends_on("kokkos@4.3.01", when="@master: +kokkos")
>     depends_on("kokkos@4.3.01", when="@16.0.0 +kokkos")
>     depends_on("kokkos@4.2.01", when="@15.1.0:15.1.1 +kokkos")
433c435
<     for plat in ["cray", "darwin", "linux"]:
---
>     for plat in ["darwin", "linux"]:
457c459
<     depends_on("suite-sparse", when="+suite-sparse")
---
>     depends_on("suite-sparse@:7.3.1", when="+suite-sparse")
525,528d526
<         if name == "cflags":
<             if spec.satisfies("%cce"):
<                 flags.append("-Wno-error=implicit-function-declaration")
< 
616a615,638
>         if self.spec.satisfies("@master: +kokkos"):
>             with open(
>                 os.path.join(self.stage.source_path, "packages", "kokkos", "CMakeLists.txt")
>             ) as f:
>                 all_txt = f.read()
>             r = dict(
>                 re.findall(r".*set\s?\(\s?Kokkos_VERSION_(MAJOR|MINOR|PATCH)\s?(\d+)", all_txt)
>             )
>             kokkos_version_in_trilinos_source = Version(
>                 ".".join([r["MAJOR"], r["MINOR"], r["PATCH"].zfill(2)])
>             )
>             kokkos_version_specified = spec["kokkos"].version
>             if kokkos_version_in_trilinos_source != kokkos_version_specified:
>                 raise InstallError(
>                     "For Trilinos@[master,develop], ^kokkos version in spec must "
>                     "match version in Trilinos source code. Specify ^kokkos@{0} ".format(
>                         kokkos_version_in_trilinos_source
>                     )
>                     + "for trilinos@[master,develop] instead of ^kokkos@{0}.\n".format(
>                         kokkos_version_specified
>                     )
>                     + "Trilinos recipe maintainers, please update the ^kokkos version range"
>                 )
> 
786,793c808,815
< #        if "@15: +python" in spec:
< #            binder = spec["binder"].prefix.bin.binder
< #            clang_include_dirs = spec["binder"].clang_include_dirs
< #            libclang_include_dir = spec["binder"].libclang_include_dir
< #            options.append(define("PyTrilinos2_BINDER_EXECUTABLE", binder))
< #            options.append(define("PyTrilinos2_BINDER_clang_include_dirs", clang_include_dirs))
< #            options.append(define("PyTrilinos2_BINDER_LibClang_include_dir", libclang_include_dir))
< #            options.append(define_from_variant("PyTrilinos2_ENABLE_TESTS", "test"))
---
>         if "@15: +python" in spec:
>             binder = spec["binder"].prefix.bin.binder
>             clang_include_dirs = spec["binder"].clang_include_dirs
>             libclang_include_dir = spec["binder"].libclang_include_dir
>             options.append(define("PyTrilinos2_BINDER_EXECUTABLE", binder))
>             options.append(define("PyTrilinos2_BINDER_clang_include_dirs", clang_include_dirs))
>             options.append(define("PyTrilinos2_BINDER_LibClang_include_dir", libclang_include_dir))
>             options.append(define_from_variant("PyTrilinos2_ENABLE_TESTS", "test"))
###### DIFF unzip
5c5
< # latest recipe from spack - removing clang condition in patch and cflags
---
> 
13c13
<     url = "http://downloads.sourceforge.net/infozip/unzip60.tar.gz"
---
>     url = "https://downloads.sourceforge.net/infozip/unzip60.tar.gz"
18a19,21
>     depends_on("c", type="build")  # generated
>     depends_on("cxx", type="build")  # generated
> 
23,27d25
<     # The Cray cc wrapper doesn't handle the '-s' flag (strip) cleanly.
<     @when("platform=cray")
<     def patch(self):
<         filter_file(r"^LFLAGS2=.*", "LFLAGS2=", join_path("unix", "configure"))
< 
36c34
<         make_args.append('LOC="{}"'.format(" ".join(cflags)))
---
>         make_args.append(f"LOC=\"{' '.join(cflags)}\"")
45c43
<         return "http://downloads.sourceforge.net/infozip/unzip{0}.tar.gz".format(version.joined)
---
>         return f"http://downloads.sourceforge.net/infozip/unzip{version.joined}.tar.gz"
49c47
<         return self.get_make_args() + ["prefix={0}".format(self.prefix), "install"]
---
>         return self.get_make_args() + [f"prefix={self.prefix}", "install"]
###### DIFF vasp
1c1
< # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2024 Lawrence Livermore National Security, LLC and other
5c5
< # Pawsey additions: vaspsol, vtst and dftd4 support.
---
> 
7,8d6
< import grp
< import shutil
13c11
< class Vasp(MakefilePackage):
---
> class Vasp(MakefilePackage, CudaPackage):
22c20,21
<     url      = "file://{0}/vasp.5.4.4.tgz".format(os.getcwd())
---
>     url = "file://{0}/vasp.5.4.4.pl2.tgz".format(os.getcwd())
>     maintainers("snehring")
25,104c24,102
<     version('6.3.0', sha256='adcf83bdfd98061016baae31616b54329563aa2739573f069dd9df19c2071ad3')
<     version('6.2.1', sha256='d25e2f477d83cb20fce6a2a56dcee5dccf86d045dd7f76d3ae19af8343156a13')
<     version('6.1.1', sha256='e37a4dfad09d3ad0410833bcd55af6b599179a085299026992c2d8e319bf6927')
<     version('5.4.4', sha256='5bd2449462386f01e575f9adf629c08cb03a13142806ffb6a71309ca4431cfb3')
< #    version('5.4.4.pl2', sha256='98f75fd75399a23d76d060a6155f4416b340a1704f256a00146f89024035bc8e')
< 
<     resource(name='vaspsol',
<              git='https://github.com/henniggroup/VASPsol.git',
<              tag='V1.0',
<              when='+vaspsol')
< 
<     resource(name='vtst',
<              url='http://theory.cm.utexas.edu/code/vtstcode-197.tgz',
<              sha256='2017f5129a10e48ef2d928932eb48156dde7b8a9a26e6d0f5c086eae3ee0cb5a',
<              when='+vtst')
< 
<     variant('scalapack', default=False,
<             description='Enables build with SCALAPACK')
< 
<     variant('cuda', default=False,
<             description='Enables running on Nvidia GPUs')
< 
<     variant('vaspsol', default=False,
<             description='Enable VASPsol implicit solvation model\n'
<             'https://github.com/henniggroup/VASPsol')
< 
<     variant('vtst', default=False,
<             description='Incorporate VTST extensions\n'
<             'https://theory.cm.utexas.edu/vtsttools/index.html')
< 
<     variant('dftd4', default=False)
< 
<     depends_on('rsync', type='build')
<     depends_on('openblas')
<     depends_on('lapack')
<     depends_on('fftw')
<     depends_on('mpi', type=('build', 'link', 'run'))
<     depends_on('netlib-scalapack', when='+scalapack')
<     depends_on('cuda', when='+cuda')
<     depends_on('qd', when='%nvhpc')
<     depends_on('dftd4', when='+dftd4')
< 
<     conflicts('%gcc@:8', msg='GFortran before 9.x does not support all features needed to build VASP')
<     conflicts('+vaspsol', when='+cuda', msg='+vaspsol only available for CPU')
<     conflicts('~scalapack', when='@6.3.0:', msg='scalapack is mandatory for vasp 6.3.0 and later')
< 
<     # Patch is adapted from patch provided in master branch of vaspsol:
<     # https://github.com/henniggroup/VASPsol/raw/master/src/patches/pbz_patch_610
<     # This may have to be further modified for later vasp versions.
<     #
<     # Note that this patch edits the solvation.F source under the VASPsol directory,
<     # which in turn will be copied into the vasp source in the edit stage below.
<     patch('vaspsol-6.2.1.patch.1', when='@6.0:+vaspsol')
< 
<     # VTST patches for src/main.F src/makefile and src/.objects
<     patch('vtst-5:6.1.patch', when='@5:6.1+vtst')
<     patch('vtst-6.3:.patch', when='@6.3:+vtst')
<     conflicts('+vtst', when='@6.2', msg='missing correct VTST patch/sources for VASP 6.2')
< 
<     parallel = False
< 
<     # Copy/overwrite vasp sources from vtst or vapsol extensions.
<     def patch(self):
<         if self.spec.satisfies('+vaspsol'):
<             shutil.copy('VASPsol/src/solvation.F', 'src/')
< 
<         vtst_pfx = 'vtstcode-197/vtstcode'
<         vtst_sfx = None
< 
<         if self.spec.satisfies('@5+vtst'):
<             vtst_sfx = '5'
<         elif self.spec.satisfies('@6.1+vtst'):
<             vtst_sfx = '6.1'
<         elif self.spec.satisfies('@6.3+vtst'):
<             vtst_sfx = '6.3'
<         elif self.spec.satisfies('@6.4+vtst'):
<             vtst_sfx = '6.4'
< 
<         if vtst_sfx:
<             shutil.copytree(vtst_pfx+vtst_sfx, 'src/', dirs_exist_ok=True)
---
>     version("6.4.3", sha256="fe30e773f2a3e909b5e0baa9654032dfbdeff7ec157bc348cee7681a7b6c24f4")
>     version("6.3.2", sha256="f7595221b0f9236a324ea8afe170637a578cdd5a837cc7679e7f7812f6edf25a")
>     version("6.3.0", sha256="adcf83bdfd98061016baae31616b54329563aa2739573f069dd9df19c2071ad3")
>     version(
>         "6.2.0",
>         sha256="49e7ba351bd634bc5f5f67a8ef1e38e64e772857a1c02f602828898a84197e25",
>         deprecated=True,
>     )
>     version(
>         "6.1.1",
>         sha256="e37a4dfad09d3ad0410833bcd55af6b599179a085299026992c2d8e319bf6927",
>         deprecated=True,
>     )
>     version(
>         "5.4.4.pl2",
>         sha256="98f75fd75399a23d76d060a6155f4416b340a1704f256a00146f89024035bc8e",
>         deprecated=True,
>     )
>     version(
>         "5.4.4",
>         sha256="5bd2449462386f01e575f9adf629c08cb03a13142806ffb6a71309ca4431cfb3",
>         deprecated=True,
>     )
> 
>     resource(
>         name="vaspsol",
>         git="https://github.com/henniggroup/VASPsol.git",
>         tag="V1.0",
>         when="+vaspsol",
>     )
> 
>     variant("openmp", default=False, when="@6:", description="Enable openmp build")
> 
>     variant("scalapack", default=False, when="@:5", description="Enables build with SCALAPACK")
> 
>     variant("cuda", default=False, description="Enables running on Nvidia GPUs")
>     variant("fftlib", default=True, when="@6.2: +openmp", description="Enables fftlib build")
> 
>     variant(
>         "vaspsol",
>         default=False,
>         when="@:6.2",
>         description="Enable VASPsol implicit solvation model\n"
>         "https://github.com/henniggroup/VASPsol",
>     )
>     variant("shmem", default=True, description="Enable use_shmem build flag")
>     variant("hdf5", default=False, when="@6.2:", description="Enabled HDF5 support")
> 
>     depends_on("rsync", type="build")
>     depends_on("blas")
>     depends_on("lapack")
>     depends_on("fftw-api")
>     depends_on("fftw+openmp", when="+openmp ^[virtuals=fftw-api] fftw")
>     depends_on("amdfftw+openmp", when="+openmp ^[virtuals=fftw-api] amdfftw")
>     depends_on("amdblis threads=openmp", when="+openmp ^[virtuals=blas] amdblis")
>     depends_on("openblas threads=openmp", when="+openmp ^[virtuals=blas] openblas")
>     depends_on("mpi", type=("build", "link", "run"))
>     # fortran oddness requires the below
>     depends_on("openmpi%aocc", when="%aocc ^[virtuals=mpi] openmpi")
>     depends_on("openmpi%gcc", when="%gcc ^[virtuals=mpi] openmpi")
>     depends_on("scalapack", when="+scalapack")
>     # wiki (and makefiles) suggest scalapack is expected in 6:
>     depends_on("scalapack", when="@6:")
>     depends_on("nccl", when="@6.3: +cuda")
>     depends_on("hdf5+fortran+mpi", when="+hdf5")
>     # at the very least the nvhpc mpi seems required
>     depends_on("nvhpc+mpi+lapack+blas", when="%nvhpc")
> 
>     conflicts(
>         "%gcc@:8", msg="GFortran before 9.x does not support all features needed to build VASP"
>     )
>     conflicts("+vaspsol", when="+cuda", msg="+vaspsol only available for CPU")
>     requires("%nvhpc", when="@6.3: +cuda", msg="vasp requires nvhpc to build the openacc build")
>     # the mpi compiler wrappers in nvhpc assume nvhpc is the underlying compiler, seemingly
>     conflicts("^[virtuals=mpi] nvhpc", when="%gcc", msg="nvhpc mpi requires nvhpc compiler")
>     conflicts("^[virtuals=mpi] nvhpc", when="%aocc", msg="nvhpc mpi requires nvhpc compiler")
>     conflicts(
>         "cuda_arch=none", when="@6.3: +cuda", msg="CUDA arch required when building openacc port"
>     )
107,120c105,158
<         # Modify the platform specific arch/makefile.include.xxx file, then
<         # copy to makefile.include in the top level directory.
< 
<         # Following has been adapted from spack development branch, and special casing
<         # 6.3.0 for gcc as we're not needing nvhpc support for setonix and aocc is currently
<         # broken.
< 
<         if spec.satisfies('@6.3.0:'):
<             makefile_base = 'makefile.include.'
<             if '%gcc' in spec:
<                 if '+openmp' in spec:
<                     make_include = join_path('arch', 'makefile.include.gnu_omp')
<                 else:
<                     make_include = join_path('arch', 'makefile.include.gnu')
---
>         cpp_options = [
>             "-DMPI",
>             "-DMPI_BLOCK=8000",
>             "-Duse_collective",
>             "-DCACHE_SIZE=4000",
>             "-Davoidalloc",
>             "-Duse_bse_te",
>             "-Dtbdyn",
>             "-Dfock_dblbuf",
>         ]
>         objects_lib = ["linpack_double.o"]
>         llibs = list(self.compiler.stdcxx_libs)
>         cflags = ["-fPIC", "-DAAD_"]
>         fflags = ["-w"]
>         incs = [spec["fftw-api"].headers.include_flags]
> 
>         if self.spec.satisfies("@6:"):
>             cpp_options.append("-Dvasp6")
> 
>         llibs.extend([spec["blas"].libs.ld_flags, spec["lapack"].libs.ld_flags])
> 
>         fc = [spec["mpi"].mpifc]
>         fcl = [spec["mpi"].mpifc]
> 
>         include_prefix = ""
>         omp_flag = "-fopenmp"
> 
>         if spec.satisfies("+shmem"):
>             cpp_options.append("-Duse_shmem")
>             objects_lib.append("getshmem.o")
> 
>         if spec.satisfies("@:6.2"):
>             include_prefix = "linux_"
>         include_string = f"makefile.include.{include_prefix}"
> 
>         # gcc
>         if spec.satisfies("%gcc"):
>             include_string += "gnu"
>             if spec.satisfies("+openmp"):
>                 include_string += "_omp"
>             make_include = join_path("arch", include_string)
>         # nvhpc
>         elif spec.satisfies("%nvhpc"):
>             qd_root = join_path(
>                 spec["nvhpc"].prefix,
>                 f"Linux_{spec['nvhpc'].target.family.name}",
>                 str(spec["nvhpc"].version.dotted),
>                 "compilers",
>                 "extras",
>                 "qd",
>             )
>             nvroot = join_path(spec["nvhpc"].prefix, f"Linux_{spec['nvhpc'].target.family.name}")
>             if spec.satisfies("@6.3:"):
>                 cpp_options.extend(['-DHOST=\\"LinuxNV\\"', "-Dqd_emulate"])
122,124c160
<                 suffix = ''
<                 if '+openmp' in spec:
<                     suffix = '_omp'
---
>                 cpp_options.extend(['-DHOST=\\"LinuxPGI\\"', "-DPGI16", "-Dqd_emulate", "-Mfree"])
126,131c162,191
<                 make_include = join_path('arch', 'makefile.include.{0}{1}'.
<                                              format(spec.compiler.name), suffix)
<         else:
<             if '%gcc' in spec:
<                 if '+openmp' in spec:
<                     make_include = join_path('arch', 'makefile.include.linux_gnu_omp')
---
>             fflags.extend(["-Mnoupcase", "-Mbackslash", "-Mlarge_arrays"])
>             incs.append(f"-I{join_path(qd_root, 'include', 'qd')}")
>             llibs.extend([f"-L{join_path(qd_root, 'lib')}", "-lqdmod", "-lqd"])
> 
>             if spec.satisfies("@:6.2"):
>                 make_include = join_path("arch", f"{include_string}pgi")
>                 filter_file("pgcc", spack_cc, make_include)
>                 filter_file("pgc++", spack_cxx, make_include, string=True)
>                 filter_file("pgfortran", spack_fc, make_include)
>             else:
>                 include_string += "nvhpc"
>                 if spec.satisfies("+openmp"):
>                     include_string += "_omp"
>                 if spec.satisfies("+cuda"):
>                     include_string += "_acc"
>             make_include = join_path("arch", include_string)
>             omp_flag = "-mp"
>             filter_file(r"^QD[ \t]*\??=.*$", f"QD = {qd_root}", make_include)
>             filter_file("NVROOT[ \t]*=.*$", f"NVROOT = {nvroot}", make_include)
>         # aocc
>         elif spec.satisfies("%aocc"):
>             cpp_options.extend(['-DHOST=\\"LinuxAMD\\"', "-Dshmem_bcast_buffer", "-DNGZhalf"])
>             fflags.extend(["-fno-fortran-main", "-Mbackslash", "-ffunc-args-alias"])
>             if spec.satisfies("@6.3.0: ^amdfftw@4.0:"):
>                 cpp_options.extend(["-Dfftw_cache_plans", "-Duse_fftw_plan_effort"])
>             if spec.satisfies("+openmp"):
>                 if spec.satisfies("@6.3.2:"):
>                     include_string += "aocc_ompi_aocl_omp"
>                 elif spec.satisfies("@=6.3.0"):
>                     include_string += "gnu_ompi_aocl_omp"
133,150c193,198
<                     make_include = join_path('arch', 'makefile.include.linux_gnu')
<             elif '%nvhpc' in spec:
<                 make_include = join_path('arch', 'makefile.include.linux_pgi')
<                 filter_file('-pgc++libs', '-c++libs', make_include, string=True)
<                 filter_file('pgcc', spack_cc, make_include)
<                 filter_file('pgc++', spack_cxx, make_include, string=True)
<                 filter_file('pgfortran', spack_fc, make_include)
<                 filter_file('/opt/pgi/qd-2.3.17/install/include',
<                             spec['qd'].prefix.include, make_include)
<                 filter_file('/opt/pgi/qd-2.3.17/install/lib',
<                             spec['qd'].prefix.lib, make_include)
<             elif '%aocc' in spec:
<                 if '+openmp' in spec:
<                     copy(
<                         join_path('arch', 'makefile.include.linux_gnu_omp'),
<                         join_path('arch', 'makefile.include.linux_aocc_omp')
<                     )
<                     make_include = join_path('arch', 'makefile.include.linux_aocc_omp')
---
>                     include_string += "gnu_omp"
>             else:
>                 if spec.satisfies("@6.3.2:"):
>                     include_string += "aocc_ompi_aocl"
>                 elif spec.satisfies("@=6.3.0"):
>                     include_string += "gnu_ompi_aocl"
152,156c200,204
<                     copy(
<                         join_path('arch', 'makefile.include.linux_gnu'),
<                         join_path('arch', 'makefile.include.linux_aocc')
<                     )
<                     make_include = join_path('arch', 'makefile.include.linux_aocc')
---
>                     include_string += "gnu"
>             make_include = join_path("arch", include_string)
>             filter_file("^CC_LIB[ ]{0,}=.*$", f"CC_LIB={spack_cc}", make_include)
>             if spec.satisfies("@6:6.3.0"):
>                 filter_file("gcc", f"{spack_fc} -Mfree", make_include, string=True)
158,159c206
<                     'gcc', '{0} {1}'.format(spack_cc, '-Mfree'),
<                     make_include, string=True
---
>                     "-fallow-argument-mismatch", " -fno-fortran-main", make_include, string=True
161,222c208,219
<                 filter_file('g++', spack_cxx, make_include, string=True)
<                 filter_file('^CFLAGS_LIB[ ]{0,}=.*$',
<                             'CFLAGS_LIB = -O3', make_include)
<                 filter_file('^FFLAGS_LIB[ ]{0,}=.*$',
<                             'FFLAGS_LIB = -O2', make_include)
<                 filter_file('^OFLAG[ ]{0,}=.*$',
<                             'OFLAG = -O3', make_include)
<                 filter_file('^FC[ ]{0,}=.*$',
<                             'FC = {0}'.format(spec['mpi'].mpifc),
<                             make_include, string=True)
<                 filter_file('^FCL[ ]{0,}=.*$',
<                             'FCL = {0}'.format(spec['mpi'].mpifc),
<                             make_include, string=True)
<             else:
<                 suffix = ''
<                 if '+openmp' in spec:
<                     suffix = '_omp'
< 
<                 make_include = join_path('arch', 'makefile.include.linux_{0}{1}'.
<                                              format(spec.compiler.name), suffix)
< 
<         shutil.copy(make_include, 'makefile.include')
< 
<         # This bunch of 'filter_file()' is to make these options settable
<         # as environment variables
<         filter_file('^CPP_OPTIONS[ ]{0,}=[ ]{0,}',
<                     'CPP_OPTIONS ?= ',
<                     'makefile.include')
<         filter_file('^FFLAGS[ ]{0,}=[ ]{0,}',
<                     'FFLAGS ?= ',
<                     'makefile.include')
< 
<         filter_file('^LIBDIR *=.*$', '', 'makefile.include')
<         filter_file('^BLAS *=.*$', 'BLAS ?=', 'makefile.include')
<         filter_file('^LAPACK *=.*$', 'LAPACK ?=', 'makefile.include')
<         filter_file('^FFTW *\?=.*$', 'FFTW ?=', 'makefile.include')
<         filter_file('^MPI_INC *=.*$', 'MPI_INC ?=', 'makefile.include')
<         filter_file('-DscaLAPACK.*$\n', '', 'makefile.include')
<         filter_file('^SCALAPACK.*$', '', 'makefile.include')
<         filter_file('^OBJECTS_LIB *= *', 'OBJECTS_LIB = getshmem.o ', 'makefile.include')
< 
<         if "+dftd4" in spec:
<             with open("makefile.include", "a") as fp:
<                 fp.write(f"LLIBS += -L{self.spec['dftd4'].prefix.lib} -ldftd4\n")
<                 fp.write(f"INCS  += -I{self.spec['dftd4'].prefix.include}\n")
<                 fp.write(f"INCS  += -I{self.spec['dftd4'].prefix.include}/dftd4/{self.compiler.name}-{self.compiler.version}\n")
< 
<         if '+cuda' in spec:
<             filter_file('^OBJECTS_GPU[ ]{0,}=.*$',
<                         'OBJECTS_GPU ?=',
<                         'makefile.include')
< 
<             filter_file('^CPP_GPU[ ]{0,}=.*$',
<                         'CPP_GPU ?=',
<                         'makefile.include')
< 
<             filter_file('^CFLAGS[ ]{0,}=.*$',
<                         'CFLAGS ?=',
<                         'makefile.include')
< 
<     def setup_build_environment(self, spack_env):
<         spec = self.spec
---
>         # fj
>         elif spec.satisfies("@6.4.3: %fj target=a64fx"):
>             include_string += "fujitsu_a64fx"
>             omp_flag = "-Kopenmp"
>             fc.extend(["simd_nouse_multiple_structures", "-X03"])
>             fcl.append("simd_nouse_multiple_structures")
>             cpp_options.append('-DHOST=\\"FJ-A64FX\\"')
>             fflags.append("-Koptmsg=2")
>             llibs.extend(["-SSL2BLAMP", "-SCALAPACK"])
>             if spec.satisfies("+openmp"):
>                 include_string += "_omp"
>             make_include = join_path("arch", include_string)
224,230d220
<         cpp_options = ['-DMPI -DMPI_BLOCK=8000',
<                        '-Duse_collective', '-DCACHE_SIZE=4000',
<                        '-Davoidalloc', '-Duse_bse_te',
<                        '-Dtbdyn', '-Duse_shmem']
<         if '%nvhpc' in self.spec:
<             cpp_options.extend(['-DHOST=\\"LinuxPGI\\"', '-DPGI16',
<                                 '-Dqd_emulate'])
231a222,232
>             if spec.satisfies("+openmp"):
>                 make_include = join_path("arch", f"{include_string}{spec.compiler.name}_omp")
>                 # if the above doesn't work, fallback to gnu
>                 if not os.path.exists(make_include):
>                     make_include = join_path("arch", f"{include_string}.gnu_omp")
>             else:
>                 make_include = join_path(
>                     "arch", f"{include_string}{include_prefix}" + spec.compiler.name
>                 )
>                 if not os.path.exists(make_include):
>                     make_include = join_path("arch", f"{include_string}.gnu")
233,280c234,328
<         if self.spec.satisfies('@6:'):
<             cpp_options.append('-Dvasp6')
<         if self.spec.satisfies('+dftd4'):
<             cpp_options.append('-DDFTD4')
< 
<         cflags = ['-fPIC', '-DADD_']
<         fflags = []
<         if '%gcc' in spec or '%intel' in spec:
<             fflags.append('-w')
<         elif '%nvhpc' in spec:
<             fflags.extend(['-Mnoupcase', '-Mbackslash', '-Mlarge_arrays'])
< 
<         spack_env.set('BLAS', spec['blas'].libs.ld_flags)
<         spack_env.set('LAPACK', spec['lapack'].libs.ld_flags)
<         spack_env.set('FFTW', spec['fftw'].prefix)
<         spack_env.set('FFTW_ROOT', spec['fftw'].prefix)
<         spack_env.set('MPI_INC', spec['mpi'].prefix.include)
< 
<         if '%nvhpc' in spec:
<             spack_env.set('QD', spec['qd'].prefix)
< 
<         if '+scalapack' in spec or spec.satisfies('@6.3.0:'):
<             cpp_options.append('-DscaLAPACK')
<             spack_env.set('SCALAPACK', spec['netlib-scalapack'].libs.ld_flags)
< 
<         if '+cuda' in spec:
<             cpp_gpu = ['-DCUDA_GPU', '-DRPROMU_CPROJ_OVERLAP',
<                        '-DCUFFT_MIN=28', '-DUSE_PINNED_MEMORY']
< 
<             objects_gpu = ['fftmpiw.o', 'fftmpi_map.o', 'fft3dlib.o',
<                            'fftw3d_gpu.o', 'fftmpiw_gpu.o']
< 
<             cflags.extend(['-DGPUSHMEM=300', '-DHAVE_CUBLAS'])
< 
<             spack_env.set('CUDA_ROOT', spec['cuda'].prefix)
<             spack_env.set('CPP_GPU', ' '.join(cpp_gpu))
<             spack_env.set('OBJECTS_GPU', ' '.join(objects_gpu))
< 
<         if '+vaspsol' in spec:
<             cpp_options.append('-Dsol_compat')
< 
<         if spec.satisfies('%gcc@10:'):
<             fflags.append('-fallow-argument-mismatch')
< 
<         # Finally
<         spack_env.set('CPP_OPTIONS', ' '.join(cpp_options))
<         spack_env.set('CFLAGS', ' '.join(cflags))
<         spack_env.set('FFLAGS', ' '.join(fflags))
---
> 
>         if spec.satisfies("+openmp"):
>             cpp_options.extend(["-Dsysv", "-D_OPENMP"])
>             llibs.extend(["-ldl", spec["fftw-api:openmp"].libs.ld_flags])
>             fc.append(omp_flag)
>             fcl.append(omp_flag)
>         else:
>             llibs.append(spec["fftw-api"].libs.ld_flags)
> 
>         if spec.satisfies("^scalapack"):
>             cpp_options.append("-DscaLAPACK")
>             if spec.satisfies("%nvhpc"):
>                 llibs.append("-Mscalapack")
>             else:
>                 llibs.append(spec["scalapack"].libs.ld_flags)
> 
>         if spec.satisfies("+cuda"):
>             if spec.satisfies("@6.3:"):
>                 # openacc
>                 cpp_options.extend(["-D_OPENACC", "-DUSENCCL"])
>                 llibs.extend(["-cudalib=cublas,cusolver,cufft,nccl", "-cuda"])
>                 fc.append("-acc")
>                 fcl.append("-acc")
>                 cuda_flags = [f"cuda{str(spec['cuda'].version.dotted[0:2])}", "rdc"]
>                 for f in spec.variants["cuda_arch"].value:
>                     cuda_flags.append(f"cc{f}")
>                 fc.append(f"-gpu={','.join(cuda_flags)}")
>                 fcl.append(f"-gpu={','.join(cuda_flags)}")
>                 fcl.extend(list(self.compiler.stdcxx_libs))
>                 cc = [spec["mpi"].mpicc, "-acc"]
>                 if spec.satisfies("+openmp"):
>                     cc.append(omp_flag)
>                 filter_file("^CC[ \t]*=.*$", f"CC = {' '.join(cc)}", make_include)
> 
>             else:
>                 # old cuda thing
>                 cflags.extend(["-DGPUSHMEM=300", "-DHAVE_CUBLAS"])
>                 filter_file(r"^CUDA_ROOT[ \t]*\?=.*$", spec["cuda"].prefix, make_include)
> 
>         if spec.satisfies("+vaspsol"):
>             cpp_options.append("-Dsol_compat")
>             copy("VASPsol/src/solvation.F", "src/")
> 
>         if spec.satisfies("+hdf5"):
>             cpp_options.append("-DVASP_HDF5")
>             llibs.append(spec["hdf5:fortran"].libs.ld_flags)
>             incs.append(spec["hdf5"].headers.include_flags)
> 
>         if spec.satisfies("%gcc@10:"):
>             fflags.append("-fallow-argument-mismatch")
> 
>         filter_file(r"^VASP_TARGET_CPU[ ]{0,}\?=.*", "", make_include)
> 
>         if spec.satisfies("@:5"):
>             filter_file("-DscaLAPACK.*$\n", "", make_include)
> 
>         if spec.satisfies("+fftlib"):
>             cxxftlib = (
>                 f"CXX_FFTLIB = {spack_cxx} {omp_flag}"
>                 f" -DFFTLIB_THREADSAFE{' '.join(list(self.compiler.stdcxx_libs))}"
>             )
>             filter_file("^#FCL[ ]{0,}=fftlib.o", "FCL += fftlib/fftlib.o", make_include)
>             filter_file("^#CXX_FFTLIB.*$", cxxftlib, make_include)
>             filter_file(
>                 "^#INCS_FFTLIB.*$",
>                 f"INCS_FFTLIB = -I./include {spec['fftw-api'].headers.include_flags}",
>                 make_include,
>             )
>             filter_file(r"#LIBS[ \t]*\+=.*$", "LIBS = fftlib", make_include)
>             llibs.append("-ldl")
>             fcl.append(join_path("fftlib", "fftlib.o"))
> 
>         # clean multiline CPP options at begining of file
>         filter_file(r"^[ \t]+(-D[a-zA-Z0-9_=]+[ ]*)+[ ]*\\*$", "", make_include)
>         # replace relevant variables in the makefile.include
>         filter_file("^FFLAGS[ \t]*=.*$", f"FFLAGS = {' '.join(fflags)}", make_include)
>         filter_file(r"^FFLAGS[ \t]*\+=.*$", "", make_include)
>         filter_file(
>             "^CPP_OPTIONS[ \t]*=.*$", f"CPP_OPTIONS = {' '.join(cpp_options)}", make_include
>         )
>         filter_file(r"^INCS[ \t]*\+?=.*$", f"INCS = {' '.join(incs)}", make_include)
>         filter_file(r"^LLIBS[ \t]*\+?=.*$", f"LLIBS = {' '.join(llibs)}", make_include)
>         filter_file(r"^LLIBS[ \t]*\+=[ ]*-.*$", "", make_include)
>         filter_file("^CFLAGS[ \t]*=.*$", f"CFLAGS = {' '.join(cflags)}", make_include)
>         filter_file(
>             "^OBJECTS_LIB[ \t]*=.*$", f"OBJECTS_LIB = {' '.join(objects_lib)}", make_include
>         )
>         filter_file("^FC[ \t]*=.*$", f"FC = {' '.join(fc)}", make_include)
>         filter_file("^FCL[ \t]*=.*$", f"FCL = {' '.join(fcl)}", make_include)
> 
>         os.rename(make_include, "makefile.include")
> 
>     def setup_build_environment(self, spack_env):
>         if self.spec.satisfies("%nvhpc +cuda"):
>             spack_env.set("NVHPC_CUDA_HOME", self.spec["cuda"].prefix)
283,284c331,335
<         if '+cuda' in self.spec:
<             make('gpu', 'gpu_ncl')
---
>         if spec.satisfies("@:6.2"):
>             if spec.satisfies("+cuda"):
>                 make("DEPS=1", "all")
>             else:
>                 make("DEPS=1", "std", "gam", "ncl")
286c337
<             make('std', 'gam', 'ncl')
---
>             make("DEPS=1, all")
289,298c340
<         install_tree('bin/', prefix.bin)
< 
<         newgrp = "vasp"
<         if spec.satisfies('@6:'):
<             newgrp = "vasp6"
< 
<         gid = grp.getgrnam(newgrp).gr_gid
<         for dpath, dnames, fnames in os.walk(prefix.bin):
<             for fn in fnames:
<                 os.chown(os.path.join(dpath, fn), -1, gid)
---
>         install_tree("bin/", prefix.bin)
###### DIFF vdifio
###### DIFF wcstools
###### DIFF wsclean
