---
# Commands used for baseline_sanity_check test
# Each entry is a list of the form [command name, command option(s), command output]

applications:
  ansys-fluids: ['runwb2', '--help', 'valid options are'] # Not happy with this
  gromacs/2022.5: ['gmx_mpi_d', '--version', 'GROMACS version'] # 2023.08
  gromacs/2023: ['gmx_mpi_d', '--version', GROMACS version] # 2023.08
  gromacs/2022.5-double: ['gmx_mpi_d', '--version', 'GROMACS version']
  gromacs/2023-double: ['gmx_mpi_d', '--version', 'GROMACS version']
  gromacs/2022.5-mixed: ['gmx_mpi', '--version', 'GROMACS version']
  gromacs/2023-mixed: ['gmx_mpi', '--version', 'GROMACS version']
  gromacs-amd-gfx90a/2023: ['gmx_mpi', '--version', 'GROMACS version']
  cdo: ['cdo', '--help', 'Usage : cdo']
  cp2k: ['cp2k.psmp', '--version', 'CP2K version']
  # cpmd crashing with MPICH error straightaway
  #'cpmd': ['cpmd.x', '-h', 'Usage: cpmd.x']
  lammps: ['lmp', '-h', 'Large-scale Atomic/Molecular Massively Parallel Simulator']
  lammps-amd-gfx90a: ['lmp', '-h', 'Large-scale Atomic/Molecular Massively Parallel Simulator']
  namd: ['namd2', '-h', 'Info: NAMD']
  namd-amd-gfx90a: ['namd2', '-h', 'Info: NAMD'] # 2023.08
  ncl: ['ncargversion', '', 'NCAR Graphics Software Version']
  nco: ['ncdiff', '--help', 'find more help on ncdiff']
  ncview: ['ncview', '--help', 'Ncview comes with ABSOLUTELY NO WARRANTY']
  nekrs-amd-gfx90a: ['nekrs', '--help', 'usage:']
  nektar: ['IncNavierStokesSolver', '--version', 'Nektar+']
  nwchem: ['nwchem', '--help', 'argument  1 = --help']
  openfoam: ['foamTestTutorial', '--help', 'Run foamRunTutorials with specified tutorial directories']
  # Execute simple.x starts a job, so using ldd instead
  quantum-espresso: ['ldd', '$(whereis -b simple.x)']
  vasp: ['vasp_std', '--help', 'file INCAR.']
  vasp6: ['vasp_std', '--help', 'No INCAR found, STOPPING']
bio-applications:
  beast1: ['beast', '-help', 'Example: beast test.xml']
  beast2: ['beast', '-help', 'Example: beast test.xml']
  exabayes: ['exabayes', '-h', 'This is ExaBayes, version']
  examl: ['examl', '-h', 'This is ExaML version']
# No cppzmq (no suitable command found yet)
astro-applications:
  casacore: ['casahdf5support', '', 'HDF5 support']
  apr: ['apr-1-config', '-h', 'Usage: apr-1-config']
  apr-util: ['apu-1-config', '-h', 'Usage: apu-1-config']
  subversion: ['svn', '-h', 'Subversion command-line client.']
  cfitsio: ['ldd', 'lib/libcfitsio.so']
  pgplot: ['pgbind', '-h', 'Usage: pgbind']
  mcpp: ['mcpp', '-h', 'Usage:  mcpp']
  wcslib: ['fitshdr', '-h', 'Usage: fitshdr']
  wcstools: ['wcshead', '-h', 'usage: wcshead']
  cppunit: ['DllPlugInTester', '-h', 'DllPlugInTester [-c -b -n -t -o -w]']
  xerces-c: ['DOMPrint', '-h', 'This program invokes the DOM parser, and builds the DOM tree']
  # This is crashing straightaway
  #chgcentre: ['chgcentre', '-h', 'A program to change the phase centre of a measurement set.']
  py-emcee: ['python3', '-c "import emcee; print(emcee)"', "module 'emcee'"]
  py-astropy: ['python3', '-c "import astropy; print(astropy)"', "module 'astropy'"]
  py-funcsigs: ['python3', '-c "import funcsigs; print(funcsigs)"', "module 'funcsigs'"]
  # Not working in 2024.02 due to installation issue - not a package in 2024.05
  py-healpy: ['python3', '-c "import healpy; print(healpy)"', "module 'healpy'"]
  log4cxx: ['ldd', 'lib64/liblog4cxx.so']
  libzmq: ['ldd', 'lib/libzmq.so']
# No eigen (no suitable binary or library found), hpx (python script can't be called easily)
libraries:
  hpx: ['python3', 'bin/hpxrun.py', 'This script is a simple startup script']
  hdf5: ['h5dump', '-h', 'usage: h5dump']
  petsc: ['ldd', 'lib/libpetsc.so']
  netlib-scalapack: ['ldd', 'lib/libscalapack.so']
  kokkos: ['hpcbind', '-h', 'Usage: hpcbind']
  kokkos-amd-gfx90a: ['hpcbind', '-h', 'Usage: hpcbind']
  magma-amd-gfx90a: ['ldd', 'lib/libmagma.so']
  arpack-ng: ['ldd', 'lib64/libarpack.so']
  plumed: ['plumed-config', '-h', 'Check if plumed as dlopen enabled']
  fftw/3.3.10: ['fftw-wisdom', '-h', 'Usage: fftw-wisdom']
  fftw/2.1.5: ['ldd', 'lib/.so']
  slate: ['ldd', 'lib64/libslate.so']
  adios2: ['adios2_iotest', '-h', 'Usage: adios_iotest -a appid -c config']
  trilinos: ['hpcbind', '-h', 'Usage: hpcbind']
  trilinos-amd-gfx90a: ['hpcbind', '-h', 'Usage: hpcbind']
  opencv: ['ldd', 'lib64/libopencv_core.so']
  boost: ['ldd', 'lib/libboost_mpi.so']
  openblas: ['ldd', 'lib/libopenblas.so']
  netcdf-cxx: ['ldd', 'lib/libnetcdf_c++.so']
  netlib-lapack: ['ldd', 'lib64/libblas.so']
  plasma: ['plasmatest', '-h', 'Available routines:']
  charmpp: ['charmrun', '-h', 'Parallel run options:']
  parallel-netcdf: ['pnetcdf_version', '-v', 'PnetCDF Version:']
  netcdf-fortran: ['nf-config', '--help', 'Usage: nf-config']
  netcdf-cxx4: ['ncxx4-config', '--help', 'Usage: ncxx4-config']
  blaspp: ['ldd', 'lib64/libblaspp.so']
  gsl: ['gsl-config', '-h', 'The GSL CBLAS library is used by default.']
  netcdf-c: ['nc-config', '-h', 'Usage: nc-config']
  scotch: ['mtst' ,'-V', 'mtst, version']
  parmetis: ['ldd', 'lib/libparmetis.so']
  metis: ['ldd', 'lib/libmetis.so']
programming-languages:
  r: ['R', '-h', 'R, a system for statistical computation and graphics']
  rust: ['rustc', '-h', 'Usage: rustc']
  python: ['python', '-h', 'usage: python']
  perl: ['perl', '-h', 'Usage: perl']
  go: ['go', '-h', 'Go is a tool for managing Go source code.']
  ruby: ['ruby', '-h', 'Usage: ruby']
  openjdk: ['java', '--help', 'Usage: java']
# No py-setuptools or py-boto3 (no suitable command found yet for either one)
utilities:
  cmake: ['cmake', '--version', 'CMake suite maintained and supported by Kitware']
  tower-agent: ['tw-agent', '-h', 'Nextflow Tower Agent']
  rclone: ['rclone', '-h', 'Rclone syncs files']
  ffmpeg: ['ffmpeg', '-h', 'Hyper fast Audio and Video encoder']
  automake: ['automake', '--help', 'Generate Makefile.in for configure from Makefile.am.']
  tower-cli: ['tw', '-h', 'Nextflow Tower CLI.']
  gnuplot: ['gnuplot', '-h', 'Usage: gnuplot']
  reframe: ['reframe', '-h', 'Options controlling the ReFrame environment:']
  miniocli: ['mc', '-h', 'mc - MinIO Client for object storage and filesystems.']
  mpifileutils: ['dcp', '-h', 'Usage: dcp']
  parallel: ['parallel', '-h', 'GNU Parallel can do much more']
  nano: ['nano', '-h', 'Usage: nano']
  nextflow: ['nextflow', '-h', 'Print this help']
  singularityce: ['singularity', '-h', 'Linux container platform optimized for High Performance Computing']
  feh: ['feh', '-h', 'Usage : feh']
  libtool: ['libtool', '-h', 'Provide generalized library-building support services.']
  awscli: ['aws', 'help', 'The  AWS  Command  Line  Interface']
  autoconf: ['autoconf', '-h', 'Generate a configuration script from a TEMPLATE-FILE if given']
  py-pip: ['pip', '-h', 'pip <command>']
# no viz packages
#visualisation:
python-packages:
  py-numpy: ['python3', '-c "import numpy as np; print(np.version)"', "module 'numpy.version'"]
  py-matplotlib: ['python3', '-c "import matplotlib; print(matplotlib)"', "module 'matplotlib'"]
  py-scipy: ['python3', '-c "import scipy; print(scipy)"', "module 'scipy'"]
  py-cython: ['python3', '-c "import cython; print(cython)"', "module 'cython'"]
  py-pandas: ['python3', '-c "import pandas; print(pandas)"', "module 'pandas'"]
  py-dask: ['python3', '-c "import dask; print(dask)"', "module 'dask'"]
  py-numba: ['python3', '-c "import numba; print(numba)"', "module 'numba'"]
  py-scikit-learn: ['python3', '-c "import sklearn; print(sklearn)"', "module 'sklearn'"]
  py-h5netcdf: ['python3', '-c "import h5netcdf; print(h5netcdf)"', "module 'h5netcdf'"]
  py-h5py: ['python3', '-c "import h5py; print(h5py)"', "module 'h5py"]
  py-netcdf4: ['python3', '-c "import netCDF4; print(netCDF4)"', "module 'netCDF4'"]
  py-mpi4py: ['python3', '-c "import mpi4py; print(mpi4py)"', "module 'mpi4py'"]
  py-plotly: ['python3', '-c "import plotly; print(plotly)"', "module 'plotly'"]
  py-ipython: ['python3', '-c "import IPython; print(IPython)"', "module 'IPython'"]
benchmarking:
  osu-micro-benchmarks: ['osu_init', '', '# OSU MPI Init Test']
  # Want alternative command for hpl
  hpl: ['xhpl', '', 'function HPL_pdinfo']
  ior: ['ior', '-h', 'Synopsis ior']
developer-tools:
  hpcviewer: ['hpcviewer', '-h', 'hpcviewer ']
# Not working in 2024.05 due to installation issue (no multiprocess python module)
  py-hatchet: ['python3', '-c "import hatchet; print(hatchet)"', "module 'hatchet'"]
  caliper: ['cali-stat', '-h', 'Collect and print statistics about data elements in Caliper streams']
